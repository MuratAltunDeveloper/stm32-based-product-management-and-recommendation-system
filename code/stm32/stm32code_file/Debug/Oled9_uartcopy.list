
Oled9_uartcopy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c710  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  0800c8a0  0800c8a0  0000d8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d494  0800d494  0000f088  2**0
                  CONTENTS
  4 .ARM          00000008  0800d494  0800d494  0000e494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d49c  0800d49c  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d49c  0800d49c  0000e49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4a0  0800d4a0  0000e4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800d4a4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f088  2**0
                  CONTENTS
 10 .bss          00000e70  20000088  20000088  0000f088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ef8  20000ef8  0000f088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a496  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042a4  00000000  00000000  0002954e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  0002d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001040  00000000  00000000  0002ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025850  00000000  00000000  0002fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc92  00000000  00000000  000555a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0b9e  00000000  00000000  0007323a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143dd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006568  00000000  00000000  00143e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0014a384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c888 	.word	0x0800c888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c888 	.word	0x0800c888

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b0eb      	sub	sp, #428	@ 0x1ac
 8000594:	af02      	add	r7, sp, #8
int main(void)
 8000596:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 800059a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800059e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005a2:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

  /* USER CODE BEGIN 1 */

	//global aşama seç değişkenleri tanımlanıyor:
	//burada şimdi kontrol tanımlama
    int sayac1=0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	// Diğer değişken tanımlamaları
	int yukaributonbas;
	int asagibutonbas;
	int onaybutonbas;
	int art = 0;
 80005ac:	2200      	movs	r2, #0
 80005ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005b2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005b6:	649a      	str	r2, [r3, #72]	@ 0x48
	int mantik = 1;
 80005b8:	2201      	movs	r2, #1
 80005ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005be:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005c2:	601a      	str	r2, [r3, #0]
	int screen_switch = 0;
 80005c4:	2200      	movs	r2, #0
 80005c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005ce:	635a      	str	r2, [r3, #52]	@ 0x34
	int menu2 = 0;
 80005d0:	2200      	movs	r2, #0
 80005d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005da:	639a      	str	r2, [r3, #56]	@ 0x38
	int state = 1;
 80005dc:	2201      	movs	r2, #1
 80005de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005e6:	611a      	str	r2, [r3, #16]
	int control = 0;
 80005e8:	2200      	movs	r2, #0
 80005ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005ee:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005f2:	631a      	str	r2, [r3, #48]	@ 0x30
	int rtnMainPage = 1;//rtnMainpage 1 yaptım ürün ve zaman yönetimine girsin diye
 80005f4:	2201      	movs	r2, #1
 80005f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80005fe:	669a      	str	r2, [r3, #104]	@ 0x68
	int upbuton = 0;
 8000600:	2200      	movs	r2, #0
 8000602:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000606:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800060a:	62da      	str	r2, [r3, #44]	@ 0x2c
	int bottombuton = 0;
 800060c:	2200      	movs	r2, #0
 800060e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000612:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000616:	629a      	str	r2, [r3, #40]	@ 0x28
	int pagecroos = 0;
 8000618:	2200      	movs	r2, #0
 800061a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800061e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000622:	615a      	str	r2, [r3, #20]
	int choseProduct = 0;
 8000624:	2200      	movs	r2, #0
 8000626:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800062a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800062e:	60da      	str	r2, [r3, #12]
	char* products[] = {"pano sistem ", "dataloger", "pompa sistem","geri"};
 8000630:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000634:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000638:	4aa7      	ldr	r2, [pc, #668]	@ (80008d8 <main+0x348>)
 800063a:	f103 0418 	add.w	r4, r3, #24
 800063e:	4613      	mov	r3, r2
 8000640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int productscounter[]={-1,-1,-1};//üretilen ürün sayısı dizisi
 8000646:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800064a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800064e:	4aa3      	ldr	r2, [pc, #652]	@ (80008dc <main+0x34c>)
 8000650:	3350      	adds	r3, #80	@ 0x50
 8000652:	ca07      	ldmia	r2, {r0, r1, r2}
 8000654:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int giris=0;
 8000658:	2200      	movs	r2, #0
 800065a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800065e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000662:	605a      	str	r2, [r3, #4]
	int control_cikis=0;
 8000664:	2200      	movs	r2, #0
 8000666:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800066a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800066e:	64da      	str	r2, [r3, #76]	@ 0x4c
	int cnttime=0;
 8000670:	2200      	movs	r2, #0
 8000672:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000676:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800067a:	66da      	str	r2, [r3, #108]	@ 0x6c
	int  whichMonths[]={0,0,0};
 800067c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000680:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000684:	2200      	movs	r2, #0
 8000686:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000688:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800068c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000690:	2200      	movs	r2, #0
 8000692:	661a      	str	r2, [r3, #96]	@ 0x60
 8000694:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000698:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800069c:	2200      	movs	r2, #0
 800069e:	665a      	str	r2, [r3, #100]	@ 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f002 f802 	bl	80026a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f001 f8e6 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f001 fa08 	bl	8001abc <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ac:	f001 f94a 	bl	8001944 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006b0:	f001 f976 	bl	80019a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006b4:	f001 f9a2 	bl	80019fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80006b8:	f00a fac8 	bl	800ac4c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80006bc:	f001 f9d4 	bl	8001a68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80006c0:	f001 fdf4 	bl	80022ac <ssd1306_Init>
  ssd1306_Fill(White);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f001 fe5b 	bl	8002380 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80006ca:	f001 fe71 	bl	80023b0 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Önceki buton durumlarını saklamak için değişkenler
       int prevButtonState1 = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
       int prevButtonState2 = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
       int prevButtonState3 = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

       // LED durumlarını saklamak için değişkenler
       int ledState1 = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
       int ledState2 = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
       int ledState3 = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
       //MENU SAYACI
       int menu = 0;
 80006f2:	2200      	movs	r2, #0
 80006f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80006f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80006fc:	609a      	str	r2, [r3, #8]


    while (1)
    {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006fe:	f00a facb 	bl	800ac98 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
      // Mevcut buton durumlarını oku
                int buttonState1 = (int)HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_UP_PIN);
 8000702:	2101      	movs	r1, #1
 8000704:	4876      	ldr	r0, [pc, #472]	@ (80008e0 <main+0x350>)
 8000706:	f002 fb13 	bl	8002d30 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
                int buttonState2 = (int)HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_DOWN_PIN);
 8000710:	2104      	movs	r1, #4
 8000712:	4873      	ldr	r0, [pc, #460]	@ (80008e0 <main+0x350>)
 8000714:	f002 fb0c 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
                int buttonState3 = (int)HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN);
 800071e:	2110      	movs	r1, #16
 8000720:	486f      	ldr	r0, [pc, #444]	@ (80008e0 <main+0x350>)
 8000722:	f002 fb05 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

                // Button 1 kontrolü
                if (buttonState1 == 1 && prevButtonState1 == 0) {
 800072c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000730:	2b01      	cmp	r3, #1
 8000732:	d13a      	bne.n	80007aa <main+0x21a>
 8000734:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000738:	2b00      	cmp	r3, #0
 800073a:	d136      	bne.n	80007aa <main+0x21a>
                    ledState1 = !ledState1; // LED durumunu değiştir
 800073c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000740:	2b00      	cmp	r3, #0
 8000742:	bf0c      	ite	eq
 8000744:	2301      	moveq	r3, #1
 8000746:	2300      	movne	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, ledState1); // LED'i yak veya söndür
 800074e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800075a:	4861      	ldr	r0, [pc, #388]	@ (80008e0 <main+0x350>)
 800075c:	f002 fb00 	bl	8002d60 <HAL_GPIO_WritePin>
                    //MENU İŞLEMLERİ  UP BUTTONU
                               menu++;
 8000760:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000764:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000770:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000774:	609a      	str	r2, [r3, #8]
                               if (menu > 1) menu = 1;
 8000776:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800077a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	2b01      	cmp	r3, #1
 8000782:	dd05      	ble.n	8000790 <main+0x200>
 8000784:	2201      	movs	r2, #1
 8000786:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800078a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800078e:	609a      	str	r2, [r3, #8]
                               updateDisplay(menu);
 8000790:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000794:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	1d3a      	adds	r2, r7, #4
 800079c:	4694      	mov	ip, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f8a4 	bl	80008ec <updateDisplay.0>
                               HAL_Delay(200); // Debounce delay
 80007a4:	20c8      	movs	r0, #200	@ 0xc8
 80007a6:	f001 fff1 	bl	800278c <HAL_Delay>


                }
                prevButtonState1 = buttonState1; // Buton durumunu güncelle
 80007aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80007ae:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

                // Button 2 kontrolü
                if (buttonState2 == 1 && prevButtonState2 == 0) {
 80007b2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d13a      	bne.n	8000830 <main+0x2a0>
 80007ba:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d136      	bne.n	8000830 <main+0x2a0>
                    ledState2 = !ledState2; // LED durumunu değiştir
 80007c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf0c      	ite	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	2300      	movne	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, ledState2); // LED'i yak veya söndür
 80007d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007e0:	483f      	ldr	r0, [pc, #252]	@ (80008e0 <main+0x350>)
 80007e2:	f002 fabd 	bl	8002d60 <HAL_GPIO_WritePin>

                    //MENU İŞLEMLERİ DOWN BUTTONU
                               menu--;
 80007e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80007ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80007f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80007fa:	609a      	str	r2, [r3, #8]
                               if (menu < 0) menu = 0;
 80007fc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000800:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	da05      	bge.n	8000816 <main+0x286>
 800080a:	2200      	movs	r2, #0
 800080c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000810:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000814:	609a      	str	r2, [r3, #8]
                               updateDisplay(menu);
 8000816:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800081a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	1d3a      	adds	r2, r7, #4
 8000822:	4694      	mov	ip, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f861 	bl	80008ec <updateDisplay.0>
                               HAL_Delay(200); // Debounce delay
 800082a:	20c8      	movs	r0, #200	@ 0xc8
 800082c:	f001 ffae 	bl	800278c <HAL_Delay>
                }
                prevButtonState2 = buttonState2; // Buton durumunu güncelle
 8000830:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000834:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                // Button 3 kontrolü
                if (buttonState3 == 1 && prevButtonState3 == 0) {
 8000838:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800083c:	2b01      	cmp	r3, #1
 800083e:	d143      	bne.n	80008c8 <main+0x338>
 8000840:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000844:	2b00      	cmp	r3, #0
 8000846:	d13f      	bne.n	80008c8 <main+0x338>
                    ledState3 = !ledState3; // LED durumunu değiştir
 8000848:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf0c      	ite	eq
 8000850:	2301      	moveq	r3, #1
 8000852:	2300      	movne	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ledState3); // LED'i yak veya söndür
 800085a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800085e:	b2db      	uxtb	r3, r3
 8000860:	461a      	mov	r2, r3
 8000862:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000866:	481e      	ldr	r0, [pc, #120]	@ (80008e0 <main+0x350>)
 8000868:	f002 fa7a 	bl	8002d60 <HAL_GPIO_WritePin>





                               if (menu == 0)
 800086c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000870:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d118      	bne.n	80008ac <main+0x31c>
                               {
                                   // Implement Predictionfunc logic

                                   //BURADA PREDİCTFUNC
           	                        ssd1306_Fill(Black);
 800087a:	2000      	movs	r0, #0
 800087c:	f001 fd80 	bl	8002380 <ssd1306_Fill>
           	                        ssd1306_SetCursor(0, 0);
 8000880:	2100      	movs	r1, #0
 8000882:	2000      	movs	r0, #0
 8000884:	f001 fec6 	bl	8002614 <ssd1306_SetCursor>
           	                        ssd1306_WriteString("Tahmin ediliyor", Font_7x10, White);
 8000888:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <main+0x354>)
 800088a:	2201      	movs	r2, #1
 800088c:	9200      	str	r2, [sp, #0]
 800088e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000890:	4815      	ldr	r0, [pc, #84]	@ (80008e8 <main+0x358>)
 8000892:	f001 fe99 	bl	80025c8 <ssd1306_WriteString>
           	                         ssd1306_UpdateScreen();
 8000896:	f001 fd8b 	bl	80023b0 <ssd1306_UpdateScreen>
                                       HAL_Delay(1000);
 800089a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089e:	f001 ff75 	bl	800278c <HAL_Delay>
                            	   Predictionfunc();
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	469c      	mov	ip, r3
 80008a6:	f000 faa1 	bl	8000dec <Predictionfunc.1>
 80008aa:	e00a      	b.n	80008c2 <main+0x332>


                               }
                               else if (menu == 1)
 80008ac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80008b0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d103      	bne.n	80008c2 <main+0x332>




                                   // Implement Asamasec logic
                            	   SelectStage();
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	469c      	mov	ip, r3
 80008be:	f000 fc9d 	bl	80011fc <SelectStage.2>
                               }
                               HAL_Delay(200); // Debounce delay
 80008c2:	20c8      	movs	r0, #200	@ 0xc8
 80008c4:	f001 ff62 	bl	800278c <HAL_Delay>
                }
                prevButtonState3 = buttonState3; // Buton durumunu güncelle
 80008c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80008cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

                // Biraz bekle (debouncing için)
                HAL_Delay(50); // 50 ms bekleme
 80008d0:	2032      	movs	r0, #50	@ 0x32
 80008d2:	f001 ff5b 	bl	800278c <HAL_Delay>
    {
 80008d6:	e712      	b.n	80006fe <main+0x16e>
 80008d8:	0800c8e4 	.word	0x0800c8e4
 80008dc:	0800c8f4 	.word	0x0800c8f4
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	0800d2a4 	.word	0x0800d2a4
 80008e8:	0800c8a0 	.word	0x0800c8a0

080008ec <updateDisplay.0>:
       {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	f8c7 c000 	str.w	ip, [r7]
           ssd1306_Fill(Black);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fd41 	bl	8002380 <ssd1306_Fill>
           ssd1306_SetCursor(0, 0);
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fe87 	bl	8002614 <ssd1306_SetCursor>
           ssd1306_WriteString("is Sistemi\n", Font_7x10, White);
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <updateDisplay.0+0x9c>)
 8000908:	2201      	movs	r2, #1
 800090a:	9200      	str	r2, [sp, #0]
 800090c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800090e:	481f      	ldr	r0, [pc, #124]	@ (800098c <updateDisplay.0+0xa0>)
 8000910:	f001 fe5a 	bl	80025c8 <ssd1306_WriteString>
           if (menu == 0)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d116      	bne.n	8000948 <updateDisplay.0+0x5c>
               ssd1306_SetCursor(0, 20);
 800091a:	2114      	movs	r1, #20
 800091c:	2000      	movs	r0, #0
 800091e:	f001 fe79 	bl	8002614 <ssd1306_SetCursor>
               ssd1306_WriteString("> tahminler\n", Font_7x10, White);
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <updateDisplay.0+0x9c>)
 8000924:	2201      	movs	r2, #1
 8000926:	9200      	str	r2, [sp, #0]
 8000928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800092a:	4819      	ldr	r0, [pc, #100]	@ (8000990 <updateDisplay.0+0xa4>)
 800092c:	f001 fe4c 	bl	80025c8 <ssd1306_WriteString>
               ssd1306_SetCursor(0, 30);
 8000930:	211e      	movs	r1, #30
 8000932:	2000      	movs	r0, #0
 8000934:	f001 fe6e 	bl	8002614 <ssd1306_SetCursor>
               ssd1306_WriteString("urunler\n", Font_7x10, White);
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <updateDisplay.0+0x9c>)
 800093a:	2201      	movs	r2, #1
 800093c:	9200      	str	r2, [sp, #0]
 800093e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000940:	4814      	ldr	r0, [pc, #80]	@ (8000994 <updateDisplay.0+0xa8>)
 8000942:	f001 fe41 	bl	80025c8 <ssd1306_WriteString>
 8000946:	e018      	b.n	800097a <updateDisplay.0+0x8e>
           else if (menu == 1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d115      	bne.n	800097a <updateDisplay.0+0x8e>
               ssd1306_SetCursor(0, 20);
 800094e:	2114      	movs	r1, #20
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fe5f 	bl	8002614 <ssd1306_SetCursor>
               ssd1306_WriteString("tahminler\n", Font_7x10, White);
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <updateDisplay.0+0x9c>)
 8000958:	2201      	movs	r2, #1
 800095a:	9200      	str	r2, [sp, #0]
 800095c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <updateDisplay.0+0xac>)
 8000960:	f001 fe32 	bl	80025c8 <ssd1306_WriteString>
               ssd1306_SetCursor(0, 30);
 8000964:	211e      	movs	r1, #30
 8000966:	2000      	movs	r0, #0
 8000968:	f001 fe54 	bl	8002614 <ssd1306_SetCursor>
               ssd1306_WriteString("> urunler\n", Font_7x10, White);
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <updateDisplay.0+0x9c>)
 800096e:	2201      	movs	r2, #1
 8000970:	9200      	str	r2, [sp, #0]
 8000972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <updateDisplay.0+0xb0>)
 8000976:	f001 fe27 	bl	80025c8 <ssd1306_WriteString>
           ssd1306_UpdateScreen();
 800097a:	f001 fd19 	bl	80023b0 <ssd1306_UpdateScreen>
       }
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	0800d2a4 	.word	0x0800d2a4
 800098c:	0800c900 	.word	0x0800c900
 8000990:	0800c90c 	.word	0x0800c90c
 8000994:	0800c91c 	.word	0x0800c91c
 8000998:	0800c928 	.word	0x0800c928
 800099c:	0800c934 	.word	0x0800c934

080009a0 <TimeManager.4>:
       void TimeManager(int whichPrd) {
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	4664      	mov	r4, ip
 80009aa:	f8c7 c000 	str.w	ip, [r7]
           printf("time manager       time manager\n");
 80009ae:	4877      	ldr	r0, [pc, #476]	@ (8000b8c <TimeManager.4+0x1ec>)
 80009b0:	f00a fec6 	bl	800b740 <puts>
           ssd1306_WriteString("Ay Secimi", Font_7x10, White);
 80009b4:	4b76      	ldr	r3, [pc, #472]	@ (8000b90 <TimeManager.4+0x1f0>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	9200      	str	r2, [sp, #0]
 80009ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009bc:	4875      	ldr	r0, [pc, #468]	@ (8000b94 <TimeManager.4+0x1f4>)
 80009be:	f001 fe03 	bl	80025c8 <ssd1306_WriteString>
           int twoCntOnayBtn = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
           int cnt = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
           cnttime++;
 80009ca:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80009cc:	3301      	adds	r3, #1
 80009ce:	66e3      	str	r3, [r4, #108]	@ 0x6c
           while(cnttime > 1) {
 80009d0:	e0d3      	b.n	8000b7a <TimeManager.4+0x1da>
               ssd1306_Fill(Black); // Ekranı temizle
 80009d2:	2000      	movs	r0, #0
 80009d4:	f001 fcd4 	bl	8002380 <ssd1306_Fill>
               ssd1306_SetCursor(0, 40); // İmleci konumlandır
 80009d8:	2128      	movs	r1, #40	@ 0x28
 80009da:	2000      	movs	r0, #0
 80009dc:	f001 fe1a 	bl	8002614 <ssd1306_SetCursor>
               if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_UP_PIN) == GPIO_PIN_SET) {
 80009e0:	2101      	movs	r1, #1
 80009e2:	486d      	ldr	r0, [pc, #436]	@ (8000b98 <TimeManager.4+0x1f8>)
 80009e4:	f002 f9a4 	bl	8002d30 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d107      	bne.n	80009fe <TimeManager.4+0x5e>
                   cnt++;
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
                   if(cnt >= 9) {
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	2b08      	cmp	r3, #8
 80009f8:	dd01      	ble.n	80009fe <TimeManager.4+0x5e>
                       cnt = 9;
 80009fa:	2309      	movs	r3, #9
 80009fc:	60bb      	str	r3, [r7, #8]
               if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_SET) {
 80009fe:	2104      	movs	r1, #4
 8000a00:	4865      	ldr	r0, [pc, #404]	@ (8000b98 <TimeManager.4+0x1f8>)
 8000a02:	f002 f995 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d107      	bne.n	8000a1c <TimeManager.4+0x7c>
                   cnt--;
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
                   if(cnt <= 0) {
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dc01      	bgt.n	8000a1c <TimeManager.4+0x7c>
                       cnt = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
               if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN) == GPIO_PIN_SET) {
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	485e      	ldr	r0, [pc, #376]	@ (8000b98 <TimeManager.4+0x1f8>)
 8000a20:	f002 f986 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d10a      	bne.n	8000a40 <TimeManager.4+0xa0>
                   twoCntOnayBtn++;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
                   if(twoCntOnayBtn > 1) {
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	dd04      	ble.n	8000a40 <TimeManager.4+0xa0>
                       cnttime = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	66e3      	str	r3, [r4, #108]	@ 0x6c
                       rtnMainPage = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	66a3      	str	r3, [r4, #104]	@ 0x68
                       break;
 8000a3e:	e0a1      	b.n	8000b84 <TimeManager.4+0x1e4>
               switch(cnt) {
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	f200 8093 	bhi.w	8000b70 <TimeManager.4+0x1d0>
 8000a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <TimeManager.4+0xb0>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000a75 	.word	0x08000a75
 8000a54:	08000a91 	.word	0x08000a91
 8000a58:	08000aad 	.word	0x08000aad
 8000a5c:	08000ac9 	.word	0x08000ac9
 8000a60:	08000ae5 	.word	0x08000ae5
 8000a64:	08000b01 	.word	0x08000b01
 8000a68:	08000b1d 	.word	0x08000b1d
 8000a6c:	08000b39 	.word	0x08000b39
 8000a70:	08000b55 	.word	0x08000b55
                       whichMonths[whichPrd] = 1;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3316      	adds	r3, #22
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4423      	add	r3, r4
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("ocak", Font_7x10, White);
 8000a80:	4b43      	ldr	r3, [pc, #268]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	9200      	str	r2, [sp, #0]
 8000a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a88:	4844      	ldr	r0, [pc, #272]	@ (8000b9c <TimeManager.4+0x1fc>)
 8000a8a:	f001 fd9d 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000a8e:	e06f      	b.n	8000b70 <TimeManager.4+0x1d0>
                       whichMonths[whichPrd] = 2;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3316      	adds	r3, #22
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4423      	add	r3, r4
 8000a98:	2202      	movs	r2, #2
 8000a9a:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("subat", Font_7x10, White);
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	9200      	str	r2, [sp, #0]
 8000aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa4:	483e      	ldr	r0, [pc, #248]	@ (8000ba0 <TimeManager.4+0x200>)
 8000aa6:	f001 fd8f 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000aaa:	e061      	b.n	8000b70 <TimeManager.4+0x1d0>
                       whichMonths[whichPrd] = 3;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3316      	adds	r3, #22
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4423      	add	r3, r4
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("mart", Font_7x10, White);
 8000ab8:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ac0:	4838      	ldr	r0, [pc, #224]	@ (8000ba4 <TimeManager.4+0x204>)
 8000ac2:	f001 fd81 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000ac6:	e053      	b.n	8000b70 <TimeManager.4+0x1d0>
                       whichMonths[whichPrd] = 4;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3316      	adds	r3, #22
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4423      	add	r3, r4
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("nisan", Font_7x10, White);
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	9200      	str	r2, [sp, #0]
 8000ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000adc:	4832      	ldr	r0, [pc, #200]	@ (8000ba8 <TimeManager.4+0x208>)
 8000ade:	f001 fd73 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000ae2:	e045      	b.n	8000b70 <TimeManager.4+0x1d0>
                       whichMonths[whichPrd] = 5;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3316      	adds	r3, #22
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4423      	add	r3, r4
 8000aec:	2205      	movs	r2, #5
 8000aee:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("mayis", Font_7x10, White);
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	9200      	str	r2, [sp, #0]
 8000af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000af8:	482c      	ldr	r0, [pc, #176]	@ (8000bac <TimeManager.4+0x20c>)
 8000afa:	f001 fd65 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000afe:	e037      	b.n	8000b70 <TimeManager.4+0x1d0>
                       whichMonths[whichPrd] = 6;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3316      	adds	r3, #22
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4423      	add	r3, r4
 8000b08:	2206      	movs	r2, #6
 8000b0a:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("haziran", Font_7x10, White);
 8000b0c:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	9200      	str	r2, [sp, #0]
 8000b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b14:	4826      	ldr	r0, [pc, #152]	@ (8000bb0 <TimeManager.4+0x210>)
 8000b16:	f001 fd57 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000b1a:	e029      	b.n	8000b70 <TimeManager.4+0x1d0>
                       whichMonths[whichPrd] = 7;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3316      	adds	r3, #22
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4423      	add	r3, r4
 8000b24:	2207      	movs	r2, #7
 8000b26:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("temmuz", Font_7x10, White);
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	9200      	str	r2, [sp, #0]
 8000b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b30:	4820      	ldr	r0, [pc, #128]	@ (8000bb4 <TimeManager.4+0x214>)
 8000b32:	f001 fd49 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000b36:	e01b      	b.n	8000b70 <TimeManager.4+0x1d0>
                       whichMonths[whichPrd] = 8;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3316      	adds	r3, #22
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4423      	add	r3, r4
 8000b40:	2208      	movs	r2, #8
 8000b42:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("agustos", Font_7x10, White);
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4c:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <TimeManager.4+0x218>)
 8000b4e:	f001 fd3b 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000b52:	e00d      	b.n	8000b70 <TimeManager.4+0x1d0>
                       whichMonths[whichPrd] = 9;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3316      	adds	r3, #22
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4423      	add	r3, r4
 8000b5c:	2209      	movs	r2, #9
 8000b5e:	605a      	str	r2, [r3, #4]
                       ssd1306_WriteString("eylul", Font_7x10, White);
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <TimeManager.4+0x1f0>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	9200      	str	r2, [sp, #0]
 8000b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b68:	4814      	ldr	r0, [pc, #80]	@ (8000bbc <TimeManager.4+0x21c>)
 8000b6a:	f001 fd2d 	bl	80025c8 <ssd1306_WriteString>
                       break;
 8000b6e:	bf00      	nop
               ssd1306_UpdateScreen();
 8000b70:	f001 fc1e 	bl	80023b0 <ssd1306_UpdateScreen>
               HAL_Delay(200);
 8000b74:	20c8      	movs	r0, #200	@ 0xc8
 8000b76:	f001 fe09 	bl	800278c <HAL_Delay>
           while(cnttime > 1) {
 8000b7a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	f73f af28 	bgt.w	80009d2 <TimeManager.4+0x32>
       }
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	0800c940 	.word	0x0800c940
 8000b90:	0800d2a4 	.word	0x0800d2a4
 8000b94:	0800c960 	.word	0x0800c960
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	0800c96c 	.word	0x0800c96c
 8000ba0:	0800c974 	.word	0x0800c974
 8000ba4:	0800c97c 	.word	0x0800c97c
 8000ba8:	0800c984 	.word	0x0800c984
 8000bac:	0800c98c 	.word	0x0800c98c
 8000bb0:	0800c994 	.word	0x0800c994
 8000bb4:	0800c99c 	.word	0x0800c99c
 8000bb8:	0800c9a4 	.word	0x0800c9a4
 8000bbc:	0800c9ac 	.word	0x0800c9ac

08000bc0 <ProductManager.3>:
       void ProductManager(int whichproduct) {
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b091      	sub	sp, #68	@ 0x44
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	4664      	mov	r4, ip
 8000bca:	f8c7 c000 	str.w	ip, [r7]
           printf("Product Manager\n");
 8000bce:	487c      	ldr	r0, [pc, #496]	@ (8000dc0 <ProductManager.3+0x200>)
 8000bd0:	f00a fdb6 	bl	800b740 <puts>
           int uretilenproduct = productscounter[whichproduct];
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3314      	adds	r3, #20
 8000bd8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000bdc:	633b      	str	r3, [r7, #48]	@ 0x30
           int cntrmanage = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
           while (control_cikis) {
 8000be2:	e0e4      	b.n	8000dae <ProductManager.3+0x1ee>
               ssd1306_Fill(Black); // Ekranı temizle
 8000be4:	2000      	movs	r0, #0
 8000be6:	f001 fbcb 	bl	8002380 <ssd1306_Fill>
               ssd1306_SetCursor(0, 16); // Başlangıç konumu
 8000bea:	2110      	movs	r1, #16
 8000bec:	2000      	movs	r0, #0
 8000bee:	f001 fd11 	bl	8002614 <ssd1306_SetCursor>
               if(productscounter[whichproduct] < 0) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3314      	adds	r3, #20
 8000bf6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da04      	bge.n	8000c08 <ProductManager.3+0x48>
                   productscounter[whichproduct] = 0;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3314      	adds	r3, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
               if (cntrmanage == 0) {
 8000c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d128      	bne.n	8000c60 <ProductManager.3+0xa0>
                   sprintf(buffer, ">artir %d     ", productscounter[whichproduct]);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3314      	adds	r3, #20
 8000c12:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	496a      	ldr	r1, [pc, #424]	@ (8000dc4 <ProductManager.3+0x204>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00a fd97 	bl	800b750 <siprintf>
                   ssd1306_WriteString(buffer, Font_7x10, White);
 8000c22:	4b69      	ldr	r3, [pc, #420]	@ (8000dc8 <ProductManager.3+0x208>)
 8000c24:	f107 001c 	add.w	r0, r7, #28
 8000c28:	2201      	movs	r2, #1
 8000c2a:	9200      	str	r2, [sp, #0]
 8000c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c2e:	f001 fccb 	bl	80025c8 <ssd1306_WriteString>
                   ssd1306_SetCursor(0, 32);
 8000c32:	2120      	movs	r1, #32
 8000c34:	2000      	movs	r0, #0
 8000c36:	f001 fced 	bl	8002614 <ssd1306_SetCursor>
                   ssd1306_WriteString("azalt", Font_7x10, White);
 8000c3a:	4b63      	ldr	r3, [pc, #396]	@ (8000dc8 <ProductManager.3+0x208>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	9200      	str	r2, [sp, #0]
 8000c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c42:	4862      	ldr	r0, [pc, #392]	@ (8000dcc <ProductManager.3+0x20c>)
 8000c44:	f001 fcc0 	bl	80025c8 <ssd1306_WriteString>
                   ssd1306_SetCursor(0, 48);
 8000c48:	2130      	movs	r1, #48	@ 0x30
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f001 fce2 	bl	8002614 <ssd1306_SetCursor>
                   ssd1306_WriteString("cikis", Font_7x10, White);
 8000c50:	4b5d      	ldr	r3, [pc, #372]	@ (8000dc8 <ProductManager.3+0x208>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	9200      	str	r2, [sp, #0]
 8000c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c58:	485d      	ldr	r0, [pc, #372]	@ (8000dd0 <ProductManager.3+0x210>)
 8000c5a:	f001 fcb5 	bl	80025c8 <ssd1306_WriteString>
 8000c5e:	e04b      	b.n	8000cf8 <ProductManager.3+0x138>
               } else if (cntrmanage == 1) {
 8000c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d128      	bne.n	8000cb8 <ProductManager.3+0xf8>
                   ssd1306_WriteString("artir", Font_7x10, White);
 8000c66:	4b58      	ldr	r3, [pc, #352]	@ (8000dc8 <ProductManager.3+0x208>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	9200      	str	r2, [sp, #0]
 8000c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c6e:	4859      	ldr	r0, [pc, #356]	@ (8000dd4 <ProductManager.3+0x214>)
 8000c70:	f001 fcaa 	bl	80025c8 <ssd1306_WriteString>
                   ssd1306_SetCursor(0, 32);
 8000c74:	2120      	movs	r1, #32
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 fccc 	bl	8002614 <ssd1306_SetCursor>
                   sprintf(buffer, ">azalt %d     ", productscounter[whichproduct]);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3314      	adds	r3, #20
 8000c80:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	4953      	ldr	r1, [pc, #332]	@ (8000dd8 <ProductManager.3+0x218>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00a fd60 	bl	800b750 <siprintf>
                   ssd1306_WriteString(buffer, Font_7x10, White);
 8000c90:	4b4d      	ldr	r3, [pc, #308]	@ (8000dc8 <ProductManager.3+0x208>)
 8000c92:	f107 0008 	add.w	r0, r7, #8
 8000c96:	2201      	movs	r2, #1
 8000c98:	9200      	str	r2, [sp, #0]
 8000c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9c:	f001 fc94 	bl	80025c8 <ssd1306_WriteString>
                   ssd1306_SetCursor(0, 48);
 8000ca0:	2130      	movs	r1, #48	@ 0x30
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f001 fcb6 	bl	8002614 <ssd1306_SetCursor>
                   ssd1306_WriteString("cikis", Font_7x10, White);
 8000ca8:	4b47      	ldr	r3, [pc, #284]	@ (8000dc8 <ProductManager.3+0x208>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	9200      	str	r2, [sp, #0]
 8000cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb0:	4847      	ldr	r0, [pc, #284]	@ (8000dd0 <ProductManager.3+0x210>)
 8000cb2:	f001 fc89 	bl	80025c8 <ssd1306_WriteString>
 8000cb6:	e01f      	b.n	8000cf8 <ProductManager.3+0x138>
               } else if (cntrmanage == 2) {
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d11c      	bne.n	8000cf8 <ProductManager.3+0x138>
                   ssd1306_WriteString("artir", Font_7x10, White);
 8000cbe:	4b42      	ldr	r3, [pc, #264]	@ (8000dc8 <ProductManager.3+0x208>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	9200      	str	r2, [sp, #0]
 8000cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc6:	4843      	ldr	r0, [pc, #268]	@ (8000dd4 <ProductManager.3+0x214>)
 8000cc8:	f001 fc7e 	bl	80025c8 <ssd1306_WriteString>
                   ssd1306_SetCursor(0, 32);
 8000ccc:	2120      	movs	r1, #32
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 fca0 	bl	8002614 <ssd1306_SetCursor>
                   ssd1306_WriteString("azalt", Font_7x10, White);
 8000cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc8 <ProductManager.3+0x208>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	9200      	str	r2, [sp, #0]
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	483b      	ldr	r0, [pc, #236]	@ (8000dcc <ProductManager.3+0x20c>)
 8000cde:	f001 fc73 	bl	80025c8 <ssd1306_WriteString>
                   ssd1306_SetCursor(0, 48);
 8000ce2:	2130      	movs	r1, #48	@ 0x30
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f001 fc95 	bl	8002614 <ssd1306_SetCursor>
                   ssd1306_WriteString(">cikis", Font_7x10, White);
 8000cea:	4b37      	ldr	r3, [pc, #220]	@ (8000dc8 <ProductManager.3+0x208>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf2:	483a      	ldr	r0, [pc, #232]	@ (8000ddc <ProductManager.3+0x21c>)
 8000cf4:	f001 fc68 	bl	80025c8 <ssd1306_WriteString>
               ssd1306_UpdateScreen(); // Ekranı güncelle
 8000cf8:	f001 fb5a 	bl	80023b0 <ssd1306_UpdateScreen>
               if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_UP_PIN) == GPIO_PIN_SET) { // yukaributon basma durumu
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4838      	ldr	r0, [pc, #224]	@ (8000de0 <ProductManager.3+0x220>)
 8000d00:	f002 f816 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d105      	bne.n	8000d16 <ProductManager.3+0x156>
                   cntrmanage--;
 8000d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
                   HAL_Delay(200); // Debounce için kısa bir gecikme
 8000d10:	20c8      	movs	r0, #200	@ 0xc8
 8000d12:	f001 fd3b 	bl	800278c <HAL_Delay>
               if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_SET) { // asagibuton basma durumu
 8000d16:	2104      	movs	r1, #4
 8000d18:	4831      	ldr	r0, [pc, #196]	@ (8000de0 <ProductManager.3+0x220>)
 8000d1a:	f002 f809 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d105      	bne.n	8000d30 <ProductManager.3+0x170>
                   cntrmanage++;
 8000d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d26:	3301      	adds	r3, #1
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
                   HAL_Delay(200); // Debounce için kısa bir gecikme
 8000d2a:	20c8      	movs	r0, #200	@ 0xc8
 8000d2c:	f001 fd2e 	bl	800278c <HAL_Delay>
               if (cntrmanage < 0) cntrmanage = 0;
 8000d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da01      	bge.n	8000d3a <ProductManager.3+0x17a>
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
               if (cntrmanage > 2) cntrmanage = 2;
 8000d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	dd01      	ble.n	8000d44 <ProductManager.3+0x184>
 8000d40:	2302      	movs	r3, #2
 8000d42:	637b      	str	r3, [r7, #52]	@ 0x34
               if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN) == GPIO_PIN_SET) {
 8000d44:	2110      	movs	r1, #16
 8000d46:	4826      	ldr	r0, [pc, #152]	@ (8000de0 <ProductManager.3+0x220>)
 8000d48:	f001 fff2 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d12a      	bne.n	8000da8 <ProductManager.3+0x1e8>
                   if (cntrmanage == 0) {
 8000d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d109      	bne.n	8000d6c <ProductManager.3+0x1ac>
                       productscounter[whichproduct]++;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3314      	adds	r3, #20
 8000d5c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3314      	adds	r3, #20
 8000d66:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000d6a:	e011      	b.n	8000d90 <ProductManager.3+0x1d0>
                   } else if (cntrmanage == 1) {
 8000d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d109      	bne.n	8000d86 <ProductManager.3+0x1c6>
                       productscounter[whichproduct]--;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3314      	adds	r3, #20
 8000d76:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3314      	adds	r3, #20
 8000d80:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000d84:	e004      	b.n	8000d90 <ProductManager.3+0x1d0>
                   } else if (cntrmanage == 2) {
 8000d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d101      	bne.n	8000d90 <ProductManager.3+0x1d0>
                       control_cikis = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	64e3      	str	r3, [r4, #76]	@ 0x4c
                   printf("products counter: %d\n", productscounter[whichproduct]);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3314      	adds	r3, #20
 8000d94:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4812      	ldr	r0, [pc, #72]	@ (8000de4 <ProductManager.3+0x224>)
 8000d9c:	f00a fc68 	bl	800b670 <iprintf>
                   printf("hangi ürün: %d\n", whichproduct);
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4811      	ldr	r0, [pc, #68]	@ (8000de8 <ProductManager.3+0x228>)
 8000da4:	f00a fc64 	bl	800b670 <iprintf>
               HAL_Delay(10); // Döngü gecikmesi
 8000da8:	200a      	movs	r0, #10
 8000daa:	f001 fcef 	bl	800278c <HAL_Delay>
           while (control_cikis) {
 8000dae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f47f af17 	bne.w	8000be4 <ProductManager.3+0x24>
       }
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	373c      	adds	r7, #60	@ 0x3c
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	0800c9b4 	.word	0x0800c9b4
 8000dc4:	0800c9c4 	.word	0x0800c9c4
 8000dc8:	0800d2a4 	.word	0x0800d2a4
 8000dcc:	0800c9d4 	.word	0x0800c9d4
 8000dd0:	0800c9dc 	.word	0x0800c9dc
 8000dd4:	0800c9e4 	.word	0x0800c9e4
 8000dd8:	0800c9ec 	.word	0x0800c9ec
 8000ddc:	0800c9fc 	.word	0x0800c9fc
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	0800ca04 	.word	0x0800ca04
 8000de8:	0800ca1c 	.word	0x0800ca1c

08000dec <Predictionfunc.1>:
       void Predictionfunc() {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	f2ad 4d4c 	subw	sp, sp, #1100	@ 0x44c
 8000df2:	af02      	add	r7, sp, #8
 8000df4:	4664      	mov	r4, ip
 8000df6:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000dfa:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8000dfe:	f8c3 c000 	str.w	ip, [r3]
    	   ssd1306_Fill(Black);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f001 fabc 	bl	8002380 <ssd1306_Fill>
    	   ssd1306_SetCursor(0, 0);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f001 fc02 	bl	8002614 <ssd1306_SetCursor>
           int yukaributonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_UP_PIN);
 8000e10:	2101      	movs	r1, #1
 8000e12:	48c3      	ldr	r0, [pc, #780]	@ (8001120 <Predictionfunc.1+0x334>)
 8000e14:	f001 ff8c 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
           int asagibutonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_DOWN_PIN);
 8000e1e:	2104      	movs	r1, #4
 8000e20:	48bf      	ldr	r0, [pc, #764]	@ (8001120 <Predictionfunc.1+0x334>)
 8000e22:	f001 ff85 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
           int onaybutonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN);
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	48bc      	ldr	r0, [pc, #752]	@ (8001120 <Predictionfunc.1+0x334>)
 8000e30:	f001 ff7e 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
           char datagemini[100] = "bos";
 8000e3a:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000e3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e42:	4ab8      	ldr	r2, [pc, #736]	@ (8001124 <Predictionfunc.1+0x338>)
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	3304      	adds	r3, #4
 8000e48:	2260      	movs	r2, #96	@ 0x60
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f00a fd77 	bl	800b940 <memset>
           int count = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
           char ai_data[100] = "+";
 8000e58:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000e5c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8000e60:	222b      	movs	r2, #43	@ 0x2b
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2260      	movs	r2, #96	@ 0x60
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a fd68 	bl	800b940 <memset>
           for (int x = 0; x < 3; x++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8000e76:	e017      	b.n	8000ea8 <Predictionfunc.1+0xbc>
               sprintf(temp, "%d,", productscounter[x]);
 8000e78:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000e7c:	3314      	adds	r3, #20
 8000e7e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8000e82:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000e86:	49a8      	ldr	r1, [pc, #672]	@ (8001128 <Predictionfunc.1+0x33c>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00a fc61 	bl	800b750 <siprintf>
               strcat(ai_data, temp);
 8000e8e:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8000e92:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00a fd59 	bl	800b950 <strcat>
           for (int x = 0; x < 3; x++) {
 8000e9e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8000ea8:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	dde3      	ble.n	8000e78 <Predictionfunc.1+0x8c>
           strcat(ai_data, "*");
 8000eb0:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f995 	bl	80001e4 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4999      	ldr	r1, [pc, #612]	@ (800112c <Predictionfunc.1+0x340>)
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	460b      	mov	r3, r1
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	8013      	strh	r3, [r2, #0]
           for (int y = 0; y < 3; y++) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8000ed4:	e018      	b.n	8000f08 <Predictionfunc.1+0x11c>
               sprintf(temp, "%d,", whichMonths[y]);
 8000ed6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000eda:	3316      	adds	r3, #22
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4423      	add	r3, r4
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000ee6:	4990      	ldr	r1, [pc, #576]	@ (8001128 <Predictionfunc.1+0x33c>)
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f00a fc31 	bl	800b750 <siprintf>
               strcat(ai_data, temp);
 8000eee:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8000ef2:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00a fd29 	bl	800b950 <strcat>
           for (int y = 0; y < 3; y++) {
 8000efe:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000f02:	3301      	adds	r3, #1
 8000f04:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8000f08:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	dde2      	ble.n	8000ed6 <Predictionfunc.1+0xea>
           strcat(ai_data, "+");
 8000f10:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f965 	bl	80001e4 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8000f22:	4413      	add	r3, r2
 8000f24:	4982      	ldr	r1, [pc, #520]	@ (8001130 <Predictionfunc.1+0x344>)
 8000f26:	461a      	mov	r2, r3
 8000f28:	460b      	mov	r3, r1
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	8013      	strh	r3, [r2, #0]
              uartStatus = HAL_UART_Transmit(&huart2, (uint8_t*)ai_data, strlen(ai_data), HAL_MAX_DELAY);  // ESP32'ye veri gönder
 8000f2e:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f956 	bl	80001e4 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f507 711b 	add.w	r1, r7, #620	@ 0x26c
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	487b      	ldr	r0, [pc, #492]	@ (8001134 <Predictionfunc.1+0x348>)
 8000f46:	f006 f840 	bl	8006fca <HAL_UART_Transmit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 341b 	strb.w	r3, [r7, #1051]	@ 0x41b
              if (uartStatus == HAL_OK) {
 8000f50:	f897 341b 	ldrb.w	r3, [r7, #1051]	@ 0x41b
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <Predictionfunc.1+0x17a>
            	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);  // LED YAK
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f5e:	4870      	ldr	r0, [pc, #448]	@ (8001120 <Predictionfunc.1+0x334>)
 8000f60:	f001 fefe 	bl	8002d60 <HAL_GPIO_WritePin>
 8000f64:	e005      	b.n	8000f72 <Predictionfunc.1+0x186>
                  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);    // Veri gönderimi başarısız, LED'i SONDUR
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f6c:	486c      	ldr	r0, [pc, #432]	@ (8001120 <Predictionfunc.1+0x334>)
 8000f6e:	f001 fef7 	bl	8002d60 <HAL_GPIO_WritePin>
        	   ssd1306_SetCursor(0, 10); // İkinci satıra set et (0,10)
 8000f72:	210a      	movs	r1, #10
 8000f74:	2000      	movs	r0, #0
 8000f76:	f001 fb4d 	bl	8002614 <ssd1306_SetCursor>
        	   ssd1306_WriteString("sonuclar isleniyor....", Font_7x10, White);
 8000f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001138 <Predictionfunc.1+0x34c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f82:	486e      	ldr	r0, [pc, #440]	@ (800113c <Predictionfunc.1+0x350>)
 8000f84:	f001 fb20 	bl	80025c8 <ssd1306_WriteString>
        	   HAL_UART_Receive(&huart2, rx_buffer, sizeof(rx_buffer), 80000); // 1000ms timeout
 8000f88:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001140 <Predictionfunc.1+0x354>)
 8000f8e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f92:	4868      	ldr	r0, [pc, #416]	@ (8001134 <Predictionfunc.1+0x348>)
 8000f94:	f006 f8a4 	bl	80070e0 <HAL_UART_Receive>
        	   strncpy(received_string, (char*)rx_buffer, sizeof(rx_buffer));
 8000f98:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00a fce2 	bl	800b96e <strncpy>
        	   if (strstr(received_string, "finish") != NULL) {
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4965      	ldr	r1, [pc, #404]	@ (8001144 <Predictionfunc.1+0x358>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00a fd4b 	bl	800ba4c <strstr>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d014      	beq.n	8000fe6 <Predictionfunc.1+0x1fa>
        		   ssd1306_Fill(Black); // Ekranı temizle
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f001 f9df 	bl	8002380 <ssd1306_Fill>
        		   strcpy(datagemini, received_string);
 8000fc2:	f107 0208 	add.w	r2, r7, #8
 8000fc6:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00a fdd6 	bl	800bb7e <strcpy>
              if (strstr(datagemini, "bos") == NULL) {
 8000fd2:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8000fd6:	495c      	ldr	r1, [pc, #368]	@ (8001148 <Predictionfunc.1+0x35c>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00a fd37 	bl	800ba4c <strstr>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00a      	beq.n	8000ffa <Predictionfunc.1+0x20e>
 8000fe4:	e0fb      	b.n	80011de <Predictionfunc.1+0x3f2>
              ssd1306_UpdateScreen();
 8000fe6:	f001 f9e3 	bl	80023b0 <ssd1306_UpdateScreen>
              HAL_Delay(13000);
 8000fea:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 8000fee:	f001 fbcd 	bl	800278c <HAL_Delay>
               HAL_Delay(100);  // 1 sn bekle
 8000ff2:	2064      	movs	r0, #100	@ 0x64
 8000ff4:	f001 fbca 	bl	800278c <HAL_Delay>
           while (1) {
 8000ff8:	e7bb      	b.n	8000f72 <Predictionfunc.1+0x186>
            	  ssd1306_Fill(Black); // Ekranı temizle
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 f9c0 	bl	8002380 <ssd1306_Fill>
            	  ssd1306_SetCursor(0, 0);
 8001000:	2100      	movs	r1, #0
 8001002:	2000      	movs	r0, #0
 8001004:	f001 fb06 	bl	8002614 <ssd1306_SetCursor>
                  char *token = strtok(datagemini, ",");
 8001008:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 800100c:	494f      	ldr	r1, [pc, #316]	@ (800114c <Predictionfunc.1+0x360>)
 800100e:	4618      	mov	r0, r3
 8001010:	f00a fcc0 	bl	800b994 <strtok>
 8001014:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430
                  while (token != NULL && count < 3) {
 8001018:	e018      	b.n	800104c <Predictionfunc.1+0x260>
                      strcpy(elements[count], token);
 800101a:	f507 7134 	add.w	r1, r7, #720	@ 0x2d0
 800101e:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8001022:	4613      	mov	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	440b      	add	r3, r1
 800102c:	f8d7 1430 	ldr.w	r1, [r7, #1072]	@ 0x430
 8001030:	4618      	mov	r0, r3
 8001032:	f00a fda4 	bl	800bb7e <strcpy>
                      token = strtok(NULL, ",");
 8001036:	4945      	ldr	r1, [pc, #276]	@ (800114c <Predictionfunc.1+0x360>)
 8001038:	2000      	movs	r0, #0
 800103a:	f00a fcab 	bl	800b994 <strtok>
 800103e:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430
                      count++;
 8001042:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001046:	3301      	adds	r3, #1
 8001048:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
                  while (token != NULL && count < 3) {
 800104c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <Predictionfunc.1+0x270>
 8001054:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddde      	ble.n	800101a <Predictionfunc.1+0x22e>
                  int intCount = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
                  for (int i = 0; i < count; i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 8001068:	e0b0      	b.n	80011cc <Predictionfunc.1+0x3e0>
                      if (strcmp(elements[i], "finish") != 0) {
 800106a:	f507 7134 	add.w	r1, r7, #720	@ 0x2d0
 800106e:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001072:	4613      	mov	r3, r2
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	440b      	add	r3, r1
 800107c:	4931      	ldr	r1, [pc, #196]	@ (8001144 <Predictionfunc.1+0x358>)
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f8a6 	bl	80001d0 <strcmp>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 809b 	beq.w	80011c2 <Predictionfunc.1+0x3d6>
                          if (strcmp(elements[i], "yok") != 0) {
 800108c:	f507 7134 	add.w	r1, r7, #720	@ 0x2d0
 8001090:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001094:	4613      	mov	r3, r2
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	440b      	add	r3, r1
 800109e:	492c      	ldr	r1, [pc, #176]	@ (8001150 <Predictionfunc.1+0x364>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f895 	bl	80001d0 <strcmp>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d057      	beq.n	800115c <Predictionfunc.1+0x370>
                              int value = atoi(elements[i]);
 80010ac:	f507 7134 	add.w	r1, r7, #720	@ 0x2d0
 80010b0:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80010b4:	4613      	mov	r3, r2
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	440b      	add	r3, r1
 80010be:	4618      	mov	r0, r3
 80010c0:	f00a f8ce 	bl	800b260 <atoi>
 80010c4:	f8c7 0414 	str.w	r0, [r7, #1044]	@ 0x414
                              if (value >= 0) { // eksik üretilmiş
 80010c8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db10      	blt.n	80010f2 <Predictionfunc.1+0x306>
                                  sprintf(ekranArray[i], "%d.id %d eksik", i, value);
 80010d0:	f507 7167 	add.w	r1, r7, #924	@ 0x39c
 80010d4:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80010d8:	4613      	mov	r3, r2
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	1a9b      	subs	r3, r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	18c8      	adds	r0, r1, r3
 80010e2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80010e6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80010ea:	491a      	ldr	r1, [pc, #104]	@ (8001154 <Predictionfunc.1+0x368>)
 80010ec:	f00a fb30 	bl	800b750 <siprintf>
 80010f0:	e043      	b.n	800117a <Predictionfunc.1+0x38e>
                                  value = -value;
 80010f2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80010f6:	425b      	negs	r3, r3
 80010f8:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
                                  sprintf(ekranArray[i], "%d.id %d fazla", i, value);
 80010fc:	f507 7167 	add.w	r1, r7, #924	@ 0x39c
 8001100:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001104:	4613      	mov	r3, r2
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	18c8      	adds	r0, r1, r3
 800110e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001112:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001116:	4910      	ldr	r1, [pc, #64]	@ (8001158 <Predictionfunc.1+0x36c>)
 8001118:	f00a fb1a 	bl	800b750 <siprintf>
 800111c:	e02d      	b.n	800117a <Predictionfunc.1+0x38e>
 800111e:	bf00      	nop
 8001120:	40020c00 	.word	0x40020c00
 8001124:	00736f62 	.word	0x00736f62
 8001128:	0800ca30 	.word	0x0800ca30
 800112c:	0800ca34 	.word	0x0800ca34
 8001130:	0800ca38 	.word	0x0800ca38
 8001134:	20000198 	.word	0x20000198
 8001138:	0800d2a4 	.word	0x0800d2a4
 800113c:	0800ca3c 	.word	0x0800ca3c
 8001140:	00013880 	.word	0x00013880
 8001144:	0800ca54 	.word	0x0800ca54
 8001148:	0800ca5c 	.word	0x0800ca5c
 800114c:	0800ca60 	.word	0x0800ca60
 8001150:	0800ca64 	.word	0x0800ca64
 8001154:	0800ca68 	.word	0x0800ca68
 8001158:	0800ca78 	.word	0x0800ca78
                        	   sprintf(ekranArray[i], "%d.id uretim yok", i);
 800115c:	f507 7167 	add.w	r1, r7, #924	@ 0x39c
 8001160:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001164:	4613      	mov	r3, r2
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	440b      	add	r3, r1
 800116e:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001172:	4920      	ldr	r1, [pc, #128]	@ (80011f4 <Predictionfunc.1+0x408>)
 8001174:	4618      	mov	r0, r3
 8001176:	f00a faeb 	bl	800b750 <siprintf>
                          ssd1306_SetCursor(0, 10 + i * 10); // Satırları ayarlamak için y pozisyonunu artırın
 800117a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 800117e:	3301      	adds	r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4413      	add	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	2000      	movs	r0, #0
 8001190:	f001 fa40 	bl	8002614 <ssd1306_SetCursor>
                          ssd1306_WriteString(ekranArray[i], Font_7x10, White);
 8001194:	f507 7167 	add.w	r1, r7, #924	@ 0x39c
 8001198:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 800119c:	4613      	mov	r3, r2
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	18c8      	adds	r0, r1, r3
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <Predictionfunc.1+0x40c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ae:	f001 fa0b 	bl	80025c8 <ssd1306_WriteString>
                          HAL_Delay(200);
 80011b2:	20c8      	movs	r0, #200	@ 0xc8
 80011b4:	f001 faea 	bl	800278c <HAL_Delay>
                          intCount++;
 80011b8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80011bc:	3301      	adds	r3, #1
 80011be:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
                  for (int i = 0; i < count; i++) {
 80011c2:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80011c6:	3301      	adds	r3, #1
 80011c8:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 80011cc:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80011d0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f6ff af48 	blt.w	800106a <Predictionfunc.1+0x27e>
                  ssd1306_UpdateScreen();
 80011da:	f001 f8e9 	bl	80023b0 <ssd1306_UpdateScreen>
           ssd1306_UpdateScreen();
 80011de:	f001 f8e7 	bl	80023b0 <ssd1306_UpdateScreen>
           HAL_Delay(2000);
 80011e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011e6:	f001 fad1 	bl	800278c <HAL_Delay>
       }
 80011ea:	bf00      	nop
 80011ec:	f207 4744 	addw	r7, r7, #1092	@ 0x444
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	0800ca88 	.word	0x0800ca88
 80011f8:	0800d2a4 	.word	0x0800d2a4

080011fc <SelectStage.2>:
        void SelectStage(){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b091      	sub	sp, #68	@ 0x44
 8001200:	af02      	add	r7, sp, #8
 8001202:	4664      	mov	r4, ip
 8001204:	f8c7 c004 	str.w	ip, [r7, #4]
        	  while (mantik) {
 8001208:	e320      	b.n	800184c <SelectStage.2+0x650>
        	        art++;
 800120a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800120c:	3301      	adds	r3, #1
 800120e:	64a3      	str	r3, [r4, #72]	@ 0x48
        	        yukaributonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_UP_PIN);
 8001210:	2101      	movs	r1, #1
 8001212:	489e      	ldr	r0, [pc, #632]	@ (800148c <SelectStage.2+0x290>)
 8001214:	f001 fd8c 	bl	8002d30 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	6463      	str	r3, [r4, #68]	@ 0x44
        	        asagibutonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_DOWN_PIN);
 800121c:	2104      	movs	r1, #4
 800121e:	489b      	ldr	r0, [pc, #620]	@ (800148c <SelectStage.2+0x290>)
 8001220:	f001 fd86 	bl	8002d30 <HAL_GPIO_ReadPin>
 8001224:	4603      	mov	r3, r0
 8001226:	6423      	str	r3, [r4, #64]	@ 0x40
        	        onaybutonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN);
 8001228:	2110      	movs	r1, #16
 800122a:	4898      	ldr	r0, [pc, #608]	@ (800148c <SelectStage.2+0x290>)
 800122c:	f001 fd80 	bl	8002d30 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	63e3      	str	r3, [r4, #60]	@ 0x3c
        	        if (art == 1) {
 8001234:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001236:	2b01      	cmp	r3, #1
 8001238:	d105      	bne.n	8001246 <SelectStage.2+0x4a>
        	            onaybutonbas = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	63e3      	str	r3, [r4, #60]	@ 0x3c
        	            HAL_Delay(500);
 800123e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001242:	f001 faa3 	bl	800278c <HAL_Delay>
        	        ssd1306_Fill(Black); // Ekranı temizle
 8001246:	2000      	movs	r0, #0
 8001248:	f001 f89a 	bl	8002380 <ssd1306_Fill>
        	        ssd1306_SetCursor(0, 0);
 800124c:	2100      	movs	r1, #0
 800124e:	2000      	movs	r0, #0
 8001250:	f001 f9e0 	bl	8002614 <ssd1306_SetCursor>
        	        if (yukaributonbas == 1) {
 8001254:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001256:	2b01      	cmp	r3, #1
 8001258:	d107      	bne.n	800126a <SelectStage.2+0x6e>
        	            menu2++;
 800125a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800125c:	3301      	adds	r3, #1
 800125e:	63a3      	str	r3, [r4, #56]	@ 0x38
        	            if (menu2 >= 1) { menu2 = 1; }
 8001260:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001262:	2b00      	cmp	r3, #0
 8001264:	dd01      	ble.n	800126a <SelectStage.2+0x6e>
 8001266:	2301      	movs	r3, #1
 8001268:	63a3      	str	r3, [r4, #56]	@ 0x38
        	        if (asagibutonbas == 1) {
 800126a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800126c:	2b01      	cmp	r3, #1
 800126e:	d107      	bne.n	8001280 <SelectStage.2+0x84>
        	            menu2--;
 8001270:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001272:	3b01      	subs	r3, #1
 8001274:	63a3      	str	r3, [r4, #56]	@ 0x38
        	            if (menu2   <=0) { menu2 = 0; }
 8001276:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001278:	2b00      	cmp	r3, #0
 800127a:	dc01      	bgt.n	8001280 <SelectStage.2+0x84>
 800127c:	2300      	movs	r3, #0
 800127e:	63a3      	str	r3, [r4, #56]	@ 0x38
        	        if (menu2 == 0) {
 8001280:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001282:	2b00      	cmp	r3, #0
 8001284:	d115      	bne.n	80012b2 <SelectStage.2+0xb6>
        	            ssd1306_WriteString("urun\n", Font_7x10, White);
 8001286:	4b82      	ldr	r3, [pc, #520]	@ (8001490 <SelectStage.2+0x294>)
 8001288:	2201      	movs	r2, #1
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800128e:	4881      	ldr	r0, [pc, #516]	@ (8001494 <SelectStage.2+0x298>)
 8001290:	f001 f99a 	bl	80025c8 <ssd1306_WriteString>
        	            ssd1306_SetCursor(0,15);
 8001294:	210f      	movs	r1, #15
 8001296:	2000      	movs	r0, #0
 8001298:	f001 f9bc 	bl	8002614 <ssd1306_SetCursor>
        	            ssd1306_WriteString(">geri\n", Font_7x10, White);
 800129c:	4b7c      	ldr	r3, [pc, #496]	@ (8001490 <SelectStage.2+0x294>)
 800129e:	2201      	movs	r2, #1
 80012a0:	9200      	str	r2, [sp, #0]
 80012a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a4:	487c      	ldr	r0, [pc, #496]	@ (8001498 <SelectStage.2+0x29c>)
 80012a6:	f001 f98f 	bl	80025c8 <ssd1306_WriteString>
        	            HAL_Delay(10);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f001 fa6e 	bl	800278c <HAL_Delay>
 80012b0:	e017      	b.n	80012e2 <SelectStage.2+0xe6>
        	        } else if (menu2 == 1) {
 80012b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d114      	bne.n	80012e2 <SelectStage.2+0xe6>
        	            ssd1306_WriteString(">urun\n", Font_7x10, White);
 80012b8:	4b75      	ldr	r3, [pc, #468]	@ (8001490 <SelectStage.2+0x294>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	9200      	str	r2, [sp, #0]
 80012be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c0:	4876      	ldr	r0, [pc, #472]	@ (800149c <SelectStage.2+0x2a0>)
 80012c2:	f001 f981 	bl	80025c8 <ssd1306_WriteString>
        	           ssd1306_SetCursor(0,15);
 80012c6:	210f      	movs	r1, #15
 80012c8:	2000      	movs	r0, #0
 80012ca:	f001 f9a3 	bl	8002614 <ssd1306_SetCursor>
        	            ssd1306_WriteString("geri\n", Font_7x10, White);
 80012ce:	4b70      	ldr	r3, [pc, #448]	@ (8001490 <SelectStage.2+0x294>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d6:	4872      	ldr	r0, [pc, #456]	@ (80014a0 <SelectStage.2+0x2a4>)
 80012d8:	f001 f976 	bl	80025c8 <ssd1306_WriteString>
        	            HAL_Delay(10);
 80012dc:	200a      	movs	r0, #10
 80012de:	f001 fa55 	bl	800278c <HAL_Delay>
        	        ssd1306_SetCursor(0, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2000      	movs	r0, #0
 80012e6:	f001 f995 	bl	8002614 <ssd1306_SetCursor>
        	        if (onaybutonbas == 1) {
 80012ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f040 814e 	bne.w	800158e <SelectStage.2+0x392>
        	            if (menu2 == 1) {
 80012f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	f040 8141 	bne.w	800157c <SelectStage.2+0x380>
        	                int numProducts = sizeof(products) / sizeof(products[0]);
 80012fa:	2304      	movs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
        	                screen_switch = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	6363      	str	r3, [r4, #52]	@ 0x34
        	                int currentPos = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
        	                int lineHeight = 16; // Her ürün arasındaki dikey boşluk
 8001306:	2310      	movs	r3, #16
 8001308:	617b      	str	r3, [r7, #20]
        	                while (state) {
 800130a:	e133      	b.n	8001574 <SelectStage.2+0x378>
        	                    ssd1306_Fill(Black); // Ekranı temizle
 800130c:	2000      	movs	r0, #0
 800130e:	f001 f837 	bl	8002380 <ssd1306_Fill>
        	                    ssd1306_SetCursor(0, 0);
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f001 f97d 	bl	8002614 <ssd1306_SetCursor>
        	                    if (control >= 2) {
 800131a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800131c:	2b01      	cmp	r3, #1
 800131e:	dd04      	ble.n	800132a <SelectStage.2+0x12e>
        	                        control--;
 8001320:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001322:	3b01      	subs	r3, #1
 8001324:	6323      	str	r3, [r4, #48]	@ 0x30
        	                        rtnMainPage = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	66a3      	str	r3, [r4, #104]	@ 0x68
        	                    if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_UP_PIN) == 1) {
 800132a:	2101      	movs	r1, #1
 800132c:	4857      	ldr	r0, [pc, #348]	@ (800148c <SelectStage.2+0x290>)
 800132e:	f001 fcff 	bl	8002d30 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	2b01      	cmp	r3, #1
 8001336:	d10d      	bne.n	8001354 <SelectStage.2+0x158>
        	                        upbuton++;
 8001338:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800133a:	3301      	adds	r3, #1
 800133c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        	                        currentPos -= 16;
 800133e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001340:	3b10      	subs	r3, #16
 8001342:	637b      	str	r3, [r7, #52]	@ 0x34
        	                        if (currentPos < 0) {
 8001344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001346:	2b00      	cmp	r3, #0
 8001348:	da01      	bge.n	800134e <SelectStage.2+0x152>
        	                            currentPos = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
        	                        HAL_Delay(20);
 800134e:	2014      	movs	r0, #20
 8001350:	f001 fa1c 	bl	800278c <HAL_Delay>
        	                    if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_DOWN_PIN) == 1) {
 8001354:	2104      	movs	r1, #4
 8001356:	484d      	ldr	r0, [pc, #308]	@ (800148c <SelectStage.2+0x290>)
 8001358:	f001 fcea 	bl	8002d30 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d114      	bne.n	800138c <SelectStage.2+0x190>
        	                        bottombuton++;
 8001362:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001364:	3301      	adds	r3, #1
 8001366:	62a3      	str	r3, [r4, #40]	@ 0x28
        	                        currentPos += 16;
 8001368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800136a:	3310      	adds	r3, #16
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
        	                        int maxPos = (numProducts - 1) * lineHeight;
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	613b      	str	r3, [r7, #16]
        	                        if (currentPos > maxPos) {
 800137a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	429a      	cmp	r2, r3
 8001380:	dd01      	ble.n	8001386 <SelectStage.2+0x18a>
        	                            currentPos = maxPos;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
        	                        HAL_Delay(20);
 8001386:	2014      	movs	r0, #20
 8001388:	f001 fa00 	bl	800278c <HAL_Delay>
        	                    ssd1306_WriteString("                 <-", Font_7x10, White);
 800138c:	4b40      	ldr	r3, [pc, #256]	@ (8001490 <SelectStage.2+0x294>)
 800138e:	2201      	movs	r2, #1
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001394:	4843      	ldr	r0, [pc, #268]	@ (80014a4 <SelectStage.2+0x2a8>)
 8001396:	f001 f917 	bl	80025c8 <ssd1306_WriteString>
        	                    for (int i = 0; i < numProducts; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
 800139e:	e01f      	b.n	80013e0 <SelectStage.2+0x1e4>
                                      int yPos = i * lineHeight - currentPos;
 80013a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	fb03 f202 	mul.w	r2, r3, r2
 80013a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	60fb      	str	r3, [r7, #12]
        	                        if (yPos >= 0 && yPos < 64) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db12      	blt.n	80013da <SelectStage.2+0x1de>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80013b8:	dc0f      	bgt.n	80013da <SelectStage.2+0x1de>
        	                            ssd1306_SetCursor(0, yPos);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4619      	mov	r1, r3
 80013c0:	2000      	movs	r0, #0
 80013c2:	f001 f927 	bl	8002614 <ssd1306_SetCursor>
        	                            ssd1306_WriteString(products[i], Font_7x10, White);
 80013c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c8:	3306      	adds	r3, #6
 80013ca:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80013ce:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <SelectStage.2+0x294>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d6:	f001 f8f7 	bl	80025c8 <ssd1306_WriteString>
        	                    for (int i = 0; i < numProducts; i++) {
 80013da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013dc:	3301      	adds	r3, #1
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
 80013e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbdb      	blt.n	80013a0 <SelectStage.2+0x1a4>
        	                    if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN)== 1) {
 80013e8:	2110      	movs	r1, #16
 80013ea:	4828      	ldr	r0, [pc, #160]	@ (800148c <SelectStage.2+0x290>)
 80013ec:	f001 fca0 	bl	8002d30 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	f040 80b9 	bne.w	800156a <SelectStage.2+0x36e>
        	                        pagecroos++;
 80013f8:	6963      	ldr	r3, [r4, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	6163      	str	r3, [r4, #20]
        	                        if (pagecroos > 1 && (bottombuton >= 1 || upbuton >= 1)) {
 80013fe:	6963      	ldr	r3, [r4, #20]
 8001400:	2b01      	cmp	r3, #1
 8001402:	f340 80b2 	ble.w	800156a <SelectStage.2+0x36e>
 8001406:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	dc03      	bgt.n	8001414 <SelectStage.2+0x218>
 800140c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800140e:	2b00      	cmp	r3, #0
 8001410:	f340 80ab 	ble.w	800156a <SelectStage.2+0x36e>
        	                                  if (currentPos > 43) {
 8001414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001416:	2b2b      	cmp	r3, #43	@ 0x2b
 8001418:	dd07      	ble.n	800142a <SelectStage.2+0x22e>
        	                                state = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	6123      	str	r3, [r4, #16]
        	                                ssd1306_Fill(Black);
 800141e:	2000      	movs	r0, #0
 8001420:	f000 ffae 	bl	8002380 <ssd1306_Fill>
        	                                ssd1306_UpdateScreen();
 8001424:	f000 ffc4 	bl	80023b0 <ssd1306_UpdateScreen>
        	                                break;
 8001428:	e0a8      	b.n	800157c <SelectStage.2+0x380>
        	                            pagecroos = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	6163      	str	r3, [r4, #20]
        	                            bottombuton = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62a3      	str	r3, [r4, #40]	@ 0x28
        	                            upbuton = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	62e3      	str	r3, [r4, #44]	@ 0x2c
        	                            choseProduct = (currentPos) / 19;
 8001436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <SelectStage.2+0x2ac>)
 800143a:	fb82 1203 	smull	r1, r2, r2, r3
 800143e:	10d2      	asrs	r2, r2, #3
 8001440:	17db      	asrs	r3, r3, #31
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	60e3      	str	r3, [r4, #12]
        	                            int productpage = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	                            while (1 && (rtnMainPage==1)) {
 800144a:	e08a      	b.n	8001562 <SelectStage.2+0x366>
        	                                ssd1306_Fill(Black);
 800144c:	2000      	movs	r0, #0
 800144e:	f000 ff97 	bl	8002380 <ssd1306_Fill>
        	                                ssd1306_SetCursor(0, 0);
 8001452:	2100      	movs	r1, #0
 8001454:	2000      	movs	r0, #0
 8001456:	f001 f8dd 	bl	8002614 <ssd1306_SetCursor>
                                               if (productpage <= 0) {
 800145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	dc29      	bgt.n	80014b4 <SelectStage.2+0x2b8>
        	                                    ssd1306_WriteString("uretim\n", Font_7x10, White);
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <SelectStage.2+0x294>)
 8001462:	2201      	movs	r2, #1
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001468:	4810      	ldr	r0, [pc, #64]	@ (80014ac <SelectStage.2+0x2b0>)
 800146a:	f001 f8ad 	bl	80025c8 <ssd1306_WriteString>
        	                                    ssd1306_SetCursor(0,15);
 800146e:	210f      	movs	r1, #15
 8001470:	2000      	movs	r0, #0
 8001472:	f001 f8cf 	bl	8002614 <ssd1306_SetCursor>
        	                                    ssd1306_WriteString(">zaman secim\n", Font_7x10, White);
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <SelectStage.2+0x294>)
 8001478:	2201      	movs	r2, #1
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147e:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <SelectStage.2+0x2b4>)
 8001480:	f001 f8a2 	bl	80025c8 <ssd1306_WriteString>
        	                                    HAL_Delay(10);
 8001484:	200a      	movs	r0, #10
 8001486:	f001 f981 	bl	800278c <HAL_Delay>
 800148a:	e02b      	b.n	80014e4 <SelectStage.2+0x2e8>
 800148c:	40020c00 	.word	0x40020c00
 8001490:	0800d2a4 	.word	0x0800d2a4
 8001494:	0800ca9c 	.word	0x0800ca9c
 8001498:	0800caa4 	.word	0x0800caa4
 800149c:	0800caac 	.word	0x0800caac
 80014a0:	0800cab4 	.word	0x0800cab4
 80014a4:	0800cabc 	.word	0x0800cabc
 80014a8:	6bca1af3 	.word	0x6bca1af3
 80014ac:	0800cad0 	.word	0x0800cad0
 80014b0:	0800cad8 	.word	0x0800cad8
        	                                } else if (productpage == 1) {
 80014b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d114      	bne.n	80014e4 <SelectStage.2+0x2e8>
        	                                    ssd1306_WriteString(">uretim\n", Font_7x10, White);
 80014ba:	4ba2      	ldr	r3, [pc, #648]	@ (8001744 <SelectStage.2+0x548>)
 80014bc:	2201      	movs	r2, #1
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	48a1      	ldr	r0, [pc, #644]	@ (8001748 <SelectStage.2+0x54c>)
 80014c4:	f001 f880 	bl	80025c8 <ssd1306_WriteString>
        	                                   ssd1306_SetCursor(0,15);
 80014c8:	210f      	movs	r1, #15
 80014ca:	2000      	movs	r0, #0
 80014cc:	f001 f8a2 	bl	8002614 <ssd1306_SetCursor>
        	                                    ssd1306_WriteString("zaman secim\n", Font_7x10, White);
 80014d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001744 <SelectStage.2+0x548>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d8:	489c      	ldr	r0, [pc, #624]	@ (800174c <SelectStage.2+0x550>)
 80014da:	f001 f875 	bl	80025c8 <ssd1306_WriteString>
        	                                    HAL_Delay(10);
 80014de:	200a      	movs	r0, #10
 80014e0:	f001 f954 	bl	800278c <HAL_Delay>
        	                                if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_UP_PIN) == 1) {
 80014e4:	2101      	movs	r1, #1
 80014e6:	489a      	ldr	r0, [pc, #616]	@ (8001750 <SelectStage.2+0x554>)
 80014e8:	f001 fc22 	bl	8002d30 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <SelectStage.2+0x306>
        	                                    productpage++;
 80014f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f4:	3301      	adds	r3, #1
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	                                    if (productpage >= 1) { productpage = 1; }
 80014f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	dd01      	ble.n	8001502 <SelectStage.2+0x306>
 80014fe:	2301      	movs	r3, #1
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	                                if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_DOWN_PIN) == 1) {
 8001502:	2104      	movs	r1, #4
 8001504:	4892      	ldr	r0, [pc, #584]	@ (8001750 <SelectStage.2+0x554>)
 8001506:	f001 fc13 	bl	8002d30 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <SelectStage.2+0x324>
        	                                    productpage--;
 8001510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001512:	3b01      	subs	r3, #1
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	                                    if (productpage <= 0) { productpage = 0; }
 8001516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	dc01      	bgt.n	8001520 <SelectStage.2+0x324>
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	                                if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN) == 1) {
 8001520:	2110      	movs	r1, #16
 8001522:	488b      	ldr	r0, [pc, #556]	@ (8001750 <SelectStage.2+0x554>)
 8001524:	f001 fc04 	bl	8002d30 <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d114      	bne.n	8001558 <SelectStage.2+0x35c>
        	                                    if (productpage == 1) {
 800152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001530:	2b01      	cmp	r3, #1
 8001532:	d106      	bne.n	8001542 <SelectStage.2+0x346>
        	                                        control_cikis = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	64e3      	str	r3, [r4, #76]	@ 0x4c
        	                                        ProductManager(choseProduct);
 8001538:	68e3      	ldr	r3, [r4, #12]
 800153a:	46a4      	mov	ip, r4
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fb3f 	bl	8000bc0 <ProductManager.3>
        	                                    if (productpage == 0) {
 8001542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <SelectStage.2+0x35c>
        	                                        control++;
 8001548:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800154a:	3301      	adds	r3, #1
 800154c:	6323      	str	r3, [r4, #48]	@ 0x30
        	                                        TimeManager(choseProduct);
 800154e:	68e3      	ldr	r3, [r4, #12]
 8001550:	46a4      	mov	ip, r4
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fa24 	bl	80009a0 <TimeManager.4>
        	                                HAL_Delay(100);
 8001558:	2064      	movs	r0, #100	@ 0x64
 800155a:	f001 f917 	bl	800278c <HAL_Delay>
        	                                ssd1306_UpdateScreen();
 800155e:	f000 ff27 	bl	80023b0 <ssd1306_UpdateScreen>
        	                            while (1 && (rtnMainPage==1)) {
 8001562:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8001564:	2b01      	cmp	r3, #1
 8001566:	f43f af71 	beq.w	800144c <SelectStage.2+0x250>
        	                    ssd1306_UpdateScreen();
 800156a:	f000 ff21 	bl	80023b0 <ssd1306_UpdateScreen>
        	                    HAL_Delay(100);
 800156e:	2064      	movs	r0, #100	@ 0x64
 8001570:	f001 f90c 	bl	800278c <HAL_Delay>
        	                while (state) {
 8001574:	6923      	ldr	r3, [r4, #16]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f47f aec8 	bne.w	800130c <SelectStage.2+0x110>
        	            if (menu2 == 0) {
 800157c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800157e:	2b00      	cmp	r3, #0
 8001580:	d105      	bne.n	800158e <SelectStage.2+0x392>
        	                screen_switch = 1;
 8001582:	2301      	movs	r3, #1
 8001584:	6363      	str	r3, [r4, #52]	@ 0x34
        	                HAL_Delay(500);
 8001586:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800158a:	f001 f8ff 	bl	800278c <HAL_Delay>
        	        if (screen_switch == 1) {
 800158e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001590:	2b01      	cmp	r3, #1
 8001592:	f040 8159 	bne.w	8001848 <SelectStage.2+0x64c>
        	            screen_switch = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	6363      	str	r3, [r4, #52]	@ 0x34
        	            menu = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60a3      	str	r3, [r4, #8]
        	            giris = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	6063      	str	r3, [r4, #4]
        	            menu2 = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63a3      	str	r3, [r4, #56]	@ 0x38
        	            state = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	6123      	str	r3, [r4, #16]
        	                ssd1306_Fill(Black);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 fee8 	bl	8002380 <ssd1306_Fill>
        	                ssd1306_SetCursor(0, 0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f001 f82e 	bl	8002614 <ssd1306_SetCursor>
        	                ssd1306_WriteString("is Sistemi\n", Font_7x10, White);
 80015b8:	4b62      	ldr	r3, [pc, #392]	@ (8001744 <SelectStage.2+0x548>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	9200      	str	r2, [sp, #0]
 80015be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c0:	4864      	ldr	r0, [pc, #400]	@ (8001754 <SelectStage.2+0x558>)
 80015c2:	f001 f801 	bl	80025c8 <ssd1306_WriteString>
        	                ssd1306_SetCursor(0, 15);
 80015c6:	210f      	movs	r1, #15
 80015c8:	2000      	movs	r0, #0
 80015ca:	f001 f823 	bl	8002614 <ssd1306_SetCursor>
        	                yukaributonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_UP_PIN);
 80015ce:	2101      	movs	r1, #1
 80015d0:	485f      	ldr	r0, [pc, #380]	@ (8001750 <SelectStage.2+0x554>)
 80015d2:	f001 fbad 	bl	8002d30 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	6463      	str	r3, [r4, #68]	@ 0x44
        	                asagibutonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_DOWN_PIN);
 80015da:	2104      	movs	r1, #4
 80015dc:	485c      	ldr	r0, [pc, #368]	@ (8001750 <SelectStage.2+0x554>)
 80015de:	f001 fba7 	bl	8002d30 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	6423      	str	r3, [r4, #64]	@ 0x40
        	                onaybutonbas = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN);
 80015e6:	2110      	movs	r1, #16
 80015e8:	4859      	ldr	r0, [pc, #356]	@ (8001750 <SelectStage.2+0x554>)
 80015ea:	f001 fba1 	bl	8002d30 <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	63e3      	str	r3, [r4, #60]	@ 0x3c
        	                if (yukaributonbas == 1) {
 80015f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10a      	bne.n	800160e <SelectStage.2+0x412>
        	                    menu++;
 80015f8:	68a3      	ldr	r3, [r4, #8]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60a3      	str	r3, [r4, #8]
        	                    if (menu >= 1) { menu = 1; }
 80015fe:	68a3      	ldr	r3, [r4, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	dd01      	ble.n	8001608 <SelectStage.2+0x40c>
 8001604:	2301      	movs	r3, #1
 8001606:	60a3      	str	r3, [r4, #8]
        	                    HAL_Delay(200);
 8001608:	20c8      	movs	r0, #200	@ 0xc8
 800160a:	f001 f8bf 	bl	800278c <HAL_Delay>
        	                if (asagibutonbas == 1) {
 800160e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001610:	2b01      	cmp	r3, #1
 8001612:	d10a      	bne.n	800162a <SelectStage.2+0x42e>
        	                    menu--;
 8001614:	68a3      	ldr	r3, [r4, #8]
 8001616:	3b01      	subs	r3, #1
 8001618:	60a3      	str	r3, [r4, #8]
        	                    if (menu >= 2) { menu = 0; }
 800161a:	68a3      	ldr	r3, [r4, #8]
 800161c:	2b01      	cmp	r3, #1
 800161e:	dd01      	ble.n	8001624 <SelectStage.2+0x428>
 8001620:	2300      	movs	r3, #0
 8001622:	60a3      	str	r3, [r4, #8]
        	                    HAL_Delay(200);
 8001624:	20c8      	movs	r0, #200	@ 0xc8
 8001626:	f001 f8b1 	bl	800278c <HAL_Delay>
        	                if (onaybutonbas == 1) {
 800162a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800162c:	2b01      	cmp	r3, #1
 800162e:	d12b      	bne.n	8001688 <SelectStage.2+0x48c>
        	                    if (menu == 1) {
 8001630:	68a3      	ldr	r3, [r4, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d118      	bne.n	8001668 <SelectStage.2+0x46c>
        	                        HAL_Delay(30);
 8001636:	201e      	movs	r0, #30
 8001638:	f001 f8a8 	bl	800278c <HAL_Delay>
        	                        ssd1306_Fill(Black);
 800163c:	2000      	movs	r0, #0
 800163e:	f000 fe9f 	bl	8002380 <ssd1306_Fill>
        	                        ssd1306_SetCursor(0, 0);
 8001642:	2100      	movs	r1, #0
 8001644:	2000      	movs	r0, #0
 8001646:	f000 ffe5 	bl	8002614 <ssd1306_SetCursor>
        	                        ssd1306_WriteString("Tahmin ediliyor", Font_7x10, White);
 800164a:	4b3e      	ldr	r3, [pc, #248]	@ (8001744 <SelectStage.2+0x548>)
 800164c:	2201      	movs	r2, #1
 800164e:	9200      	str	r2, [sp, #0]
 8001650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001652:	4841      	ldr	r0, [pc, #260]	@ (8001758 <SelectStage.2+0x55c>)
 8001654:	f000 ffb8 	bl	80025c8 <ssd1306_WriteString>
        	                        ssd1306_UpdateScreen();
 8001658:	f000 feaa 	bl	80023b0 <ssd1306_UpdateScreen>
                                    HAL_Delay(100);
 800165c:	2064      	movs	r0, #100	@ 0x64
 800165e:	f001 f895 	bl	800278c <HAL_Delay>
        	                       Predictionfunc();
 8001662:	46a4      	mov	ip, r4
 8001664:	f7ff fbc2 	bl	8000dec <Predictionfunc.1>
        	                    if (menu == 0) {
 8001668:	68a3      	ldr	r3, [r4, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <SelectStage.2+0x486>
        	                        ssd1306_Fill(Black);
 800166e:	2000      	movs	r0, #0
 8001670:	f000 fe86 	bl	8002380 <ssd1306_Fill>
        	                        ssd1306_SetCursor(0, 15);
 8001674:	210f      	movs	r1, #15
 8001676:	2000      	movs	r0, #0
 8001678:	f000 ffcc 	bl	8002614 <ssd1306_SetCursor>
        	                        SelectStage();
 800167c:	46a4      	mov	ip, r4
 800167e:	f7ff fdbd 	bl	80011fc <SelectStage.2>
        	                    HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f001 f882 	bl	800278c <HAL_Delay>
        	                if (menu == 0) {
 8001688:	68a3      	ldr	r3, [r4, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d16a      	bne.n	8001764 <SelectStage.2+0x568>
        	                    ssd1306_WriteString("tahminler\n", Font_7x10, White);
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <SelectStage.2+0x548>)
 8001690:	2201      	movs	r2, #1
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001696:	4831      	ldr	r0, [pc, #196]	@ (800175c <SelectStage.2+0x560>)
 8001698:	f000 ff96 	bl	80025c8 <ssd1306_WriteString>
        	                   ssd1306_SetCursor(0,35);
 800169c:	2123      	movs	r1, #35	@ 0x23
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 ffb8 	bl	8002614 <ssd1306_SetCursor>
        	                    ssd1306_WriteString(">urunler\n", Font_7x10, White);
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <SelectStage.2+0x548>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	9200      	str	r2, [sp, #0]
 80016aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ac:	482c      	ldr	r0, [pc, #176]	@ (8001760 <SelectStage.2+0x564>)
 80016ae:	f000 ff8b 	bl	80025c8 <ssd1306_WriteString>
        	                    HAL_Delay(20);
 80016b2:	2014      	movs	r0, #20
 80016b4:	f001 f86a 	bl	800278c <HAL_Delay>
        	                    if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN)== 1)
 80016b8:	2110      	movs	r1, #16
 80016ba:	4825      	ldr	r0, [pc, #148]	@ (8001750 <SelectStage.2+0x554>)
 80016bc:	f001 fb38 	bl	8002d30 <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	f040 80bd 	bne.w	8001842 <SelectStage.2+0x646>
        	                    		 art = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	64a3      	str	r3, [r4, #72]	@ 0x48
        	                    		 mantik = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	6023      	str	r3, [r4, #0]
        	                    		 screen_switch = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	6363      	str	r3, [r4, #52]	@ 0x34
        	                    		 menu2 = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63a3      	str	r3, [r4, #56]	@ 0x38
        	                    		 state = 1;
 80016d8:	2301      	movs	r3, #1
 80016da:	6123      	str	r3, [r4, #16]
        	                    		 control = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	6323      	str	r3, [r4, #48]	@ 0x30
        	                    		 rtnMainPage = 1;//rtnMainpage 1 yaptım ürün ve zaman yönetimine girsin diye
 80016e0:	2301      	movs	r3, #1
 80016e2:	66a3      	str	r3, [r4, #104]	@ 0x68
        	                    		 upbuton = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
        	                    		 bottombuton = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62a3      	str	r3, [r4, #40]	@ 0x28
        	                    		 pagecroos = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	6163      	str	r3, [r4, #20]
        	                    		 choseProduct = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60e3      	str	r3, [r4, #12]
        	                    		 giris=0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	6063      	str	r3, [r4, #4]
        	                    		 control_cikis=0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	64e3      	str	r3, [r4, #76]	@ 0x4c
        	                    		 cnttime=0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	66e3      	str	r3, [r4, #108]	@ 0x6c
        	                    		 for(int i = 0; i < 3; i++) {
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001704:	e008      	b.n	8001718 <SelectStage.2+0x51c>
        	                    		  productscounter[i] = -1; // Her elemanı sıfırla değiştir
 8001706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001708:	3314      	adds	r3, #20
 800170a:	f04f 32ff 	mov.w	r2, #4294967295
 800170e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        	                    		 for(int i = 0; i < 3; i++) {
 8001712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001714:	3301      	adds	r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171a:	2b02      	cmp	r3, #2
 800171c:	ddf3      	ble.n	8001706 <SelectStage.2+0x50a>
        	                    		 for(int i = 0; i < 3; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
 8001722:	e008      	b.n	8001736 <SelectStage.2+0x53a>
        	                    	     whichMonths[i] = 0; // Her elemanı sıfırla değiştir
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	3316      	adds	r3, #22
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4423      	add	r3, r4
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
        	                    		 for(int i = 0; i < 3; i++) {
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	3301      	adds	r3, #1
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	2b02      	cmp	r3, #2
 800173a:	ddf3      	ble.n	8001724 <SelectStage.2+0x528>
        	                    	 SelectStage();
 800173c:	46a4      	mov	ip, r4
 800173e:	f7ff fd5d 	bl	80011fc <SelectStage.2>
 8001742:	e07e      	b.n	8001842 <SelectStage.2+0x646>
 8001744:	0800d2a4 	.word	0x0800d2a4
 8001748:	0800cae8 	.word	0x0800cae8
 800174c:	0800caf4 	.word	0x0800caf4
 8001750:	40020c00 	.word	0x40020c00
 8001754:	0800c900 	.word	0x0800c900
 8001758:	0800c8a0 	.word	0x0800c8a0
 800175c:	0800c928 	.word	0x0800c928
 8001760:	0800cb04 	.word	0x0800cb04
        	                } else if (menu == 1) {
 8001764:	68a3      	ldr	r3, [r4, #8]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d16b      	bne.n	8001842 <SelectStage.2+0x646>
        	                    ssd1306_WriteString(">tahminler\n", Font_7x10, White);
 800176a:	4b3d      	ldr	r3, [pc, #244]	@ (8001860 <SelectStage.2+0x664>)
 800176c:	2201      	movs	r2, #1
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001772:	483c      	ldr	r0, [pc, #240]	@ (8001864 <SelectStage.2+0x668>)
 8001774:	f000 ff28 	bl	80025c8 <ssd1306_WriteString>
        	                    ssd1306_SetCursor(0,35);
 8001778:	2123      	movs	r1, #35	@ 0x23
 800177a:	2000      	movs	r0, #0
 800177c:	f000 ff4a 	bl	8002614 <ssd1306_SetCursor>
        	                    ssd1306_WriteString("urunler\n", Font_7x10, White);
 8001780:	4b37      	ldr	r3, [pc, #220]	@ (8001860 <SelectStage.2+0x664>)
 8001782:	2201      	movs	r2, #1
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001788:	4837      	ldr	r0, [pc, #220]	@ (8001868 <SelectStage.2+0x66c>)
 800178a:	f000 ff1d 	bl	80025c8 <ssd1306_WriteString>
        	                    HAL_Delay(20);
 800178e:	2014      	movs	r0, #20
 8001790:	f000 fffc 	bl	800278c <HAL_Delay>
        	                    if (HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_SELECT_PIN)== 1)
 8001794:	2110      	movs	r1, #16
 8001796:	4835      	ldr	r0, [pc, #212]	@ (800186c <SelectStage.2+0x670>)
 8001798:	f001 faca 	bl	8002d30 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d14f      	bne.n	8001842 <SelectStage.2+0x646>
        	                                                        	 art = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	64a3      	str	r3, [r4, #72]	@ 0x48
        	                            	                    		 mantik = 1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	6023      	str	r3, [r4, #0]
        	                            	                    		 screen_switch = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	6363      	str	r3, [r4, #52]	@ 0x34
        	                            	                    		 menu2 = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63a3      	str	r3, [r4, #56]	@ 0x38
        	                            	                    		 state = 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	6123      	str	r3, [r4, #16]
        	                            	                    		 control = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	6323      	str	r3, [r4, #48]	@ 0x30
        	                            	                    		 rtnMainPage = 1;//rtnMainpage 1 yaptım ürün ve zaman yönetimine girsin diye
 80017ba:	2301      	movs	r3, #1
 80017bc:	66a3      	str	r3, [r4, #104]	@ 0x68
        	                            	                    		 upbuton = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
        	                            	                    		 bottombuton = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62a3      	str	r3, [r4, #40]	@ 0x28
        	                            	                    		 pagecroos = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	6163      	str	r3, [r4, #20]
        	                            	                    		 choseProduct = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60e3      	str	r3, [r4, #12]
        	                            	                    		 for(int i = 0; i < 3; i++) {
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	e008      	b.n	80017e6 <SelectStage.2+0x5ea>
        	                            	                    		     productscounter[i] = -1; // Her elemanı sıfırla değiştir
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	3314      	adds	r3, #20
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        	                            	                    		 for(int i = 0; i < 3; i++) {
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	3301      	adds	r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	ddf3      	ble.n	80017d4 <SelectStage.2+0x5d8>
	 giris=0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	6063      	str	r3, [r4, #4]
        	                            	                    		 control_cikis=0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64e3      	str	r3, [r4, #76]	@ 0x4c
        	                            	                    		 cnttime=0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	66e3      	str	r3, [r4, #108]	@ 0x6c
        	                            	                    		 for(int i = 0; i < 3; i++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e008      	b.n	8001810 <SelectStage.2+0x614>
        	                            	                    		     whichMonths[i] = 0; // Her elemanı sıfırla değiştir
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3316      	adds	r3, #22
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4423      	add	r3, r4
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
        	                            	                    		 for(int i = 0; i < 3; i++) {
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b02      	cmp	r3, #2
 8001814:	ddf3      	ble.n	80017fe <SelectStage.2+0x602>
        	                         ssd1306_Fill(Black);
 8001816:	2000      	movs	r0, #0
 8001818:	f000 fdb2 	bl	8002380 <ssd1306_Fill>
        	                         ssd1306_SetCursor(0, 0);
 800181c:	2100      	movs	r1, #0
 800181e:	2000      	movs	r0, #0
 8001820:	f000 fef8 	bl	8002614 <ssd1306_SetCursor>
        	                        ssd1306_WriteString("Tahmin ediliyor", Font_7x10, White);
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <SelectStage.2+0x664>)
 8001826:	2201      	movs	r2, #1
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800182c:	4810      	ldr	r0, [pc, #64]	@ (8001870 <SelectStage.2+0x674>)
 800182e:	f000 fecb 	bl	80025c8 <ssd1306_WriteString>
        	                       ssd1306_UpdateScreen();
 8001832:	f000 fdbd 	bl	80023b0 <ssd1306_UpdateScreen>
        	                       HAL_Delay(100);
 8001836:	2064      	movs	r0, #100	@ 0x64
 8001838:	f000 ffa8 	bl	800278c <HAL_Delay>
        	                    	  Predictionfunc();
 800183c:	46a4      	mov	ip, r4
 800183e:	f7ff fad5 	bl	8000dec <Predictionfunc.1>
        	                ssd1306_UpdateScreen();
 8001842:	f000 fdb5 	bl	80023b0 <ssd1306_UpdateScreen>
        	                ssd1306_Fill(Black);
 8001846:	e6b0      	b.n	80015aa <SelectStage.2+0x3ae>
        	        ssd1306_UpdateScreen();
 8001848:	f000 fdb2 	bl	80023b0 <ssd1306_UpdateScreen>
        	  while (mantik) {
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f47f acdb 	bne.w	800120a <SelectStage.2+0xe>
        }
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	373c      	adds	r7, #60	@ 0x3c
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}
 800185e:	bf00      	nop
 8001860:	0800d2a4 	.word	0x0800d2a4
 8001864:	0800cb10 	.word	0x0800cb10
 8001868:	0800c91c 	.word	0x0800c91c
 800186c:	40020c00 	.word	0x40020c00
 8001870:	0800c8a0 	.word	0x0800c8a0

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b094      	sub	sp, #80	@ 0x50
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	2230      	movs	r2, #48	@ 0x30
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f00a f85c 	bl	800b940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	4b27      	ldr	r3, [pc, #156]	@ (800193c <SystemClock_Config+0xc8>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	4a26      	ldr	r2, [pc, #152]	@ (800193c <SystemClock_Config+0xc8>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <SystemClock_Config+0xc8>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <SystemClock_Config+0xcc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a20      	ldr	r2, [pc, #128]	@ (8001940 <SystemClock_Config+0xcc>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <SystemClock_Config+0xcc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018da:	2302      	movs	r3, #2
 80018dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018e4:	2304      	movs	r3, #4
 80018e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018e8:	23a8      	movs	r3, #168	@ 0xa8
 80018ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018f0:	2307      	movs	r3, #7
 80018f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f4:	f107 0320 	add.w	r3, r7, #32
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fcb3 	bl	8006264 <HAL_RCC_OscConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001904:	f000 f9d8 	bl	8001cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001908:	230f      	movs	r3, #15
 800190a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190c:	2302      	movs	r3, #2
 800190e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2102      	movs	r1, #2
 8001924:	4618      	mov	r0, r3
 8001926:	f004 ff15 	bl	8006754 <HAL_RCC_ClockConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001930:	f000 f9c2 	bl	8001cb8 <Error_Handler>
  }
}
 8001934:	bf00      	nop
 8001936:	3750      	adds	r7, #80	@ 0x50
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000

08001944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <MX_I2C1_Init+0x50>)
 800194a:	4a13      	ldr	r2, [pc, #76]	@ (8001998 <MX_I2C1_Init+0x54>)
 800194c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <MX_I2C1_Init+0x50>)
 8001950:	4a12      	ldr	r2, [pc, #72]	@ (800199c <MX_I2C1_Init+0x58>)
 8001952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <MX_I2C1_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <MX_I2C1_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <MX_I2C1_Init+0x50>)
 8001962:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001968:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <MX_I2C1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MX_I2C1_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	@ (8001994 <MX_I2C1_Init+0x50>)
 8001982:	f003 fb21 	bl	8004fc8 <HAL_I2C_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800198c:	f000 f994 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200000a4 	.word	0x200000a4
 8001998:	40005400 	.word	0x40005400
 800199c:	00061a80 	.word	0x00061a80

080019a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019a6:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <MX_I2S3_Init+0x58>)
 80019a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019c8:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80019cc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <MX_I2S3_Init+0x54>)
 80019e2:	f003 ff9f 	bl	8005924 <HAL_I2S_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80019ec:	f000 f964 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200000f8 	.word	0x200000f8
 80019f8:	40003c00 	.word	0x40003c00

080019fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a02:	4a18      	ldr	r2, [pc, #96]	@ (8001a64 <MX_SPI1_Init+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a34:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a40:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a48:	220a      	movs	r2, #10
 8001a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <MX_SPI1_Init+0x64>)
 8001a4e:	f005 f9e3 	bl	8006e18 <HAL_SPI_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a58:	f000 f92e 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000140 	.word	0x20000140
 8001a64:	40013000 	.word	0x40013000

08001a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <MX_USART2_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	f005 fa43 	bl	8006f2a <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f000 f905 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000198 	.word	0x20000198
 8001ab8:	40004400 	.word	0x40004400

08001abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	@ 0x30
 8001ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	4b72      	ldr	r3, [pc, #456]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a71      	ldr	r2, [pc, #452]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a6a      	ldr	r2, [pc, #424]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b68      	ldr	r3, [pc, #416]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b64      	ldr	r3, [pc, #400]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a63      	ldr	r2, [pc, #396]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b61      	ldr	r3, [pc, #388]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b56      	ldr	r3, [pc, #344]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a55      	ldr	r2, [pc, #340]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b53      	ldr	r3, [pc, #332]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca0 <MX_GPIO_Init+0x1e4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	4849      	ldr	r0, [pc, #292]	@ (8001ca4 <MX_GPIO_Init+0x1e8>)
 8001b80:	f001 f8ee 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2101      	movs	r1, #1
 8001b88:	4847      	ldr	r0, [pc, #284]	@ (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001b8a:	f001 f8e9 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001b94:	4845      	ldr	r0, [pc, #276]	@ (8001cac <MX_GPIO_Init+0x1f0>)
 8001b96:	f001 f8e3 	bl	8002d60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	483c      	ldr	r0, [pc, #240]	@ (8001ca4 <MX_GPIO_Init+0x1e8>)
 8001bb2:	f000 ff21 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4836      	ldr	r0, [pc, #216]	@ (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001bce:	f000 ff13 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001be2:	2305      	movs	r3, #5
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	482e      	ldr	r0, [pc, #184]	@ (8001ca8 <MX_GPIO_Init+0x1ec>)
 8001bee:	f000 ff03 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bf6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	482a      	ldr	r0, [pc, #168]	@ (8001cb0 <MX_GPIO_Init+0x1f4>)
 8001c08:	f000 fef6 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4825      	ldr	r0, [pc, #148]	@ (8001cb4 <MX_GPIO_Init+0x1f8>)
 8001c20:	f000 feea 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c36:	2305      	movs	r3, #5
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	481c      	ldr	r0, [pc, #112]	@ (8001cb4 <MX_GPIO_Init+0x1f8>)
 8001c42:	f000 fed9 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c46:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001c4a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4813      	ldr	r0, [pc, #76]	@ (8001cac <MX_GPIO_Init+0x1f0>)
 8001c60:	f000 feca 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c64:	2320      	movs	r3, #32
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	480d      	ldr	r0, [pc, #52]	@ (8001cac <MX_GPIO_Init+0x1f0>)
 8001c78:	f000 febe 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c80:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <MX_GPIO_Init+0x1e8>)
 8001c92:	f000 feb1 	bl	80029f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c96:	bf00      	nop
 8001c98:	3730      	adds	r7, #48	@ 0x30
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <Error_Handler+0x8>

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <HAL_MspInit+0x4c>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d10 <HAL_MspInit+0x4c>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <HAL_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a08      	ldr	r2, [pc, #32]	@ (8001d10 <HAL_MspInit+0x4c>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d02:	2007      	movs	r0, #7
 8001d04:	f000 fe36 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	@ (8001d98 <HAL_I2C_MspInit+0x84>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d12c      	bne.n	8001d90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d52:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d58:	2312      	movs	r3, #18
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d64:	2304      	movs	r3, #4
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <HAL_I2C_MspInit+0x8c>)
 8001d70:	f000 fe42 	bl	80029f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	@ 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40005400 	.word	0x40005400
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020400 	.word	0x40020400

08001da4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08e      	sub	sp, #56	@ 0x38
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a31      	ldr	r2, [pc, #196]	@ (8001e94 <HAL_I2S_MspInit+0xf0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d15a      	bne.n	8001e8a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001dd8:	2332      	movs	r3, #50	@ 0x32
 8001dda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 fed5 	bl	8006b94 <HAL_RCCEx_PeriphCLKConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001df0:	f7ff ff62 	bl	8001cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	4a26      	ldr	r2, [pc, #152]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e04:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	4a1f      	ldr	r2, [pc, #124]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	4a18      	ldr	r2, [pc, #96]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_I2S_MspInit+0xf4>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e48:	2310      	movs	r3, #16
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e58:	2306      	movs	r3, #6
 8001e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	480e      	ldr	r0, [pc, #56]	@ (8001e9c <HAL_I2S_MspInit+0xf8>)
 8001e64:	f000 fdc8 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e68:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e82:	4619      	mov	r1, r3
 8001e84:	4806      	ldr	r0, [pc, #24]	@ (8001ea0 <HAL_I2S_MspInit+0xfc>)
 8001e86:	f000 fdb7 	bl	80029f8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3738      	adds	r7, #56	@ 0x38
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40003c00 	.word	0x40003c00
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40020800 	.word	0x40020800

08001ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <HAL_SPI_MspInit+0x84>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12b      	bne.n	8001f1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <HAL_SPI_MspInit+0x88>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	4a17      	ldr	r2, [pc, #92]	@ (8001f2c <HAL_SPI_MspInit+0x88>)
 8001ed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <HAL_SPI_MspInit+0x88>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <HAL_SPI_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a10      	ldr	r2, [pc, #64]	@ (8001f2c <HAL_SPI_MspInit+0x88>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_SPI_MspInit+0x88>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001efe:	23e0      	movs	r3, #224	@ 0xe0
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f0e:	2305      	movs	r3, #5
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <HAL_SPI_MspInit+0x8c>)
 8001f1a:	f000 fd6d 	bl	80029f8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	@ 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40013000 	.word	0x40013000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000

08001f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a19      	ldr	r2, [pc, #100]	@ (8001fb8 <HAL_UART_MspInit+0x84>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d12b      	bne.n	8001fae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <HAL_UART_MspInit+0x88>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	4a17      	ldr	r2, [pc, #92]	@ (8001fbc <HAL_UART_MspInit+0x88>)
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_UART_MspInit+0x88>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <HAL_UART_MspInit+0x88>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	4a10      	ldr	r2, [pc, #64]	@ (8001fbc <HAL_UART_MspInit+0x88>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_UART_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f8e:	230c      	movs	r3, #12
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <HAL_UART_MspInit+0x8c>)
 8001faa:	f000 fd25 	bl	80029f8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001fae:	bf00      	nop
 8001fb0:	3728      	adds	r7, #40	@ 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40004400 	.word	0x40004400
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <NMI_Handler+0x4>

08001fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <HardFault_Handler+0x4>

08001fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <MemManage_Handler+0x4>

08001fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <BusFault_Handler+0x4>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <UsageFault_Handler+0x4>

08001fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201a:	f000 fb97 	bl	800274c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <OTG_FS_IRQHandler+0x10>)
 800202a:	f001 f993 	bl	8003354 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200009cc 	.word	0x200009cc

08002038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_kill>:

int _kill(int pid, int sig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002052:	f009 fd67 	bl	800bb24 <__errno>
 8002056:	4603      	mov	r3, r0
 8002058:	2216      	movs	r2, #22
 800205a:	601a      	str	r2, [r3, #0]
  return -1;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_exit>:

void _exit (int status)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ffe7 	bl	8002048 <_kill>
  while (1) {}    /* Make sure we hang here */
 800207a:	bf00      	nop
 800207c:	e7fd      	b.n	800207a <_exit+0x12>

0800207e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e00a      	b.n	80020a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002090:	f3af 8000 	nop.w
 8002094:	4601      	mov	r1, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	60ba      	str	r2, [r7, #8]
 800209c:	b2ca      	uxtb	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dbf0      	blt.n	8002090 <_read+0x12>
  }

  return len;
 80020ae:	687b      	ldr	r3, [r7, #4]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e009      	b.n	80020de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	60ba      	str	r2, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dbf1      	blt.n	80020ca <_write+0x12>
  }
  return len;
 80020e6:	687b      	ldr	r3, [r7, #4]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_close>:

int _close(int file)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002118:	605a      	str	r2, [r3, #4]
  return 0;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_isatty>:

int _isatty(int file)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002130:	2301      	movs	r3, #1
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002160:	4a14      	ldr	r2, [pc, #80]	@ (80021b4 <_sbrk+0x5c>)
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <_sbrk+0x60>)
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <_sbrk+0x64>)
 8002176:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <_sbrk+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d207      	bcs.n	8002198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002188:	f009 fccc 	bl	800bb24 <__errno>
 800218c:	4603      	mov	r3, r0
 800218e:	220c      	movs	r2, #12
 8002190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e009      	b.n	80021ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219e:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <_sbrk+0x64>)
 80021a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20020000 	.word	0x20020000
 80021b8:	00000400 	.word	0x00000400
 80021bc:	200001e0 	.word	0x200001e0
 80021c0:	20000ef8 	.word	0x20000ef8

080021c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <SystemInit+0x20>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <SystemInit+0x20>)
 80021d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002220 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021ec:	f7ff ffea 	bl	80021c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f0:	480c      	ldr	r0, [pc, #48]	@ (8002224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021f2:	490d      	ldr	r1, [pc, #52]	@ (8002228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002208:	4c0a      	ldr	r4, [pc, #40]	@ (8002234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002216:	f009 fc8b 	bl	800bb30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7fe f9b9 	bl	8000590 <main>
  bx  lr    
 800221e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002228:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800222c:	0800d4a4 	.word	0x0800d4a4
  ldr r2, =_sbss
 8002230:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002234:	20000ef8 	.word	0x20000ef8

08002238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC_IRQHandler>

0800223a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af04      	add	r7, sp, #16
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2301      	movs	r3, #1
 8002262:	2200      	movs	r2, #0
 8002264:	2178      	movs	r1, #120	@ 0x78
 8002266:	4803      	ldr	r0, [pc, #12]	@ (8002274 <ssd1306_WriteCommand+0x2c>)
 8002268:	f002 fff2 	bl	8005250 <HAL_I2C_Mem_Write>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200000a4 	.word	0x200000a4

08002278 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af04      	add	r7, sp, #16
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	9202      	str	r2, [sp, #8]
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	2240      	movs	r2, #64	@ 0x40
 8002296:	2178      	movs	r1, #120	@ 0x78
 8002298:	4803      	ldr	r0, [pc, #12]	@ (80022a8 <ssd1306_WriteData+0x30>)
 800229a:	f002 ffd9 	bl	8005250 <HAL_I2C_Mem_Write>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200000a4 	.word	0x200000a4

080022ac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80022b0:	f7ff ffc3 	bl	800223a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80022b4:	2064      	movs	r0, #100	@ 0x64
 80022b6:	f000 fa69 	bl	800278c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80022ba:	2000      	movs	r0, #0
 80022bc:	f000 f9d6 	bl	800266c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80022c0:	2020      	movs	r0, #32
 80022c2:	f7ff ffc1 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff ffbe 	bl	8002248 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022cc:	20b0      	movs	r0, #176	@ 0xb0
 80022ce:	f7ff ffbb 	bl	8002248 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80022d2:	20c8      	movs	r0, #200	@ 0xc8
 80022d4:	f7ff ffb8 	bl	8002248 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff ffb5 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80022de:	2010      	movs	r0, #16
 80022e0:	f7ff ffb2 	bl	8002248 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80022e4:	2040      	movs	r0, #64	@ 0x40
 80022e6:	f7ff ffaf 	bl	8002248 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80022ea:	20ff      	movs	r0, #255	@ 0xff
 80022ec:	f000 f9aa 	bl	8002644 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80022f0:	20a1      	movs	r0, #161	@ 0xa1
 80022f2:	f7ff ffa9 	bl	8002248 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80022f6:	20a6      	movs	r0, #166	@ 0xa6
 80022f8:	f7ff ffa6 	bl	8002248 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80022fc:	20a8      	movs	r0, #168	@ 0xa8
 80022fe:	f7ff ffa3 	bl	8002248 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002302:	203f      	movs	r0, #63	@ 0x3f
 8002304:	f7ff ffa0 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002308:	20a4      	movs	r0, #164	@ 0xa4
 800230a:	f7ff ff9d 	bl	8002248 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800230e:	20d3      	movs	r0, #211	@ 0xd3
 8002310:	f7ff ff9a 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff ff97 	bl	8002248 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800231a:	20d5      	movs	r0, #213	@ 0xd5
 800231c:	f7ff ff94 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002320:	20f0      	movs	r0, #240	@ 0xf0
 8002322:	f7ff ff91 	bl	8002248 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002326:	20d9      	movs	r0, #217	@ 0xd9
 8002328:	f7ff ff8e 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800232c:	2022      	movs	r0, #34	@ 0x22
 800232e:	f7ff ff8b 	bl	8002248 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002332:	20da      	movs	r0, #218	@ 0xda
 8002334:	f7ff ff88 	bl	8002248 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002338:	2012      	movs	r0, #18
 800233a:	f7ff ff85 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800233e:	20db      	movs	r0, #219	@ 0xdb
 8002340:	f7ff ff82 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002344:	2020      	movs	r0, #32
 8002346:	f7ff ff7f 	bl	8002248 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800234a:	208d      	movs	r0, #141	@ 0x8d
 800234c:	f7ff ff7c 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002350:	2014      	movs	r0, #20
 8002352:	f7ff ff79 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002356:	2001      	movs	r0, #1
 8002358:	f000 f988 	bl	800266c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800235c:	2000      	movs	r0, #0
 800235e:	f000 f80f 	bl	8002380 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002362:	f000 f825 	bl	80023b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002366:	4b05      	ldr	r3, [pc, #20]	@ (800237c <ssd1306_Init+0xd0>)
 8002368:	2200      	movs	r2, #0
 800236a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <ssd1306_Init+0xd0>)
 800236e:	2200      	movs	r2, #0
 8002370:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002372:	4b02      	ldr	r3, [pc, #8]	@ (800237c <ssd1306_Init+0xd0>)
 8002374:	2201      	movs	r2, #1
 8002376:	711a      	strb	r2, [r3, #4]
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200005e4 	.word	0x200005e4

08002380 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <ssd1306_Fill+0x14>
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <ssd1306_Fill+0x16>
 8002394:	23ff      	movs	r3, #255	@ 0xff
 8002396:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800239a:	4619      	mov	r1, r3
 800239c:	4803      	ldr	r0, [pc, #12]	@ (80023ac <ssd1306_Fill+0x2c>)
 800239e:	f009 facf 	bl	800b940 <memset>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200001e4 	.word	0x200001e4

080023b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	e016      	b.n	80023ea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	3b50      	subs	r3, #80	@ 0x50
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff40 	bl	8002248 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7ff ff3d 	bl	8002248 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80023ce:	2010      	movs	r0, #16
 80023d0:	f7ff ff3a 	bl	8002248 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	01db      	lsls	r3, r3, #7
 80023d8:	4a08      	ldr	r2, [pc, #32]	@ (80023fc <ssd1306_UpdateScreen+0x4c>)
 80023da:	4413      	add	r3, r2
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff4a 	bl	8002278 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	3301      	adds	r3, #1
 80023e8:	71fb      	strb	r3, [r7, #7]
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	2b07      	cmp	r3, #7
 80023ee:	d9e5      	bls.n	80023bc <ssd1306_UpdateScreen+0xc>
    }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200001e4 	.word	0x200001e4

08002400 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	460b      	mov	r3, r1
 800240c:	71bb      	strb	r3, [r7, #6]
 800240e:	4613      	mov	r3, r2
 8002410:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db3d      	blt.n	8002496 <ssd1306_DrawPixel+0x96>
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	2b3f      	cmp	r3, #63	@ 0x3f
 800241e:	d83a      	bhi.n	8002496 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002420:	797b      	ldrb	r3, [r7, #5]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d11a      	bne.n	800245c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002426:	79fa      	ldrb	r2, [r7, #7]
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	4603      	mov	r3, r0
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	4413      	add	r3, r2
 8002434:	4a1b      	ldr	r2, [pc, #108]	@ (80024a4 <ssd1306_DrawPixel+0xa4>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	b25a      	sxtb	r2, r3
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	b25b      	sxtb	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b259      	sxtb	r1, r3
 800244c:	79fa      	ldrb	r2, [r7, #7]
 800244e:	4603      	mov	r3, r0
 8002450:	01db      	lsls	r3, r3, #7
 8002452:	4413      	add	r3, r2
 8002454:	b2c9      	uxtb	r1, r1
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <ssd1306_DrawPixel+0xa4>)
 8002458:	54d1      	strb	r1, [r2, r3]
 800245a:	e01d      	b.n	8002498 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	b2d8      	uxtb	r0, r3
 8002464:	4603      	mov	r3, r0
 8002466:	01db      	lsls	r3, r3, #7
 8002468:	4413      	add	r3, r2
 800246a:	4a0e      	ldr	r2, [pc, #56]	@ (80024a4 <ssd1306_DrawPixel+0xa4>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	b25a      	sxtb	r2, r3
 8002470:	79bb      	ldrb	r3, [r7, #6]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	b25b      	sxtb	r3, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	b25b      	sxtb	r3, r3
 8002482:	4013      	ands	r3, r2
 8002484:	b259      	sxtb	r1, r3
 8002486:	79fa      	ldrb	r2, [r7, #7]
 8002488:	4603      	mov	r3, r0
 800248a:	01db      	lsls	r3, r3, #7
 800248c:	4413      	add	r3, r2
 800248e:	b2c9      	uxtb	r1, r1
 8002490:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <ssd1306_DrawPixel+0xa4>)
 8002492:	54d1      	strb	r1, [r2, r3]
 8002494:	e000      	b.n	8002498 <ssd1306_DrawPixel+0x98>
        return;
 8002496:	bf00      	nop
    }
}
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	200001e4 	.word	0x200001e4

080024a8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4604      	mov	r4, r0
 80024b0:	4638      	mov	r0, r7
 80024b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80024b6:	4623      	mov	r3, r4
 80024b8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b1f      	cmp	r3, #31
 80024be:	d902      	bls.n	80024c6 <ssd1306_WriteChar+0x1e>
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80024c4:	d901      	bls.n	80024ca <ssd1306_WriteChar+0x22>
        return 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e077      	b.n	80025ba <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80024ca:	4b3e      	ldr	r3, [pc, #248]	@ (80025c4 <ssd1306_WriteChar+0x11c>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	783b      	ldrb	r3, [r7, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	2b80      	cmp	r3, #128	@ 0x80
 80024d6:	dc06      	bgt.n	80024e6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80024d8:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <ssd1306_WriteChar+0x11c>)
 80024da:	885b      	ldrh	r3, [r3, #2]
 80024dc:	461a      	mov	r2, r3
 80024de:	787b      	ldrb	r3, [r7, #1]
 80024e0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80024e2:	2b40      	cmp	r3, #64	@ 0x40
 80024e4:	dd01      	ble.n	80024ea <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e067      	b.n	80025ba <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	e04e      	b.n	800258e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	3b20      	subs	r3, #32
 80024f6:	7879      	ldrb	r1, [r7, #1]
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4619      	mov	r1, r3
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	440b      	add	r3, r1
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	e036      	b.n	800257e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002520:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <ssd1306_WriteChar+0x11c>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4413      	add	r3, r2
 800252c:	b2d8      	uxtb	r0, r3
 800252e:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <ssd1306_WriteChar+0x11c>)
 8002530:	885b      	ldrh	r3, [r3, #2]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	4413      	add	r3, r2
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002540:	4619      	mov	r1, r3
 8002542:	f7ff ff5d 	bl	8002400 <ssd1306_DrawPixel>
 8002546:	e017      	b.n	8002578 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002548:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <ssd1306_WriteChar+0x11c>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	4413      	add	r3, r2
 8002554:	b2d8      	uxtb	r0, r3
 8002556:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <ssd1306_WriteChar+0x11c>)
 8002558:	885b      	ldrh	r3, [r3, #2]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4413      	add	r3, r2
 8002562:	b2d9      	uxtb	r1, r3
 8002564:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	f7ff ff44 	bl	8002400 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	3301      	adds	r3, #1
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	783b      	ldrb	r3, [r7, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4293      	cmp	r3, r2
 8002586:	d3c3      	bcc.n	8002510 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	787b      	ldrb	r3, [r7, #1]
 8002590:	461a      	mov	r2, r3
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4293      	cmp	r3, r2
 8002596:	d3ab      	bcc.n	80024f0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002598:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <ssd1306_WriteChar+0x11c>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	2a00      	cmp	r2, #0
 80025a0:	d005      	beq.n	80025ae <ssd1306_WriteChar+0x106>
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	3a20      	subs	r2, #32
 80025a8:	440a      	add	r2, r1
 80025aa:	7812      	ldrb	r2, [r2, #0]
 80025ac:	e000      	b.n	80025b0 <ssd1306_WriteChar+0x108>
 80025ae:	783a      	ldrb	r2, [r7, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b03      	ldr	r3, [pc, #12]	@ (80025c4 <ssd1306_WriteChar+0x11c>)
 80025b6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd90      	pop	{r4, r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200005e4 	.word	0x200005e4

080025c8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4638      	mov	r0, r7
 80025d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80025d6:	e013      	b.n	8002600 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	7818      	ldrb	r0, [r3, #0]
 80025dc:	7e3b      	ldrb	r3, [r7, #24]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	463b      	mov	r3, r7
 80025e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e4:	f7ff ff60 	bl	80024a8 <ssd1306_WriteChar>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d002      	beq.n	80025fa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	e008      	b.n	800260c <ssd1306_WriteString+0x44>
        }
        str++;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3301      	adds	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e7      	bne.n	80025d8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	781b      	ldrb	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	460a      	mov	r2, r1
 800261e:	71fb      	strb	r3, [r7, #7]
 8002620:	4613      	mov	r3, r2
 8002622:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	b29a      	uxth	r2, r3
 8002628:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <ssd1306_SetCursor+0x2c>)
 800262a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800262c:	79bb      	ldrb	r3, [r7, #6]
 800262e:	b29a      	uxth	r2, r3
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <ssd1306_SetCursor+0x2c>)
 8002632:	805a      	strh	r2, [r3, #2]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	200005e4 	.word	0x200005e4

08002644 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800264e:	2381      	movs	r3, #129	@ 0x81
 8002650:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fdf7 	bl	8002248 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fdf3 	bl	8002248 <ssd1306_WriteCommand>
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800267c:	23af      	movs	r3, #175	@ 0xaf
 800267e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <ssd1306_SetDisplayOn+0x38>)
 8002682:	2201      	movs	r2, #1
 8002684:	715a      	strb	r2, [r3, #5]
 8002686:	e004      	b.n	8002692 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002688:	23ae      	movs	r3, #174	@ 0xae
 800268a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <ssd1306_SetDisplayOn+0x38>)
 800268e:	2200      	movs	r2, #0
 8002690:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fdd7 	bl	8002248 <ssd1306_WriteCommand>
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200005e4 	.word	0x200005e4

080026a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ac:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <HAL_Init+0x40>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_Init+0x40>)
 80026be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <HAL_Init+0x40>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f94f 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 f808 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7ff faf2 	bl	8001cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f4:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <HAL_InitTick+0x54>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_InitTick+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f967 	bl	80029de <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00e      	b.n	8002738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d80a      	bhi.n	8002736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f000 f92f 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800272c:	4a06      	ldr	r2, [pc, #24]	@ (8002748 <HAL_InitTick+0x5c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000000 	.word	0x20000000
 8002744:	20000008 	.word	0x20000008
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_IncTick+0x20>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_IncTick+0x24>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <HAL_IncTick+0x24>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000008 	.word	0x20000008
 8002770:	200005ec 	.word	0x200005ec

08002774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_GetTick+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200005ec 	.word	0x200005ec

0800278c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff ffee 	bl	8002774 <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d005      	beq.n	80027b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a6:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <HAL_Delay+0x44>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027b2:	bf00      	nop
 80027b4:	f7ff ffde 	bl	8002774 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d8f7      	bhi.n	80027b4 <HAL_Delay+0x28>
  {
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000008 	.word	0x20000008

080027d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002806:	4a04      	ldr	r2, [pc, #16]	@ (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	@ (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	@ (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	@ (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	@ 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff8e 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff29 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff3e 	bl	800281c <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff8e 	bl	80028c8 <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5d 	bl	8002874 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff31 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e16b      	b.n	8002cec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a14:	2201      	movs	r2, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	f040 815a 	bne.w	8002ce6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d005      	beq.n	8002a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d130      	bne.n	8002aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 0201 	and.w	r2, r3, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d017      	beq.n	8002ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d123      	bne.n	8002b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	08da      	lsrs	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3208      	adds	r2, #8
 8002afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	08da      	lsrs	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0203 	and.w	r2, r3, #3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80b4 	beq.w	8002ce6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b60      	ldr	r3, [pc, #384]	@ (8002d04 <HAL_GPIO_Init+0x30c>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	4a5f      	ldr	r2, [pc, #380]	@ (8002d04 <HAL_GPIO_Init+0x30c>)
 8002b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d04 <HAL_GPIO_Init+0x30c>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d08 <HAL_GPIO_Init+0x310>)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_GPIO_Init+0x314>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02b      	beq.n	8002c1e <HAL_GPIO_Init+0x226>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a51      	ldr	r2, [pc, #324]	@ (8002d10 <HAL_GPIO_Init+0x318>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d025      	beq.n	8002c1a <HAL_GPIO_Init+0x222>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a50      	ldr	r2, [pc, #320]	@ (8002d14 <HAL_GPIO_Init+0x31c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01f      	beq.n	8002c16 <HAL_GPIO_Init+0x21e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d18 <HAL_GPIO_Init+0x320>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d019      	beq.n	8002c12 <HAL_GPIO_Init+0x21a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4e      	ldr	r2, [pc, #312]	@ (8002d1c <HAL_GPIO_Init+0x324>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0x216>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d20 <HAL_GPIO_Init+0x328>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_GPIO_Init+0x212>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8002d24 <HAL_GPIO_Init+0x32c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x20e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d28 <HAL_GPIO_Init+0x330>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_GPIO_Init+0x20a>
 8002bfe:	2307      	movs	r3, #7
 8002c00:	e00e      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c02:	2308      	movs	r3, #8
 8002c04:	e00c      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c06:	2306      	movs	r3, #6
 8002c08:	e00a      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	@ (8002d08 <HAL_GPIO_Init+0x310>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a32      	ldr	r2, [pc, #200]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b30      	ldr	r3, [pc, #192]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce0:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f ae90 	bls.w	8002a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40021400 	.word	0x40021400
 8002d24:	40021800 	.word	0x40021800
 8002d28:	40021c00 	.word	0x40021c00
 8002d2c:	40013c00 	.word	0x40013c00

08002d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e001      	b.n	8002d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d7c:	e003      	b.n	8002d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	619a      	str	r2, [r3, #24]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af02      	add	r7, sp, #8
 8002d98:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e059      	b.n	8002e58 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f007 ffa2 	bl	800ad08 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd2:	d102      	bne.n	8002dda <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 fdbb 	bl	800795a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7c1a      	ldrb	r2, [r3, #16]
 8002dec:	f88d 2000 	strb.w	r2, [sp]
 8002df0:	3304      	adds	r3, #4
 8002df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df4:	f004 fd3c 	bl	8007870 <USB_CoreInit>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e026      	b.n	8002e58 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f004 fdb3 	bl	800797c <USB_SetCurrentMode>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e017      	b.n	8002e58 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7c1a      	ldrb	r2, [r3, #16]
 8002e30:	f88d 2000 	strb.w	r2, [sp]
 8002e34:	3304      	adds	r3, #4
 8002e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e38:	f004 ff56 	bl	8007ce8 <USB_HostInit>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e004      	b.n	8002e58 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b08b      	sub	sp, #44	@ 0x2c
 8002e64:	af04      	add	r7, sp, #16
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	70fb      	strb	r3, [r7, #3]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70bb      	strb	r3, [r7, #2]
 8002e76:	4613      	mov	r3, r2
 8002e78:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002e7a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002e7c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_HCD_HC_Init+0x2c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e09d      	b.n	8002fc8 <HAL_HCD_HC_Init+0x168>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3319      	adds	r3, #25
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	787a      	ldrb	r2, [r7, #1]
 8002eba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3315      	adds	r3, #21
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3326      	adds	r3, #38	@ 0x26
 8002ee0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002ee4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	78bb      	ldrb	r3, [r7, #2]
 8002eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eee:	b2d8      	uxtb	r0, r3
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3316      	adds	r3, #22
 8002efe:	4602      	mov	r2, r0
 8002f00:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fbc8 	bl	800369c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002f0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0a      	bge.n	8002f2a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	3317      	adds	r3, #23
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e009      	b.n	8002f3e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3317      	adds	r3, #23
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f005 f834 	bl	8007fb0 <USB_GetHostSpeed>
 8002f48:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002f4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10b      	bne.n	8002f6a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002f52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_HCD_HC_Init+0x10a>
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2bbc      	cmp	r3, #188	@ 0xbc
 8002f64:	d901      	bls.n	8002f6a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002f66:	23bc      	movs	r3, #188	@ 0xbc
 8002f68:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3318      	adds	r3, #24
 8002f7a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002f7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	b298      	uxth	r0, r3
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	3328      	adds	r3, #40	@ 0x28
 8002f94:	4602      	mov	r2, r0
 8002f96:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	787c      	ldrb	r4, [r7, #1]
 8002fa2:	78ba      	ldrb	r2, [r7, #2]
 8002fa4:	78f9      	ldrb	r1, [r7, #3]
 8002fa6:	9302      	str	r3, [sp, #8]
 8002fa8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	f005 f823 	bl	8008000 <USB_HC_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_HCD_HC_Halt+0x1e>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e00f      	b.n	800300e <HAL_HCD_HC_Halt+0x3e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f005 fbb5 	bl	800876e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	70fb      	strb	r3, [r7, #3]
 800302a:	460b      	mov	r3, r1
 800302c:	70bb      	strb	r3, [r7, #2]
 800302e:	4613      	mov	r3, r2
 8003030:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3317      	adds	r3, #23
 8003042:	78ba      	ldrb	r2, [r7, #2]
 8003044:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3326      	adds	r3, #38	@ 0x26
 8003056:	787a      	ldrb	r2, [r7, #1]
 8003058:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800305a:	7c3b      	ldrb	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d114      	bne.n	800308a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	332a      	adds	r3, #42	@ 0x2a
 8003070:	2203      	movs	r2, #3
 8003072:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3319      	adds	r3, #25
 8003084:	7f3a      	ldrb	r2, [r7, #28]
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e009      	b.n	800309e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	332a      	adds	r3, #42	@ 0x2a
 800309a:	2202      	movs	r2, #2
 800309c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800309e:	787b      	ldrb	r3, [r7, #1]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	f200 8102 	bhi.w	80032aa <HAL_HCD_HC_SubmitRequest+0x292>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <HAL_HCD_HC_SubmitRequest+0x94>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	08003295 	.word	0x08003295
 80030b4:	08003181 	.word	0x08003181
 80030b8:	0800320b 	.word	0x0800320b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80030bc:	7c3b      	ldrb	r3, [r7, #16]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	f040 80f5 	bne.w	80032ae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80030c4:	78bb      	ldrb	r3, [r7, #2]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d12d      	bne.n	8003126 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80030ca:	8b3b      	ldrh	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d109      	bne.n	80030e4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	333d      	adds	r3, #61	@ 0x3d
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	333d      	adds	r3, #61	@ 0x3d
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	332a      	adds	r3, #42	@ 0x2a
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800310e:	e0ce      	b.n	80032ae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	332a      	adds	r3, #42	@ 0x2a
 8003120:	2202      	movs	r2, #2
 8003122:	701a      	strb	r2, [r3, #0]
      break;
 8003124:	e0c3      	b.n	80032ae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	331a      	adds	r3, #26
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b01      	cmp	r3, #1
 800313a:	f040 80b8 	bne.w	80032ae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	333c      	adds	r3, #60	@ 0x3c
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	332a      	adds	r3, #42	@ 0x2a
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
      break;
 8003168:	e0a1      	b.n	80032ae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	332a      	adds	r3, #42	@ 0x2a
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
      break;
 800317e:	e096      	b.n	80032ae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003180:	78bb      	ldrb	r3, [r7, #2]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d120      	bne.n	80031c8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	333d      	adds	r3, #61	@ 0x3d
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	332a      	adds	r3, #42	@ 0x2a
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031b0:	e07e      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	332a      	adds	r3, #42	@ 0x2a
 80031c2:	2202      	movs	r2, #2
 80031c4:	701a      	strb	r2, [r3, #0]
      break;
 80031c6:	e073      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	333c      	adds	r3, #60	@ 0x3c
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	332a      	adds	r3, #42	@ 0x2a
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
      break;
 80031f2:	e05d      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	332a      	adds	r3, #42	@ 0x2a
 8003204:	2202      	movs	r2, #2
 8003206:	701a      	strb	r2, [r3, #0]
      break;
 8003208:	e052      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800320a:	78bb      	ldrb	r3, [r7, #2]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d120      	bne.n	8003252 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333d      	adds	r3, #61	@ 0x3d
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	332a      	adds	r3, #42	@ 0x2a
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800323a:	e039      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	332a      	adds	r3, #42	@ 0x2a
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]
      break;
 8003250:	e02e      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	333c      	adds	r3, #60	@ 0x3c
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	332a      	adds	r3, #42	@ 0x2a
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
      break;
 800327c:	e018      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	332a      	adds	r3, #42	@ 0x2a
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]
      break;
 8003292:	e00d      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	332a      	adds	r3, #42	@ 0x2a
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
      break;
 80032a8:	e002      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80032ae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	332c      	adds	r3, #44	@ 0x2c
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	8b39      	ldrh	r1, [r7, #24]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4403      	add	r3, r0
 80032d4:	3334      	adds	r3, #52	@ 0x34
 80032d6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	334c      	adds	r3, #76	@ 0x4c
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3338      	adds	r3, #56	@ 0x38
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3315      	adds	r3, #21
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	334d      	adds	r3, #77	@ 0x4d
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	3310      	adds	r3, #16
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	1d19      	adds	r1, r3, #4
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	799b      	ldrb	r3, [r3, #6]
 8003342:	461a      	mov	r2, r3
 8003344:	f004 ff88 	bl	8008258 <USB_HC_StartXfer>
 8003348:	4603      	mov	r3, r0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop

08003354 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f004 fc7c 	bl	8007c68 <USB_GetMode>
 8003370:	4603      	mov	r3, r0
 8003372:	2b01      	cmp	r3, #1
 8003374:	f040 80fb 	bne.w	800356e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f004 fc3f 	bl	8007c00 <USB_ReadInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80f1 	beq.w	800356c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f004 fc36 	bl	8007c00 <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800339a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800339e:	d104      	bne.n	80033aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80033a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 fc26 	bl	8007c00 <USB_ReadInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033be:	d104      	bne.n	80033ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 fc16 	bl	8007c00 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033de:	d104      	bne.n	80033ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80033e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 fc06 	bl	8007c00 <USB_ReadInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d103      	bne.n	8003406 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2202      	movs	r2, #2
 8003404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f004 fbf8 	bl	8007c00 <USB_ReadInterrupts>
 8003410:	4603      	mov	r3, r0
 8003412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800341a:	d120      	bne.n	800345e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003424:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d113      	bne.n	800345e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003436:	2110      	movs	r1, #16
 8003438:	6938      	ldr	r0, [r7, #16]
 800343a:	f004 faeb 	bl	8007a14 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800343e:	6938      	ldr	r0, [r7, #16]
 8003440:	f004 fb1a 	bl	8007a78 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7a5b      	ldrb	r3, [r3, #9]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d105      	bne.n	8003458 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2101      	movs	r1, #1
 8003452:	4618      	mov	r0, r3
 8003454:	f004 fd0c 	bl	8007e70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f007 fcd3 	bl	800ae04 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f004 fbcc 	bl	8007c00 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800346e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003472:	d102      	bne.n	800347a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f001 fd33 	bl	8004ee0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fbbe 	bl	8007c00 <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b08      	cmp	r3, #8
 800348c:	d106      	bne.n	800349c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f007 fc9c 	bl	800adcc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2208      	movs	r2, #8
 800349a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f004 fbad 	bl	8007c00 <USB_ReadInterrupts>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034b0:	d139      	bne.n	8003526 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f005 f948 	bl	800874c <USB_HC_ReadInterrupt>
 80034bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e025      	b.n	8003510 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d018      	beq.n	800350a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ee:	d106      	bne.n	80034fe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f905 	bl	8003706 <HCD_HC_IN_IRQHandler>
 80034fc:	e005      	b.n	800350a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 ff67 	bl	80043d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3301      	adds	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	795b      	ldrb	r3, [r3, #5]
 8003514:	461a      	mov	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4293      	cmp	r3, r2
 800351a:	d3d3      	bcc.n	80034c4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f004 fb68 	bl	8007c00 <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b10      	cmp	r3, #16
 8003538:	d101      	bne.n	800353e <HAL_HCD_IRQHandler+0x1ea>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_HCD_IRQHandler+0x1ec>
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d014      	beq.n	800356e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0210 	bic.w	r2, r2, #16
 8003552:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f001 fbe4 	bl	8004d22 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0210 	orr.w	r2, r2, #16
 8003568:	619a      	str	r2, [r3, #24]
 800356a:	e000      	b.n	800356e <HAL_HCD_IRQHandler+0x21a>
      return;
 800356c:	bf00      	nop
    }
  }
}
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_HCD_Start+0x16>
 8003586:	2302      	movs	r3, #2
 8003588:	e013      	b.n	80035b2 <HAL_HCD_Start+0x3e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f004 fcd0 	bl	8007f3e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f004 f9c8 	bl	8007938 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_HCD_Stop+0x16>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e00d      	b.n	80035ec <HAL_HCD_Stop+0x32>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f005 fa23 	bl	8008a28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f004 fc72 	bl	8007eea <USB_ResetPort>
 8003606:	4603      	mov	r3, r0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	334c      	adds	r3, #76	@ 0x4c
 800362c:	781b      	ldrb	r3, [r3, #0]
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3338      	adds	r3, #56	@ 0x38
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f004 fcb4 	bl	8007fde <USB_GetCurrentFrame>
 8003676:	4603      	mov	r3, r0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f004 fc8f 	bl	8007fb0 <USB_GetHostSpeed>
 8003692:	4603      	mov	r3, r0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	331a      	adds	r3, #26
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	331b      	adds	r3, #27
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3325      	adds	r3, #37	@ 0x25
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3324      	adds	r3, #36	@ 0x24
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f004 fa7e 	bl	8007c26 <USB_ReadChInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d11a      	bne.n	800376a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003740:	461a      	mov	r2, r3
 8003742:	2304      	movs	r3, #4
 8003744:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	334d      	adds	r3, #77	@ 0x4d
 8003756:	2207      	movs	r2, #7
 8003758:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f005 f803 	bl	800876e <USB_HC_Halt>
 8003768:	e09e      	b.n	80038a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f004 fa57 	bl	8007c26 <USB_ReadChInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003782:	d11b      	bne.n	80037bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003790:	461a      	mov	r2, r3
 8003792:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003796:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	334d      	adds	r3, #77	@ 0x4d
 80037a8:	2208      	movs	r2, #8
 80037aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 ffda 	bl	800876e <USB_HC_Halt>
 80037ba:	e075      	b.n	80038a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fa2e 	bl	8007c26 <USB_ReadChInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d11a      	bne.n	800380a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	461a      	mov	r2, r3
 80037e2:	2308      	movs	r3, #8
 80037e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	334d      	adds	r3, #77	@ 0x4d
 80037f6:	2206      	movs	r2, #6
 80037f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f004 ffb3 	bl	800876e <USB_HC_Halt>
 8003808:	e04e      	b.n	80038a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f004 fa07 	bl	8007c26 <USB_ReadChInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003822:	d11b      	bne.n	800385c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003830:	461a      	mov	r2, r3
 8003832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003836:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	334d      	adds	r3, #77	@ 0x4d
 8003848:	2209      	movs	r2, #9
 800384a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f004 ff8a 	bl	800876e <USB_HC_Halt>
 800385a:	e025      	b.n	80038a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f004 f9de 	bl	8007c26 <USB_ReadChInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	2b80      	cmp	r3, #128	@ 0x80
 8003872:	d119      	bne.n	80038a8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	2380      	movs	r3, #128	@ 0x80
 8003884:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	334d      	adds	r3, #77	@ 0x4d
 8003896:	2207      	movs	r2, #7
 8003898:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f004 ff63 	bl	800876e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 f9b8 	bl	8007c26 <USB_ReadChInterrupts>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c0:	d112      	bne.n	80038e8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 ff4f 	bl	800876e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038dc:	461a      	mov	r2, r3
 80038de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038e2:	6093      	str	r3, [r2, #8]
 80038e4:	f000 bd75 	b.w	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f004 f998 	bl	8007c26 <USB_ReadChInterrupts>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	f040 8128 	bne.w	8003b52 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4413      	add	r3, r2
 800390a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390e:	461a      	mov	r2, r3
 8003910:	2320      	movs	r3, #32
 8003912:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	331b      	adds	r3, #27
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d119      	bne.n	800395e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	331b      	adds	r3, #27
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	0151      	lsls	r1, r2, #5
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	440a      	add	r2, r1
 8003954:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	799b      	ldrb	r3, [r3, #6]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01b      	beq.n	800399e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	3330      	adds	r3, #48	@ 0x30
 8003976:	6819      	ldr	r1, [r3, #0]
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	1ac9      	subs	r1, r1, r3
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4403      	add	r3, r0
 800399a:	3338      	adds	r3, #56	@ 0x38
 800399c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	334d      	adds	r3, #77	@ 0x4d
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3344      	adds	r3, #68	@ 0x44
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d2:	461a      	mov	r2, r3
 80039d4:	2301      	movs	r3, #1
 80039d6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3326      	adds	r3, #38	@ 0x26
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3326      	adds	r3, #38	@ 0x26
 80039fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d110      	bne.n	8003a26 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 feae 	bl	800876e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2310      	movs	r3, #16
 8003a22:	6093      	str	r3, [r2, #8]
 8003a24:	e03d      	b.n	8003aa2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3326      	adds	r3, #38	@ 0x26
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d00a      	beq.n	8003a52 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	3326      	adds	r3, #38	@ 0x26
 8003a4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d127      	bne.n	8003aa2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a70:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	334c      	adds	r3, #76	@ 0x4c
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	334c      	adds	r3, #76	@ 0x4c
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f007 f9bf 	bl	800ae20 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	799b      	ldrb	r3, [r3, #6]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d13b      	bne.n	8003b22 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3338      	adds	r3, #56	@ 0x38
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4403      	add	r3, r0
 8003aca:	3328      	adds	r3, #40	@ 0x28
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	440b      	add	r3, r1
 8003ad0:	1e59      	subs	r1, r3, #1
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4403      	add	r3, r0
 8003ae0:	3328      	adds	r3, #40	@ 0x28
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8470 	beq.w	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	333c      	adds	r3, #60	@ 0x3c
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2d8      	uxtb	r0, r3
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	333c      	adds	r3, #60	@ 0x3c
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	f000 bc58 	b.w	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	333c      	adds	r3, #60	@ 0x3c
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	f083 0301 	eor.w	r3, r3, #1
 8003b3a:	b2d8      	uxtb	r0, r3
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	333c      	adds	r3, #60	@ 0x3c
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	f000 bc40 	b.w	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 f863 	bl	8007c26 <USB_ReadChInterrupts>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d131      	bne.n	8003bce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b76:	461a      	mov	r2, r3
 8003b78:	2320      	movs	r3, #32
 8003b7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	331a      	adds	r3, #26
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f040 841f 	bne.w	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	331b      	adds	r3, #27
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	334d      	adds	r3, #77	@ 0x4d
 8003bb8:	2203      	movs	r2, #3
 8003bba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 fdd2 	bl	800876e <USB_HC_Halt>
 8003bca:	f000 bc02 	b.w	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 f825 	bl	8007c26 <USB_ReadChInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	f040 8305 	bne.w	80041f2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	334d      	adds	r3, #77	@ 0x4d
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d114      	bne.n	8003c3a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334d      	adds	r3, #77	@ 0x4d
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	334c      	adds	r3, #76	@ 0x4c
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e2cc      	b.n	80041d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	334d      	adds	r3, #77	@ 0x4d
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d114      	bne.n	8003c7a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	334d      	adds	r3, #77	@ 0x4d
 8003c60:	2202      	movs	r2, #2
 8003c62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334c      	adds	r3, #76	@ 0x4c
 8003c74:	2205      	movs	r2, #5
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	e2ac      	b.n	80041d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	334d      	adds	r3, #77	@ 0x4d
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b07      	cmp	r3, #7
 8003c8e:	d00b      	beq.n	8003ca8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	334d      	adds	r3, #77	@ 0x4d
 8003ca0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ca2:	2b09      	cmp	r3, #9
 8003ca4:	f040 80a6 	bne.w	8003df4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	334d      	adds	r3, #77	@ 0x4d
 8003cb8:	2202      	movs	r2, #2
 8003cba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3344      	adds	r3, #68	@ 0x44
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4403      	add	r3, r0
 8003cdc:	3344      	adds	r3, #68	@ 0x44
 8003cde:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3344      	adds	r3, #68	@ 0x44
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d943      	bls.n	8003d7e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3344      	adds	r3, #68	@ 0x44
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	331a      	adds	r3, #26
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d123      	bne.n	8003d68 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	331b      	adds	r3, #27
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	331c      	adds	r3, #28
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	0151      	lsls	r1, r2, #5
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d66:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	334c      	adds	r3, #76	@ 0x4c
 8003d78:	2204      	movs	r2, #4
 8003d7a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d7c:	e229      	b.n	80041d2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	334c      	adds	r3, #76	@ 0x4c
 8003d8e:	2202      	movs	r2, #2
 8003d90:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3326      	adds	r3, #38	@ 0x26
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00b      	beq.n	8003dc0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3326      	adds	r3, #38	@ 0x26
 8003db8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	f040 8209 	bne.w	80041d2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dd6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003dde:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dec:	461a      	mov	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003df2:	e1ee      	b.n	80041d2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	334d      	adds	r3, #77	@ 0x4d
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	f040 80c8 	bne.w	8003f9c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	334d      	adds	r3, #77	@ 0x4d
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	331b      	adds	r3, #27
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	f040 81ce 	bne.w	80041d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	3326      	adds	r3, #38	@ 0x26
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d16b      	bne.n	8003f26 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3348      	adds	r3, #72	@ 0x48
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	1c59      	adds	r1, r3, #1
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4403      	add	r3, r0
 8003e6e:	3348      	adds	r3, #72	@ 0x48
 8003e70:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3348      	adds	r3, #72	@ 0x48
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d943      	bls.n	8003f10 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	3348      	adds	r3, #72	@ 0x48
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	331b      	adds	r3, #27
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3344      	adds	r3, #68	@ 0x44
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d809      	bhi.n	8003eda <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	331c      	adds	r3, #28
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	334c      	adds	r3, #76	@ 0x4c
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e014      	b.n	8003f3a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	334c      	adds	r3, #76	@ 0x4c
 8003f20:	2202      	movs	r2, #2
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e009      	b.n	8003f3a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	334c      	adds	r3, #76	@ 0x4c
 8003f36:	2202      	movs	r2, #2
 8003f38:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	3326      	adds	r3, #38	@ 0x26
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00b      	beq.n	8003f68 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3326      	adds	r3, #38	@ 0x26
 8003f60:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	f040 8136 	bne.w	80041d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f7e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f86:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f94:	461a      	mov	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e11b      	b.n	80041d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	334d      	adds	r3, #77	@ 0x4d
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	f040 8081 	bne.w	80040b6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	334d      	adds	r3, #77	@ 0x4d
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	331b      	adds	r3, #27
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	f040 80fa 	bne.w	80041d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	334c      	adds	r3, #76	@ 0x4c
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	440a      	add	r2, r1
 800400a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800400e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004012:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	0151      	lsls	r1, r2, #5
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	440a      	add	r2, r1
 800402a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800402e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004032:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	0151      	lsls	r1, r2, #5
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	440a      	add	r2, r1
 800404a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800404e:	f023 0320 	bic.w	r3, r3, #32
 8004052:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	3326      	adds	r3, #38	@ 0x26
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3326      	adds	r3, #38	@ 0x26
 800407a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800407c:	2b02      	cmp	r3, #2
 800407e:	f040 80a9 	bne.w	80041d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004098:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040a0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	e08e      	b.n	80041d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334d      	adds	r3, #77	@ 0x4d
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d143      	bne.n	8004154 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	2202      	movs	r2, #2
 80040de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	334c      	adds	r3, #76	@ 0x4c
 80040f0:	2202      	movs	r2, #2
 80040f2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	3326      	adds	r3, #38	@ 0x26
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	3326      	adds	r3, #38	@ 0x26
 800411a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800411c:	2b02      	cmp	r3, #2
 800411e:	d159      	bne.n	80041d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004136:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800413e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4413      	add	r3, r2
 8004148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800414c:	461a      	mov	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e03f      	b.n	80041d4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	334d      	adds	r3, #77	@ 0x4d
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d126      	bne.n	80041b8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	334d      	adds	r3, #77	@ 0x4d
 800417a:	2202      	movs	r2, #2
 800417c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3344      	adds	r3, #68	@ 0x44
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1c59      	adds	r1, r3, #1
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4403      	add	r3, r0
 800419e:	3344      	adds	r3, #68	@ 0x44
 80041a0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	334c      	adds	r3, #76	@ 0x4c
 80041b2:	2204      	movs	r2, #4
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e00d      	b.n	80041d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	334d      	adds	r3, #77	@ 0x4d
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	f000 8100 	beq.w	80043d0 <HCD_HC_IN_IRQHandler+0xcca>
 80041d0:	e000      	b.n	80041d4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041d2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	334c      	adds	r3, #76	@ 0x4c
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f006 fe18 	bl	800ae20 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041f0:	e0ef      	b.n	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 fd13 	bl	8007c26 <USB_ReadChInterrupts>
 8004200:	4603      	mov	r3, r0
 8004202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004206:	2b40      	cmp	r3, #64	@ 0x40
 8004208:	d12f      	bne.n	800426a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4413      	add	r3, r2
 8004212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004216:	461a      	mov	r2, r3
 8004218:	2340      	movs	r3, #64	@ 0x40
 800421a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334d      	adds	r3, #77	@ 0x4d
 800422c:	2205      	movs	r2, #5
 800422e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	331a      	adds	r3, #26
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	3344      	adds	r3, #68	@ 0x44
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f004 fa83 	bl	800876e <USB_HC_Halt>
 8004268:	e0b3      	b.n	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f003 fcd7 	bl	8007c26 <USB_ReadChInterrupts>
 8004278:	4603      	mov	r3, r0
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	f040 80a7 	bne.w	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	3326      	adds	r3, #38	@ 0x26
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b03      	cmp	r3, #3
 8004298:	d11b      	bne.n	80042d2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3344      	adds	r3, #68	@ 0x44
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	334d      	adds	r3, #77	@ 0x4d
 80042be:	2204      	movs	r2, #4
 80042c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f004 fa4f 	bl	800876e <USB_HC_Halt>
 80042d0:	e03f      	b.n	8004352 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	3326      	adds	r3, #38	@ 0x26
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	3326      	adds	r3, #38	@ 0x26
 80042f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d129      	bne.n	8004352 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3344      	adds	r3, #68	@ 0x44
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	799b      	ldrb	r3, [r3, #6]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HCD_HC_IN_IRQHandler+0xc2a>
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	331b      	adds	r3, #27
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d110      	bne.n	8004352 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	334d      	adds	r3, #77	@ 0x4d
 8004340:	2204      	movs	r2, #4
 8004342:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f004 fa0e 	bl	800876e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	331b      	adds	r3, #27
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d129      	bne.n	80043bc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	331b      	adds	r3, #27
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	440a      	add	r2, r1
 8004392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043b6:	f043 0320 	orr.w	r3, r3, #32
 80043ba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c8:	461a      	mov	r2, r3
 80043ca:	2310      	movs	r3, #16
 80043cc:	6093      	str	r3, [r2, #8]
 80043ce:	e000      	b.n	80043d2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80043d0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f003 fc15 	bl	8007c26 <USB_ReadChInterrupts>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d11b      	bne.n	800443e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	2304      	movs	r3, #4
 8004416:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	2207      	movs	r2, #7
 800442a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f004 f99a 	bl	800876e <USB_HC_Halt>
 800443a:	f000 bc6f 	b.w	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f003 fbed 	bl	8007c26 <USB_ReadChInterrupts>
 800444c:	4603      	mov	r3, r0
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b20      	cmp	r3, #32
 8004454:	f040 8082 	bne.w	800455c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004464:	461a      	mov	r2, r3
 8004466:	2320      	movs	r3, #32
 8004468:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	3319      	adds	r3, #25
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d124      	bne.n	80044ca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	3319      	adds	r3, #25
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	334c      	adds	r3, #76	@ 0x4c
 80044a4:	2202      	movs	r2, #2
 80044a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	334d      	adds	r3, #77	@ 0x4d
 80044b8:	2203      	movs	r2, #3
 80044ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f004 f952 	bl	800876e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	331a      	adds	r3, #26
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f040 841d 	bne.w	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	331b      	adds	r3, #27
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8411 	bne.w	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	3326      	adds	r3, #38	@ 0x26
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d009      	beq.n	8004524 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	331b      	adds	r3, #27
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	334d      	adds	r3, #77	@ 0x4d
 8004534:	2203      	movs	r2, #3
 8004536:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f004 f914 	bl	800876e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3344      	adds	r3, #68	@ 0x44
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e3df      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	4611      	mov	r1, r2
 8004564:	4618      	mov	r0, r3
 8004566:	f003 fb5e 	bl	8007c26 <USB_ReadChInterrupts>
 800456a:	4603      	mov	r3, r0
 800456c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004574:	d111      	bne.n	800459a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004582:	461a      	mov	r2, r3
 8004584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004588:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f004 f8eb 	bl	800876e <USB_HC_Halt>
 8004598:	e3c0      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f003 fb3f 	bl	8007c26 <USB_ReadChInterrupts>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d168      	bne.n	8004684 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3344      	adds	r3, #68	@ 0x44
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f003 fb29 	bl	8007c26 <USB_ReadChInterrupts>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045da:	2b40      	cmp	r3, #64	@ 0x40
 80045dc:	d112      	bne.n	8004604 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3319      	adds	r3, #25
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fe:	461a      	mov	r2, r3
 8004600:	2340      	movs	r3, #64	@ 0x40
 8004602:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	331b      	adds	r3, #27
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d019      	beq.n	800464e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	331b      	adds	r3, #27
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	440a      	add	r2, r1
 8004644:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800465a:	461a      	mov	r2, r3
 800465c:	2301      	movs	r3, #1
 800465e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	334d      	adds	r3, #77	@ 0x4d
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f004 f876 	bl	800876e <USB_HC_Halt>
 8004682:	e34b      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f003 faca 	bl	8007c26 <USB_ReadChInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d139      	bne.n	8004710 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334d      	adds	r3, #77	@ 0x4d
 80046ac:	2205      	movs	r2, #5
 80046ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	331a      	adds	r3, #26
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3319      	adds	r3, #25
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	3344      	adds	r3, #68	@ 0x44
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 f839 	bl	800876e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004708:	461a      	mov	r2, r3
 800470a:	2340      	movs	r3, #64	@ 0x40
 800470c:	6093      	str	r3, [r2, #8]
 800470e:	e305      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	4611      	mov	r1, r2
 8004718:	4618      	mov	r0, r3
 800471a:	f003 fa84 	bl	8007c26 <USB_ReadChInterrupts>
 800471e:	4603      	mov	r3, r0
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d11a      	bne.n	800475e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004734:	461a      	mov	r2, r3
 8004736:	2308      	movs	r3, #8
 8004738:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	334d      	adds	r3, #77	@ 0x4d
 800474a:	2206      	movs	r2, #6
 800474c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f004 f809 	bl	800876e <USB_HC_Halt>
 800475c:	e2de      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	4611      	mov	r1, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f003 fa5d 	bl	8007c26 <USB_ReadChInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b10      	cmp	r3, #16
 8004774:	d144      	bne.n	8004800 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	3344      	adds	r3, #68	@ 0x44
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	334d      	adds	r3, #77	@ 0x4d
 800479a:	2204      	movs	r2, #4
 800479c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	3319      	adds	r3, #25
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d114      	bne.n	80047de <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	3318      	adds	r3, #24
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	3319      	adds	r3, #25
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f003 ffc1 	bl	800876e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f8:	461a      	mov	r2, r3
 80047fa:	2310      	movs	r3, #16
 80047fc:	6093      	str	r3, [r2, #8]
 80047fe:	e28d      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fa0c 	bl	8007c26 <USB_ReadChInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004814:	2b80      	cmp	r3, #128	@ 0x80
 8004816:	d169      	bne.n	80048ec <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	799b      	ldrb	r3, [r3, #6]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d111      	bne.n	8004844 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	334d      	adds	r3, #77	@ 0x4d
 8004830:	2207      	movs	r2, #7
 8004832:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	4611      	mov	r1, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f003 ff96 	bl	800876e <USB_HC_Halt>
 8004842:	e049      	b.n	80048d8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	3344      	adds	r3, #68	@ 0x44
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	1c59      	adds	r1, r3, #1
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4403      	add	r3, r0
 8004864:	3344      	adds	r3, #68	@ 0x44
 8004866:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	3344      	adds	r3, #68	@ 0x44
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d922      	bls.n	80048c4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	3344      	adds	r3, #68	@ 0x44
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	334c      	adds	r3, #76	@ 0x4c
 80048a2:	2204      	movs	r2, #4
 80048a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	334c      	adds	r3, #76	@ 0x4c
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f006 faaf 	bl	800ae20 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048c2:	e009      	b.n	80048d8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	334c      	adds	r3, #76	@ 0x4c
 80048d4:	2202      	movs	r2, #2
 80048d6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e4:	461a      	mov	r2, r3
 80048e6:	2380      	movs	r3, #128	@ 0x80
 80048e8:	6093      	str	r3, [r2, #8]
 80048ea:	e217      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f003 f996 	bl	8007c26 <USB_ReadChInterrupts>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004904:	d11b      	bne.n	800493e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	334d      	adds	r3, #77	@ 0x4d
 8004916:	2209      	movs	r2, #9
 8004918:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f003 ff23 	bl	800876e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004934:	461a      	mov	r2, r3
 8004936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800493a:	6093      	str	r3, [r2, #8]
 800493c:	e1ee      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f003 f96d 	bl	8007c26 <USB_ReadChInterrupts>
 800494c:	4603      	mov	r3, r0
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	f040 81df 	bne.w	8004d16 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004964:	461a      	mov	r2, r3
 8004966:	2302      	movs	r3, #2
 8004968:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	334d      	adds	r3, #77	@ 0x4d
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	f040 8093 	bne.w	8004aa8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	334d      	adds	r3, #77	@ 0x4d
 8004992:	2202      	movs	r2, #2
 8004994:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	334c      	adds	r3, #76	@ 0x4c
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	3326      	adds	r3, #38	@ 0x26
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d00b      	beq.n	80049d8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	3326      	adds	r3, #38	@ 0x26
 80049d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	f040 8190 	bne.w	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	799b      	ldrb	r3, [r3, #6]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d115      	bne.n	8004a0c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	333d      	adds	r3, #61	@ 0x3d
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	f083 0301 	eor.w	r3, r3, #1
 80049f8:	b2d8      	uxtb	r0, r3
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	333d      	adds	r3, #61	@ 0x3d
 8004a08:	4602      	mov	r2, r0
 8004a0a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	799b      	ldrb	r3, [r3, #6]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 8171 	bne.w	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3334      	adds	r3, #52	@ 0x34
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8165 	beq.w	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3334      	adds	r3, #52	@ 0x34
 8004a3e:	6819      	ldr	r1, [r3, #0]
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4403      	add	r3, r0
 8004a4e:	3328      	adds	r3, #40	@ 0x28
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	440b      	add	r3, r1
 8004a54:	1e59      	subs	r1, r3, #1
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4403      	add	r3, r0
 8004a64:	3328      	adds	r3, #40	@ 0x28
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a6c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 813f 	beq.w	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004a7a:	78fa      	ldrb	r2, [r7, #3]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	333d      	adds	r3, #61	@ 0x3d
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	f083 0301 	eor.w	r3, r3, #1
 8004a92:	b2d8      	uxtb	r0, r3
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	333d      	adds	r3, #61	@ 0x3d
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e127      	b.n	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	334d      	adds	r3, #77	@ 0x4d
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d120      	bne.n	8004b00 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	334d      	adds	r3, #77	@ 0x4d
 8004ace:	2202      	movs	r2, #2
 8004ad0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	331b      	adds	r3, #27
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 8107 	bne.w	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	334c      	adds	r3, #76	@ 0x4c
 8004afa:	2202      	movs	r2, #2
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e0fb      	b.n	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	334d      	adds	r3, #77	@ 0x4d
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d13a      	bne.n	8004b8c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	334d      	adds	r3, #77	@ 0x4d
 8004b26:	2202      	movs	r2, #2
 8004b28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334c      	adds	r3, #76	@ 0x4c
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	331b      	adds	r3, #27
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 80d1 	bne.w	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	331b      	adds	r3, #27
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b88:	6053      	str	r3, [r2, #4]
 8004b8a:	e0b5      	b.n	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	334d      	adds	r3, #77	@ 0x4d
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d114      	bne.n	8004bcc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	334d      	adds	r3, #77	@ 0x4d
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	334c      	adds	r3, #76	@ 0x4c
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e095      	b.n	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	334d      	adds	r3, #77	@ 0x4d
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d114      	bne.n	8004c0c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	334d      	adds	r3, #77	@ 0x4d
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	334c      	adds	r3, #76	@ 0x4c
 8004c06:	2205      	movs	r2, #5
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e075      	b.n	8004cf8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	334d      	adds	r3, #77	@ 0x4d
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b07      	cmp	r3, #7
 8004c20:	d00a      	beq.n	8004c38 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	334d      	adds	r3, #77	@ 0x4d
 8004c32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c34:	2b09      	cmp	r3, #9
 8004c36:	d170      	bne.n	8004d1a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	334d      	adds	r3, #77	@ 0x4d
 8004c48:	2202      	movs	r2, #2
 8004c4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c4c:	78fa      	ldrb	r2, [r7, #3]
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	3344      	adds	r3, #68	@ 0x44
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4403      	add	r3, r0
 8004c6c:	3344      	adds	r3, #68	@ 0x44
 8004c6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3344      	adds	r3, #68	@ 0x44
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d914      	bls.n	8004cb0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	3344      	adds	r3, #68	@ 0x44
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	334c      	adds	r3, #76	@ 0x4c
 8004caa:	2204      	movs	r2, #4
 8004cac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cae:	e022      	b.n	8004cf6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	334c      	adds	r3, #76	@ 0x4c
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cda:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ce2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cf6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	334c      	adds	r3, #76	@ 0x4c
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f006 f886 	bl	800ae20 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d14:	e002      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004d1a:	bf00      	nop
  }
}
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08a      	sub	sp, #40	@ 0x28
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	0c5b      	lsrs	r3, r3, #17
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d56:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d004      	beq.n	8004d68 <HCD_RXQLVL_IRQHandler+0x46>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b05      	cmp	r3, #5
 8004d62:	f000 80b6 	beq.w	8004ed2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004d66:	e0b7      	b.n	8004ed8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80b3 	beq.w	8004ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	332c      	adds	r3, #44	@ 0x2c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80a7 	beq.w	8004ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	3338      	adds	r3, #56	@ 0x38
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	18d1      	adds	r1, r2, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4403      	add	r3, r0
 8004dac:	3334      	adds	r3, #52	@ 0x34
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4299      	cmp	r1, r3
 8004db2:	f200 8083 	bhi.w	8004ebc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	332c      	adds	r3, #44	@ 0x2c
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	b292      	uxth	r2, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f002 febd 	bl	8007b50 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	332c      	adds	r3, #44	@ 0x2c
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	18d1      	adds	r1, r2, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4403      	add	r3, r0
 8004dfa:	332c      	adds	r3, #44	@ 0x2c
 8004dfc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4613      	mov	r3, r2
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	3338      	adds	r3, #56	@ 0x38
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	18d1      	adds	r1, r2, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4403      	add	r3, r0
 8004e22:	3338      	adds	r3, #56	@ 0x38
 8004e24:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	0cdb      	lsrs	r3, r3, #19
 8004e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4613      	mov	r3, r2
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	3328      	adds	r3, #40	@ 0x28
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d13f      	bne.n	8004ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d03c      	beq.n	8004ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	333c      	adds	r3, #60	@ 0x3c
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f083 0301 	eor.w	r3, r3, #1
 8004ea4:	b2d8      	uxtb	r0, r3
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	333c      	adds	r3, #60	@ 0x3c
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	e00c      	b.n	8004ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	334c      	adds	r3, #76	@ 0x4c
 8004ecc:	2204      	movs	r2, #4
 8004ece:	701a      	strb	r2, [r3, #0]
      break;
 8004ed0:	e001      	b.n	8004ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e000      	b.n	8004ed8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004ed6:	bf00      	nop
  }
}
 8004ed8:	bf00      	nop
 8004eda:	3728      	adds	r7, #40	@ 0x28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004f0c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d10b      	bne.n	8004f30 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d102      	bne.n	8004f28 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f005 ff60 	bl	800ade8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f043 0302 	orr.w	r3, r3, #2
 8004f2e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d132      	bne.n	8004fa0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f043 0308 	orr.w	r3, r3, #8
 8004f40:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d126      	bne.n	8004f9a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7a5b      	ldrb	r3, [r3, #9]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d113      	bne.n	8004f7c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004f5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f5e:	d106      	bne.n	8004f6e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2102      	movs	r1, #2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f002 ff82 	bl	8007e70 <USB_InitFSLSPClkSel>
 8004f6c:	e011      	b.n	8004f92 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2101      	movs	r1, #1
 8004f74:	4618      	mov	r0, r3
 8004f76:	f002 ff7b 	bl	8007e70 <USB_InitFSLSPClkSel>
 8004f7a:	e00a      	b.n	8004f92 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	79db      	ldrb	r3, [r3, #7]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d106      	bne.n	8004f92 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004f90:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f005 ff52 	bl	800ae3c <HAL_HCD_PortEnabled_Callback>
 8004f98:	e002      	b.n	8004fa0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f005 ff5c 	bl	800ae58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d103      	bne.n	8004fb2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f043 0320 	orr.w	r3, r3, #32
 8004fb0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6013      	str	r3, [r2, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e12b      	b.n	8005232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc fe90 	bl	8001d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2224      	movs	r2, #36	@ 0x24
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800501a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800502a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800502c:	f001 fd8a 	bl	8006b44 <HAL_RCC_GetPCLK1Freq>
 8005030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4a81      	ldr	r2, [pc, #516]	@ (800523c <HAL_I2C_Init+0x274>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d807      	bhi.n	800504c <HAL_I2C_Init+0x84>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a80      	ldr	r2, [pc, #512]	@ (8005240 <HAL_I2C_Init+0x278>)
 8005040:	4293      	cmp	r3, r2
 8005042:	bf94      	ite	ls
 8005044:	2301      	movls	r3, #1
 8005046:	2300      	movhi	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e006      	b.n	800505a <HAL_I2C_Init+0x92>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4a7d      	ldr	r2, [pc, #500]	@ (8005244 <HAL_I2C_Init+0x27c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	bf94      	ite	ls
 8005054:	2301      	movls	r3, #1
 8005056:	2300      	movhi	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0e7      	b.n	8005232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a78      	ldr	r2, [pc, #480]	@ (8005248 <HAL_I2C_Init+0x280>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	0c9b      	lsrs	r3, r3, #18
 800506c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4a6a      	ldr	r2, [pc, #424]	@ (800523c <HAL_I2C_Init+0x274>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d802      	bhi.n	800509c <HAL_I2C_Init+0xd4>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	3301      	adds	r3, #1
 800509a:	e009      	b.n	80050b0 <HAL_I2C_Init+0xe8>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	4a69      	ldr	r2, [pc, #420]	@ (800524c <HAL_I2C_Init+0x284>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	099b      	lsrs	r3, r3, #6
 80050ae:	3301      	adds	r3, #1
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80050c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	495c      	ldr	r1, [pc, #368]	@ (800523c <HAL_I2C_Init+0x274>)
 80050cc:	428b      	cmp	r3, r1
 80050ce:	d819      	bhi.n	8005104 <HAL_I2C_Init+0x13c>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1e59      	subs	r1, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fbb1 f3f3 	udiv	r3, r1, r3
 80050de:	1c59      	adds	r1, r3, #1
 80050e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050e4:	400b      	ands	r3, r1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_I2C_Init+0x138>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1e59      	subs	r1, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f8:	3301      	adds	r3, #1
 80050fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fe:	e051      	b.n	80051a4 <HAL_I2C_Init+0x1dc>
 8005100:	2304      	movs	r3, #4
 8005102:	e04f      	b.n	80051a4 <HAL_I2C_Init+0x1dc>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d111      	bne.n	8005130 <HAL_I2C_Init+0x168>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1e58      	subs	r0, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	440b      	add	r3, r1
 800511a:	fbb0 f3f3 	udiv	r3, r0, r3
 800511e:	3301      	adds	r3, #1
 8005120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	e012      	b.n	8005156 <HAL_I2C_Init+0x18e>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1e58      	subs	r0, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6859      	ldr	r1, [r3, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	0099      	lsls	r1, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	fbb0 f3f3 	udiv	r3, r0, r3
 8005146:	3301      	adds	r3, #1
 8005148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_I2C_Init+0x196>
 800515a:	2301      	movs	r3, #1
 800515c:	e022      	b.n	80051a4 <HAL_I2C_Init+0x1dc>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10e      	bne.n	8005184 <HAL_I2C_Init+0x1bc>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1e58      	subs	r0, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	440b      	add	r3, r1
 8005174:	fbb0 f3f3 	udiv	r3, r0, r3
 8005178:	3301      	adds	r3, #1
 800517a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005182:	e00f      	b.n	80051a4 <HAL_I2C_Init+0x1dc>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1e58      	subs	r0, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	0099      	lsls	r1, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	fbb0 f3f3 	udiv	r3, r0, r3
 800519a:	3301      	adds	r3, #1
 800519c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	6809      	ldr	r1, [r1, #0]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6911      	ldr	r1, [r2, #16]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68d2      	ldr	r2, [r2, #12]
 80051de:	4311      	orrs	r1, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	000186a0 	.word	0x000186a0
 8005240:	001e847f 	.word	0x001e847f
 8005244:	003d08ff 	.word	0x003d08ff
 8005248:	431bde83 	.word	0x431bde83
 800524c:	10624dd3 	.word	0x10624dd3

08005250 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	461a      	mov	r2, r3
 800525e:	4603      	mov	r3, r0
 8005260:	817b      	strh	r3, [r7, #10]
 8005262:	460b      	mov	r3, r1
 8005264:	813b      	strh	r3, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800526a:	f7fd fa83 	bl	8002774 <HAL_GetTick>
 800526e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b20      	cmp	r3, #32
 800527a:	f040 80d9 	bne.w	8005430 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2319      	movs	r3, #25
 8005284:	2201      	movs	r2, #1
 8005286:	496d      	ldr	r1, [pc, #436]	@ (800543c <HAL_I2C_Mem_Write+0x1ec>)
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f971 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005294:	2302      	movs	r3, #2
 8005296:	e0cc      	b.n	8005432 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_I2C_Mem_Write+0x56>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e0c5      	b.n	8005432 <HAL_I2C_Mem_Write+0x1e2>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d007      	beq.n	80052cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2221      	movs	r2, #33	@ 0x21
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2240      	movs	r2, #64	@ 0x40
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a3a      	ldr	r2, [r7, #32]
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a4d      	ldr	r2, [pc, #308]	@ (8005440 <HAL_I2C_Mem_Write+0x1f0>)
 800530c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800530e:	88f8      	ldrh	r0, [r7, #6]
 8005310:	893a      	ldrh	r2, [r7, #8]
 8005312:	8979      	ldrh	r1, [r7, #10]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4603      	mov	r3, r0
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f890 	bl	8005444 <I2C_RequestMemoryWrite>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d052      	beq.n	80053d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e081      	b.n	8005432 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fa36 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	2b04      	cmp	r3, #4
 8005344:	d107      	bne.n	8005356 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e06b      	b.n	8005432 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b04      	cmp	r3, #4
 8005396:	d11b      	bne.n	80053d0 <HAL_I2C_Mem_Write+0x180>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d017      	beq.n	80053d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1aa      	bne.n	800532e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fa29 	bl	8005834 <I2C_WaitOnBTFFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d107      	bne.n	8005400 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e016      	b.n	8005432 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	00100002 	.word	0x00100002
 8005440:	ffff0000 	.word	0xffff0000

08005444 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	461a      	mov	r2, r3
 8005452:	4603      	mov	r3, r0
 8005454:	817b      	strh	r3, [r7, #10]
 8005456:	460b      	mov	r3, r1
 8005458:	813b      	strh	r3, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800546c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	2200      	movs	r2, #0
 8005476:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f878 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005494:	d103      	bne.n	800549e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800549c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e05f      	b.n	8005562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054a2:	897b      	ldrh	r3, [r7, #10]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	492d      	ldr	r1, [pc, #180]	@ (800556c <I2C_RequestMemoryWrite+0x128>)
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f8d3 	bl	8005664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e04c      	b.n	8005562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e0:	6a39      	ldr	r1, [r7, #32]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f95e 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d107      	bne.n	8005506 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005504:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e02b      	b.n	8005562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d105      	bne.n	800551c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005510:	893b      	ldrh	r3, [r7, #8]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	611a      	str	r2, [r3, #16]
 800551a:	e021      	b.n	8005560 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800551c:	893b      	ldrh	r3, [r7, #8]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	b29b      	uxth	r3, r3
 8005522:	b2da      	uxtb	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800552a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552c:	6a39      	ldr	r1, [r7, #32]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f938 	bl	80057a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	2b04      	cmp	r3, #4
 8005540:	d107      	bne.n	8005552 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005550:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e005      	b.n	8005562 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005556:	893b      	ldrh	r3, [r7, #8]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	00010002 	.word	0x00010002

08005570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005580:	e048      	b.n	8005614 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d044      	beq.n	8005614 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fd f8f3 	bl	8002774 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d139      	bne.n	8005614 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	0c1b      	lsrs	r3, r3, #16
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d10d      	bne.n	80055c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	43da      	mvns	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	e00c      	b.n	80055e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	43da      	mvns	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d116      	bne.n	8005614 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e023      	b.n	800565c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d10d      	bne.n	800563a <I2C_WaitOnFlagUntilTimeout+0xca>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	43da      	mvns	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	e00c      	b.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	43da      	mvns	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	429a      	cmp	r2, r3
 8005658:	d093      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005672:	e071      	b.n	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800567e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005682:	d123      	bne.n	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005692:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800569c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	f043 0204 	orr.w	r2, r3, #4
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e067      	b.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d041      	beq.n	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d4:	f7fd f84e 	bl	8002774 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d302      	bcc.n	80056ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d136      	bne.n	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d10c      	bne.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	43da      	mvns	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf14      	ite	ne
 8005706:	2301      	movne	r3, #1
 8005708:	2300      	moveq	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	e00b      	b.n	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	43da      	mvns	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d016      	beq.n	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e021      	b.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	0c1b      	lsrs	r3, r3, #16
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	d10c      	bne.n	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	43da      	mvns	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4013      	ands	r3, r2
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e00b      	b.n	8005794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	43da      	mvns	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4013      	ands	r3, r2
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	bf14      	ite	ne
 800578e:	2301      	movne	r3, #1
 8005790:	2300      	moveq	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	f47f af6d 	bne.w	8005674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057b0:	e034      	b.n	800581c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f886 	bl	80058c4 <I2C_IsAcknowledgeFailed>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e034      	b.n	800582c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d028      	beq.n	800581c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ca:	f7fc ffd3 	bl	8002774 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11d      	bne.n	800581c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ea:	2b80      	cmp	r3, #128	@ 0x80
 80057ec:	d016      	beq.n	800581c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	f043 0220 	orr.w	r2, r3, #32
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e007      	b.n	800582c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d1c3      	bne.n	80057b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005840:	e034      	b.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f83e 	bl	80058c4 <I2C_IsAcknowledgeFailed>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e034      	b.n	80058bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d028      	beq.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fc ff8b 	bl	8002774 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d11d      	bne.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b04      	cmp	r3, #4
 800587c:	d016      	beq.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e007      	b.n	80058bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d1c3      	bne.n	8005842 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058da:	d11b      	bne.n	8005914 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e128      	b.n	8005b88 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a90      	ldr	r2, [pc, #576]	@ (8005b90 <HAL_I2S_Init+0x26c>)
 800594e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fc fa27 	bl	8001da4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800596c:	f023 030f 	bic.w	r3, r3, #15
 8005970:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2202      	movs	r2, #2
 8005978:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d060      	beq.n	8005a44 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800598a:	2310      	movs	r3, #16
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e001      	b.n	8005994 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005990:	2320      	movs	r3, #32
 8005992:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b20      	cmp	r3, #32
 800599a:	d802      	bhi.n	80059a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059a2:	2001      	movs	r0, #1
 80059a4:	f001 f9d8 	bl	8006d58 <HAL_RCCEx_GetPeriphCLKFreq>
 80059a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059b2:	d125      	bne.n	8005a00 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d010      	beq.n	80059de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	461a      	mov	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	3305      	adds	r3, #5
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	e01f      	b.n	8005a1e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	461a      	mov	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	3305      	adds	r3, #5
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e00e      	b.n	8005a1e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	461a      	mov	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	3305      	adds	r3, #5
 8005a1c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4a5c      	ldr	r2, [pc, #368]	@ (8005b94 <HAL_I2S_Init+0x270>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	08db      	lsrs	r3, r3, #3
 8005a28:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	e003      	b.n	8005a4c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a44:	2302      	movs	r3, #2
 8005a46:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d902      	bls.n	8005a58 <HAL_I2S_Init+0x134>
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	2bff      	cmp	r3, #255	@ 0xff
 8005a56:	d907      	bls.n	8005a68 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5c:	f043 0210 	orr.w	r2, r3, #16
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e08f      	b.n	8005b88 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	ea42 0103 	orr.w	r1, r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a86:	f023 030f 	bic.w	r3, r3, #15
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6851      	ldr	r1, [r2, #4]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6892      	ldr	r2, [r2, #8]
 8005a92:	4311      	orrs	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	68d2      	ldr	r2, [r2, #12]
 8005a98:	4311      	orrs	r1, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6992      	ldr	r2, [r2, #24]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aaa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d161      	bne.n	8005b78 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a38      	ldr	r2, [pc, #224]	@ (8005b98 <HAL_I2S_Init+0x274>)
 8005ab8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a37      	ldr	r2, [pc, #220]	@ (8005b9c <HAL_I2S_Init+0x278>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d101      	bne.n	8005ac8 <HAL_I2S_Init+0x1a4>
 8005ac4:	4b36      	ldr	r3, [pc, #216]	@ (8005ba0 <HAL_I2S_Init+0x27c>)
 8005ac6:	e001      	b.n	8005acc <HAL_I2S_Init+0x1a8>
 8005ac8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	4932      	ldr	r1, [pc, #200]	@ (8005b9c <HAL_I2S_Init+0x278>)
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	d101      	bne.n	8005adc <HAL_I2S_Init+0x1b8>
 8005ad8:	4a31      	ldr	r2, [pc, #196]	@ (8005ba0 <HAL_I2S_Init+0x27c>)
 8005ada:	e001      	b.n	8005ae0 <HAL_I2S_Init+0x1bc>
 8005adc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005ae0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ae4:	f023 030f 	bic.w	r3, r3, #15
 8005ae8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2b      	ldr	r2, [pc, #172]	@ (8005b9c <HAL_I2S_Init+0x278>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d101      	bne.n	8005af8 <HAL_I2S_Init+0x1d4>
 8005af4:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba0 <HAL_I2S_Init+0x27c>)
 8005af6:	e001      	b.n	8005afc <HAL_I2S_Init+0x1d8>
 8005af8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005afc:	2202      	movs	r2, #2
 8005afe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a25      	ldr	r2, [pc, #148]	@ (8005b9c <HAL_I2S_Init+0x278>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d101      	bne.n	8005b0e <HAL_I2S_Init+0x1ea>
 8005b0a:	4b25      	ldr	r3, [pc, #148]	@ (8005ba0 <HAL_I2S_Init+0x27c>)
 8005b0c:	e001      	b.n	8005b12 <HAL_I2S_Init+0x1ee>
 8005b0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1e:	d003      	beq.n	8005b28 <HAL_I2S_Init+0x204>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e001      	b.n	8005b34 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b52:	4313      	orrs	r3, r2
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b60:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a0d      	ldr	r2, [pc, #52]	@ (8005b9c <HAL_I2S_Init+0x278>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d101      	bne.n	8005b70 <HAL_I2S_Init+0x24c>
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <HAL_I2S_Init+0x27c>)
 8005b6e:	e001      	b.n	8005b74 <HAL_I2S_Init+0x250>
 8005b70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b74:	897a      	ldrh	r2, [r7, #10]
 8005b76:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	08005c9b 	.word	0x08005c9b
 8005b94:	cccccccd 	.word	0xcccccccd
 8005b98:	08005db1 	.word	0x08005db1
 8005b9c:	40003800 	.word	0x40003800
 8005ba0:	40003400 	.word	0x40003400

08005ba4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10e      	bne.n	8005c34 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff ffb8 	bl	8005ba4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10e      	bne.n	8005c92 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ff93 	bl	8005bb8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d13a      	bne.n	8005d2c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d109      	bne.n	8005cd4 <I2S_IRQHandler+0x3a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cca:	2b40      	cmp	r3, #64	@ 0x40
 8005ccc:	d102      	bne.n	8005cd4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ffb4 	bl	8005c3c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cda:	2b40      	cmp	r3, #64	@ 0x40
 8005cdc:	d126      	bne.n	8005d2c <I2S_IRQHandler+0x92>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d11f      	bne.n	8005d2c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005cfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	f043 0202 	orr.w	r2, r3, #2
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff ff50 	bl	8005bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d136      	bne.n	8005da6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d109      	bne.n	8005d56 <I2S_IRQHandler+0xbc>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4c:	2b80      	cmp	r3, #128	@ 0x80
 8005d4e:	d102      	bne.n	8005d56 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff ff45 	bl	8005be0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d122      	bne.n	8005da6 <I2S_IRQHandler+0x10c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d11b      	bne.n	8005da6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d7c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d98:	f043 0204 	orr.w	r2, r3, #4
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff ff13 	bl	8005bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005da6:	bf00      	nop
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a92      	ldr	r2, [pc, #584]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d101      	bne.n	8005dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005dca:	4b92      	ldr	r3, [pc, #584]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dcc:	e001      	b.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005dce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a8b      	ldr	r2, [pc, #556]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d101      	bne.n	8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005de8:	4b8a      	ldr	r3, [pc, #552]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dea:	e001      	b.n	8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005dec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dfc:	d004      	beq.n	8005e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 8099 	bne.w	8005f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d107      	bne.n	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f925 	bl	800606c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d107      	bne.n	8005e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9c8 	bl	80061cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b40      	cmp	r3, #64	@ 0x40
 8005e44:	d13a      	bne.n	8005ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d035      	beq.n	8005ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6e      	ldr	r2, [pc, #440]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d101      	bne.n	8005e5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e5c:	e001      	b.n	8005e62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4969      	ldr	r1, [pc, #420]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e6a:	428b      	cmp	r3, r1
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e6e:	4b69      	ldr	r3, [pc, #420]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e70:	e001      	b.n	8005e76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eae:	f043 0202 	orr.w	r2, r3, #2
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fe88 	bl	8005bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	f040 80c3 	bne.w	800604e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80bd 	beq.w	800604e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ee2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a49      	ldr	r2, [pc, #292]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d101      	bne.n	8005ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005eee:	4b49      	ldr	r3, [pc, #292]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ef0:	e001      	b.n	8005ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005ef2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4944      	ldr	r1, [pc, #272]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005efe:	428b      	cmp	r3, r1
 8005f00:	d101      	bne.n	8005f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f02:	4b44      	ldr	r3, [pc, #272]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f04:	e001      	b.n	8005f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f0e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f10:	2300      	movs	r3, #0
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fe4a 	bl	8005bcc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f38:	e089      	b.n	800604e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d107      	bne.n	8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8be 	bl	80060d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d107      	bne.n	8005f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f8fd 	bl	8006168 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f74:	2b40      	cmp	r3, #64	@ 0x40
 8005f76:	d12f      	bne.n	8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d02a      	beq.n	8005fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f90:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1e      	ldr	r2, [pc, #120]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d101      	bne.n	8005fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f9e:	e001      	b.n	8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005fa0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4919      	ldr	r1, [pc, #100]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fac:	428b      	cmp	r3, r1
 8005fae:	d101      	bne.n	8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005fb0:	4b18      	ldr	r3, [pc, #96]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fb2:	e001      	b.n	8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005fb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fbc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fca:	f043 0202 	orr.w	r2, r3, #2
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fdfa 	bl	8005bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d136      	bne.n	8006050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d031      	beq.n	8006050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a07      	ldr	r2, [pc, #28]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ff6:	4b07      	ldr	r3, [pc, #28]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ff8:	e001      	b.n	8005ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005ffa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4902      	ldr	r1, [pc, #8]	@ (8006010 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006006:	428b      	cmp	r3, r1
 8006008:	d106      	bne.n	8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800600a:	4b02      	ldr	r3, [pc, #8]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800600c:	e006      	b.n	800601c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800600e:	bf00      	nop
 8006010:	40003800 	.word	0x40003800
 8006014:	40003400 	.word	0x40003400
 8006018:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800601c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006020:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006030:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	f043 0204 	orr.w	r2, r3, #4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fdc0 	bl	8005bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800604c:	e000      	b.n	8006050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800604e:	bf00      	nop
}
 8006050:	bf00      	nop
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	1c99      	adds	r1, r3, #2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6251      	str	r1, [r2, #36]	@ 0x24
 800607e:	881a      	ldrh	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d113      	bne.n	80060c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d106      	bne.n	80060c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff ffc9 	bl	8006058 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	1c99      	adds	r1, r3, #2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80060e2:	8819      	ldrh	r1, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006160 <I2SEx_TxISR_I2SExt+0x90>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d101      	bne.n	80060f2 <I2SEx_TxISR_I2SExt+0x22>
 80060ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <I2SEx_TxISR_I2SExt+0x94>)
 80060f0:	e001      	b.n	80060f6 <I2SEx_TxISR_I2SExt+0x26>
 80060f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060f6:	460a      	mov	r2, r1
 80060f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d121      	bne.n	8006156 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a12      	ldr	r2, [pc, #72]	@ (8006160 <I2SEx_TxISR_I2SExt+0x90>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d101      	bne.n	8006120 <I2SEx_TxISR_I2SExt+0x50>
 800611c:	4b11      	ldr	r3, [pc, #68]	@ (8006164 <I2SEx_TxISR_I2SExt+0x94>)
 800611e:	e001      	b.n	8006124 <I2SEx_TxISR_I2SExt+0x54>
 8006120:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	490d      	ldr	r1, [pc, #52]	@ (8006160 <I2SEx_TxISR_I2SExt+0x90>)
 800612c:	428b      	cmp	r3, r1
 800612e:	d101      	bne.n	8006134 <I2SEx_TxISR_I2SExt+0x64>
 8006130:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <I2SEx_TxISR_I2SExt+0x94>)
 8006132:	e001      	b.n	8006138 <I2SEx_TxISR_I2SExt+0x68>
 8006134:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006138:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800613c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d106      	bne.n	8006156 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff81 	bl	8006058 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40003800 	.word	0x40003800
 8006164:	40003400 	.word	0x40003400

08006168 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68d8      	ldr	r0, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	1c99      	adds	r1, r3, #2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006180:	b282      	uxth	r2, r0
 8006182:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d113      	bne.n	80061c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff ff4a 	bl	8006058 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a20      	ldr	r2, [pc, #128]	@ (800625c <I2SEx_RxISR_I2SExt+0x90>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d101      	bne.n	80061e2 <I2SEx_RxISR_I2SExt+0x16>
 80061de:	4b20      	ldr	r3, [pc, #128]	@ (8006260 <I2SEx_RxISR_I2SExt+0x94>)
 80061e0:	e001      	b.n	80061e6 <I2SEx_RxISR_I2SExt+0x1a>
 80061e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061e6:	68d8      	ldr	r0, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	1c99      	adds	r1, r3, #2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80061f2:	b282      	uxth	r2, r0
 80061f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d121      	bne.n	8006252 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a12      	ldr	r2, [pc, #72]	@ (800625c <I2SEx_RxISR_I2SExt+0x90>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d101      	bne.n	800621c <I2SEx_RxISR_I2SExt+0x50>
 8006218:	4b11      	ldr	r3, [pc, #68]	@ (8006260 <I2SEx_RxISR_I2SExt+0x94>)
 800621a:	e001      	b.n	8006220 <I2SEx_RxISR_I2SExt+0x54>
 800621c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	490d      	ldr	r1, [pc, #52]	@ (800625c <I2SEx_RxISR_I2SExt+0x90>)
 8006228:	428b      	cmp	r3, r1
 800622a:	d101      	bne.n	8006230 <I2SEx_RxISR_I2SExt+0x64>
 800622c:	4b0c      	ldr	r3, [pc, #48]	@ (8006260 <I2SEx_RxISR_I2SExt+0x94>)
 800622e:	e001      	b.n	8006234 <I2SEx_RxISR_I2SExt+0x68>
 8006230:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006234:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006238:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff ff03 	bl	8006058 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40003800 	.word	0x40003800
 8006260:	40003400 	.word	0x40003400

08006264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e267      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d075      	beq.n	800636e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006282:	4b88      	ldr	r3, [pc, #544]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 030c 	and.w	r3, r3, #12
 800628a:	2b04      	cmp	r3, #4
 800628c:	d00c      	beq.n	80062a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800628e:	4b85      	ldr	r3, [pc, #532]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006296:	2b08      	cmp	r3, #8
 8006298:	d112      	bne.n	80062c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800629a:	4b82      	ldr	r3, [pc, #520]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062a6:	d10b      	bne.n	80062c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a8:	4b7e      	ldr	r3, [pc, #504]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d05b      	beq.n	800636c <HAL_RCC_OscConfig+0x108>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d157      	bne.n	800636c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e242      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062c8:	d106      	bne.n	80062d8 <HAL_RCC_OscConfig+0x74>
 80062ca:	4b76      	ldr	r3, [pc, #472]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a75      	ldr	r2, [pc, #468]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e01d      	b.n	8006314 <HAL_RCC_OscConfig+0xb0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062e0:	d10c      	bne.n	80062fc <HAL_RCC_OscConfig+0x98>
 80062e2:	4b70      	ldr	r3, [pc, #448]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a6f      	ldr	r2, [pc, #444]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80062e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	4b6d      	ldr	r3, [pc, #436]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a6c      	ldr	r2, [pc, #432]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80062f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e00b      	b.n	8006314 <HAL_RCC_OscConfig+0xb0>
 80062fc:	4b69      	ldr	r3, [pc, #420]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a68      	ldr	r2, [pc, #416]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	4b66      	ldr	r3, [pc, #408]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a65      	ldr	r2, [pc, #404]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 800630e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d013      	beq.n	8006344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631c:	f7fc fa2a 	bl	8002774 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006324:	f7fc fa26 	bl	8002774 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	@ 0x64
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e207      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006336:	4b5b      	ldr	r3, [pc, #364]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f0      	beq.n	8006324 <HAL_RCC_OscConfig+0xc0>
 8006342:	e014      	b.n	800636e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006344:	f7fc fa16 	bl	8002774 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634c:	f7fc fa12 	bl	8002774 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	@ 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e1f3      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800635e:	4b51      	ldr	r3, [pc, #324]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f0      	bne.n	800634c <HAL_RCC_OscConfig+0xe8>
 800636a:	e000      	b.n	800636e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800636c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d063      	beq.n	8006442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800637a:	4b4a      	ldr	r3, [pc, #296]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006386:	4b47      	ldr	r3, [pc, #284]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800638e:	2b08      	cmp	r3, #8
 8006390:	d11c      	bne.n	80063cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006392:	4b44      	ldr	r3, [pc, #272]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d116      	bne.n	80063cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800639e:	4b41      	ldr	r3, [pc, #260]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_RCC_OscConfig+0x152>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d001      	beq.n	80063b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e1c7      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b6:	4b3b      	ldr	r3, [pc, #236]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	4937      	ldr	r1, [pc, #220]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ca:	e03a      	b.n	8006442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d020      	beq.n	8006416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063d4:	4b34      	ldr	r3, [pc, #208]	@ (80064a8 <HAL_RCC_OscConfig+0x244>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063da:	f7fc f9cb 	bl	8002774 <HAL_GetTick>
 80063de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e2:	f7fc f9c7 	bl	8002774 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e1a8      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f4:	4b2b      	ldr	r3, [pc, #172]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0f0      	beq.n	80063e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006400:	4b28      	ldr	r3, [pc, #160]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	4925      	ldr	r1, [pc, #148]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006410:	4313      	orrs	r3, r2
 8006412:	600b      	str	r3, [r1, #0]
 8006414:	e015      	b.n	8006442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006416:	4b24      	ldr	r3, [pc, #144]	@ (80064a8 <HAL_RCC_OscConfig+0x244>)
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641c:	f7fc f9aa 	bl	8002774 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006424:	f7fc f9a6 	bl	8002774 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e187      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006436:	4b1b      	ldr	r3, [pc, #108]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f0      	bne.n	8006424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d036      	beq.n	80064bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d016      	beq.n	8006484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006456:	4b15      	ldr	r3, [pc, #84]	@ (80064ac <HAL_RCC_OscConfig+0x248>)
 8006458:	2201      	movs	r2, #1
 800645a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645c:	f7fc f98a 	bl	8002774 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006464:	f7fc f986 	bl	8002774 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e167      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006476:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <HAL_RCC_OscConfig+0x240>)
 8006478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0x200>
 8006482:	e01b      	b.n	80064bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006484:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <HAL_RCC_OscConfig+0x248>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648a:	f7fc f973 	bl	8002774 <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006490:	e00e      	b.n	80064b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006492:	f7fc f96f 	bl	8002774 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d907      	bls.n	80064b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e150      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
 80064a4:	40023800 	.word	0x40023800
 80064a8:	42470000 	.word	0x42470000
 80064ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b0:	4b88      	ldr	r3, [pc, #544]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80064b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ea      	bne.n	8006492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8097 	beq.w	80065f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ce:	4b81      	ldr	r3, [pc, #516]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10f      	bne.n	80064fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064da:	2300      	movs	r3, #0
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	4b7d      	ldr	r3, [pc, #500]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	4a7c      	ldr	r2, [pc, #496]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80064e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80064ea:	4b7a      	ldr	r3, [pc, #488]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064f6:	2301      	movs	r3, #1
 80064f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064fa:	4b77      	ldr	r3, [pc, #476]	@ (80066d8 <HAL_RCC_OscConfig+0x474>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006502:	2b00      	cmp	r3, #0
 8006504:	d118      	bne.n	8006538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006506:	4b74      	ldr	r3, [pc, #464]	@ (80066d8 <HAL_RCC_OscConfig+0x474>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a73      	ldr	r2, [pc, #460]	@ (80066d8 <HAL_RCC_OscConfig+0x474>)
 800650c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006512:	f7fc f92f 	bl	8002774 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651a:	f7fc f92b 	bl	8002774 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e10c      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652c:	4b6a      	ldr	r3, [pc, #424]	@ (80066d8 <HAL_RCC_OscConfig+0x474>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f0      	beq.n	800651a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d106      	bne.n	800654e <HAL_RCC_OscConfig+0x2ea>
 8006540:	4b64      	ldr	r3, [pc, #400]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006544:	4a63      	ldr	r2, [pc, #396]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	6713      	str	r3, [r2, #112]	@ 0x70
 800654c:	e01c      	b.n	8006588 <HAL_RCC_OscConfig+0x324>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	2b05      	cmp	r3, #5
 8006554:	d10c      	bne.n	8006570 <HAL_RCC_OscConfig+0x30c>
 8006556:	4b5f      	ldr	r3, [pc, #380]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655a:	4a5e      	ldr	r2, [pc, #376]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 800655c:	f043 0304 	orr.w	r3, r3, #4
 8006560:	6713      	str	r3, [r2, #112]	@ 0x70
 8006562:	4b5c      	ldr	r3, [pc, #368]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006566:	4a5b      	ldr	r2, [pc, #364]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	6713      	str	r3, [r2, #112]	@ 0x70
 800656e:	e00b      	b.n	8006588 <HAL_RCC_OscConfig+0x324>
 8006570:	4b58      	ldr	r3, [pc, #352]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006574:	4a57      	ldr	r2, [pc, #348]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	6713      	str	r3, [r2, #112]	@ 0x70
 800657c:	4b55      	ldr	r3, [pc, #340]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 800657e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006580:	4a54      	ldr	r2, [pc, #336]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006582:	f023 0304 	bic.w	r3, r3, #4
 8006586:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d015      	beq.n	80065bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006590:	f7fc f8f0 	bl	8002774 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006596:	e00a      	b.n	80065ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006598:	f7fc f8ec 	bl	8002774 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e0cb      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ae:	4b49      	ldr	r3, [pc, #292]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80065b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ee      	beq.n	8006598 <HAL_RCC_OscConfig+0x334>
 80065ba:	e014      	b.n	80065e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065bc:	f7fc f8da 	bl	8002774 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c2:	e00a      	b.n	80065da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c4:	f7fc f8d6 	bl	8002774 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e0b5      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065da:	4b3e      	ldr	r3, [pc, #248]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1ee      	bne.n	80065c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d105      	bne.n	80065f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ec:	4b39      	ldr	r3, [pc, #228]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	4a38      	ldr	r2, [pc, #224]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80065f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80a1 	beq.w	8006744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006602:	4b34      	ldr	r3, [pc, #208]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
 800660a:	2b08      	cmp	r3, #8
 800660c:	d05c      	beq.n	80066c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d141      	bne.n	800669a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006616:	4b31      	ldr	r3, [pc, #196]	@ (80066dc <HAL_RCC_OscConfig+0x478>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661c:	f7fc f8aa 	bl	8002774 <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006624:	f7fc f8a6 	bl	8002774 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e087      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006636:	4b27      	ldr	r3, [pc, #156]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69da      	ldr	r2, [r3, #28]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	019b      	lsls	r3, r3, #6
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	3b01      	subs	r3, #1
 800665c:	041b      	lsls	r3, r3, #16
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006664:	061b      	lsls	r3, r3, #24
 8006666:	491b      	ldr	r1, [pc, #108]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 8006668:	4313      	orrs	r3, r2
 800666a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800666c:	4b1b      	ldr	r3, [pc, #108]	@ (80066dc <HAL_RCC_OscConfig+0x478>)
 800666e:	2201      	movs	r2, #1
 8006670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006672:	f7fc f87f 	bl	8002774 <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667a:	f7fc f87b 	bl	8002774 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e05c      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668c:	4b11      	ldr	r3, [pc, #68]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f0      	beq.n	800667a <HAL_RCC_OscConfig+0x416>
 8006698:	e054      	b.n	8006744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800669a:	4b10      	ldr	r3, [pc, #64]	@ (80066dc <HAL_RCC_OscConfig+0x478>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a0:	f7fc f868 	bl	8002774 <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a8:	f7fc f864 	bl	8002774 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e045      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ba:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <HAL_RCC_OscConfig+0x470>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <HAL_RCC_OscConfig+0x444>
 80066c6:	e03d      	b.n	8006744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d107      	bne.n	80066e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e038      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
 80066d4:	40023800 	.word	0x40023800
 80066d8:	40007000 	.word	0x40007000
 80066dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <HAL_RCC_OscConfig+0x4ec>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d028      	beq.n	8006740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d121      	bne.n	8006740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006706:	429a      	cmp	r2, r3
 8006708:	d11a      	bne.n	8006740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006710:	4013      	ands	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006718:	4293      	cmp	r3, r2
 800671a:	d111      	bne.n	8006740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	3b01      	subs	r3, #1
 800672a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800672c:	429a      	cmp	r2, r3
 800672e:	d107      	bne.n	8006740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800673c:	429a      	cmp	r2, r3
 800673e:	d001      	beq.n	8006744 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800

08006754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0cc      	b.n	8006902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006768:	4b68      	ldr	r3, [pc, #416]	@ (800690c <HAL_RCC_ClockConfig+0x1b8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d90c      	bls.n	8006790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b65      	ldr	r3, [pc, #404]	@ (800690c <HAL_RCC_ClockConfig+0x1b8>)
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800677e:	4b63      	ldr	r3, [pc, #396]	@ (800690c <HAL_RCC_ClockConfig+0x1b8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d001      	beq.n	8006790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0b8      	b.n	8006902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d020      	beq.n	80067de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067a8:	4b59      	ldr	r3, [pc, #356]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	4a58      	ldr	r2, [pc, #352]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80067b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d005      	beq.n	80067cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c0:	4b53      	ldr	r3, [pc, #332]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	4a52      	ldr	r2, [pc, #328]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067cc:	4b50      	ldr	r3, [pc, #320]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	494d      	ldr	r1, [pc, #308]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d044      	beq.n	8006874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d107      	bne.n	8006802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f2:	4b47      	ldr	r3, [pc, #284]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d119      	bne.n	8006832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e07f      	b.n	8006902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d003      	beq.n	8006812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800680e:	2b03      	cmp	r3, #3
 8006810:	d107      	bne.n	8006822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006812:	4b3f      	ldr	r3, [pc, #252]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e06f      	b.n	8006902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006822:	4b3b      	ldr	r3, [pc, #236]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e067      	b.n	8006902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006832:	4b37      	ldr	r3, [pc, #220]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f023 0203 	bic.w	r2, r3, #3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	4934      	ldr	r1, [pc, #208]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 8006840:	4313      	orrs	r3, r2
 8006842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006844:	f7fb ff96 	bl	8002774 <HAL_GetTick>
 8006848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684a:	e00a      	b.n	8006862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800684c:	f7fb ff92 	bl	8002774 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e04f      	b.n	8006902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006862:	4b2b      	ldr	r3, [pc, #172]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 020c 	and.w	r2, r3, #12
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	429a      	cmp	r2, r3
 8006872:	d1eb      	bne.n	800684c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006874:	4b25      	ldr	r3, [pc, #148]	@ (800690c <HAL_RCC_ClockConfig+0x1b8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d20c      	bcs.n	800689c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006882:	4b22      	ldr	r3, [pc, #136]	@ (800690c <HAL_RCC_ClockConfig+0x1b8>)
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800688a:	4b20      	ldr	r3, [pc, #128]	@ (800690c <HAL_RCC_ClockConfig+0x1b8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d001      	beq.n	800689c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e032      	b.n	8006902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d008      	beq.n	80068ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068a8:	4b19      	ldr	r3, [pc, #100]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4916      	ldr	r1, [pc, #88]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068c6:	4b12      	ldr	r3, [pc, #72]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	490e      	ldr	r1, [pc, #56]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068da:	f000 f821 	bl	8006920 <HAL_RCC_GetSysClockFreq>
 80068de:	4602      	mov	r2, r0
 80068e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006910 <HAL_RCC_ClockConfig+0x1bc>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	091b      	lsrs	r3, r3, #4
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	490a      	ldr	r1, [pc, #40]	@ (8006914 <HAL_RCC_ClockConfig+0x1c0>)
 80068ec:	5ccb      	ldrb	r3, [r1, r3]
 80068ee:	fa22 f303 	lsr.w	r3, r2, r3
 80068f2:	4a09      	ldr	r2, [pc, #36]	@ (8006918 <HAL_RCC_ClockConfig+0x1c4>)
 80068f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068f6:	4b09      	ldr	r3, [pc, #36]	@ (800691c <HAL_RCC_ClockConfig+0x1c8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fb fef6 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40023c00 	.word	0x40023c00
 8006910:	40023800 	.word	0x40023800
 8006914:	0800cb20 	.word	0x0800cb20
 8006918:	20000000 	.word	0x20000000
 800691c:	20000004 	.word	0x20000004

08006920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006924:	b094      	sub	sp, #80	@ 0x50
 8006926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	647b      	str	r3, [r7, #68]	@ 0x44
 800692c:	2300      	movs	r3, #0
 800692e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006930:	2300      	movs	r3, #0
 8006932:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006938:	4b79      	ldr	r3, [pc, #484]	@ (8006b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 030c 	and.w	r3, r3, #12
 8006940:	2b08      	cmp	r3, #8
 8006942:	d00d      	beq.n	8006960 <HAL_RCC_GetSysClockFreq+0x40>
 8006944:	2b08      	cmp	r3, #8
 8006946:	f200 80e1 	bhi.w	8006b0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <HAL_RCC_GetSysClockFreq+0x34>
 800694e:	2b04      	cmp	r3, #4
 8006950:	d003      	beq.n	800695a <HAL_RCC_GetSysClockFreq+0x3a>
 8006952:	e0db      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006954:	4b73      	ldr	r3, [pc, #460]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006956:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006958:	e0db      	b.n	8006b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800695a:	4b73      	ldr	r3, [pc, #460]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x208>)
 800695c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800695e:	e0d8      	b.n	8006b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006960:	4b6f      	ldr	r3, [pc, #444]	@ (8006b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006968:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800696a:	4b6d      	ldr	r3, [pc, #436]	@ (8006b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d063      	beq.n	8006a3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006976:	4b6a      	ldr	r3, [pc, #424]	@ (8006b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	099b      	lsrs	r3, r3, #6
 800697c:	2200      	movs	r2, #0
 800697e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006980:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006988:	633b      	str	r3, [r7, #48]	@ 0x30
 800698a:	2300      	movs	r3, #0
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
 800698e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006992:	4622      	mov	r2, r4
 8006994:	462b      	mov	r3, r5
 8006996:	f04f 0000 	mov.w	r0, #0
 800699a:	f04f 0100 	mov.w	r1, #0
 800699e:	0159      	lsls	r1, r3, #5
 80069a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069a4:	0150      	lsls	r0, r2, #5
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4621      	mov	r1, r4
 80069ac:	1a51      	subs	r1, r2, r1
 80069ae:	6139      	str	r1, [r7, #16]
 80069b0:	4629      	mov	r1, r5
 80069b2:	eb63 0301 	sbc.w	r3, r3, r1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069c4:	4659      	mov	r1, fp
 80069c6:	018b      	lsls	r3, r1, #6
 80069c8:	4651      	mov	r1, sl
 80069ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069ce:	4651      	mov	r1, sl
 80069d0:	018a      	lsls	r2, r1, #6
 80069d2:	4651      	mov	r1, sl
 80069d4:	ebb2 0801 	subs.w	r8, r2, r1
 80069d8:	4659      	mov	r1, fp
 80069da:	eb63 0901 	sbc.w	r9, r3, r1
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069f2:	4690      	mov	r8, r2
 80069f4:	4699      	mov	r9, r3
 80069f6:	4623      	mov	r3, r4
 80069f8:	eb18 0303 	adds.w	r3, r8, r3
 80069fc:	60bb      	str	r3, [r7, #8]
 80069fe:	462b      	mov	r3, r5
 8006a00:	eb49 0303 	adc.w	r3, r9, r3
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a12:	4629      	mov	r1, r5
 8006a14:	024b      	lsls	r3, r1, #9
 8006a16:	4621      	mov	r1, r4
 8006a18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	024a      	lsls	r2, r1, #9
 8006a20:	4610      	mov	r0, r2
 8006a22:	4619      	mov	r1, r3
 8006a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a26:	2200      	movs	r2, #0
 8006a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a30:	f7f9 fc36 	bl	80002a0 <__aeabi_uldivmod>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4613      	mov	r3, r2
 8006a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a3c:	e058      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a3e:	4b38      	ldr	r3, [pc, #224]	@ (8006b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	099b      	lsrs	r3, r3, #6
 8006a44:	2200      	movs	r2, #0
 8006a46:	4618      	mov	r0, r3
 8006a48:	4611      	mov	r1, r2
 8006a4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	2300      	movs	r3, #0
 8006a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	f04f 0000 	mov.w	r0, #0
 8006a60:	f04f 0100 	mov.w	r1, #0
 8006a64:	0159      	lsls	r1, r3, #5
 8006a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a6a:	0150      	lsls	r0, r2, #5
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4641      	mov	r1, r8
 8006a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a76:	4649      	mov	r1, r9
 8006a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a90:	ebb2 040a 	subs.w	r4, r2, sl
 8006a94:	eb63 050b 	sbc.w	r5, r3, fp
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	00eb      	lsls	r3, r5, #3
 8006aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aa6:	00e2      	lsls	r2, r4, #3
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	461d      	mov	r5, r3
 8006aac:	4643      	mov	r3, r8
 8006aae:	18e3      	adds	r3, r4, r3
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	eb45 0303 	adc.w	r3, r5, r3
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	028b      	lsls	r3, r1, #10
 8006aca:	4621      	mov	r1, r4
 8006acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	028a      	lsls	r2, r1, #10
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ada:	2200      	movs	r2, #0
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	61fa      	str	r2, [r7, #28]
 8006ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ae4:	f7f9 fbdc 	bl	80002a0 <__aeabi_uldivmod>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4613      	mov	r3, r2
 8006aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006af0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	0c1b      	lsrs	r3, r3, #16
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	3301      	adds	r3, #1
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006b00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b0a:	e002      	b.n	8006b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b0c:	4b05      	ldr	r3, [pc, #20]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3750      	adds	r7, #80	@ 0x50
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b1e:	bf00      	nop
 8006b20:	40023800 	.word	0x40023800
 8006b24:	00f42400 	.word	0x00f42400
 8006b28:	007a1200 	.word	0x007a1200

08006b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b30:	4b03      	ldr	r3, [pc, #12]	@ (8006b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b32:	681b      	ldr	r3, [r3, #0]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000000 	.word	0x20000000

08006b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b48:	f7ff fff0 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	0a9b      	lsrs	r3, r3, #10
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	4903      	ldr	r1, [pc, #12]	@ (8006b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b5a:	5ccb      	ldrb	r3, [r1, r3]
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40023800 	.word	0x40023800
 8006b68:	0800cb30 	.word	0x0800cb30

08006b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b70:	f7ff ffdc 	bl	8006b2c <HAL_RCC_GetHCLKFreq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	0b5b      	lsrs	r3, r3, #13
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	4903      	ldr	r1, [pc, #12]	@ (8006b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b82:	5ccb      	ldrb	r3, [r1, r3]
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	0800cb30 	.word	0x0800cb30

08006b94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d105      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d035      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bbc:	4b62      	ldr	r3, [pc, #392]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc2:	f7fb fdd7 	bl	8002774 <HAL_GetTick>
 8006bc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bca:	f7fb fdd3 	bl	8002774 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e0b0      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	019a      	lsls	r2, r3, #6
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	071b      	lsls	r3, r3, #28
 8006bf4:	4955      	ldr	r1, [pc, #340]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bfc:	4b52      	ldr	r3, [pc, #328]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c02:	f7fb fdb7 	bl	8002774 <HAL_GetTick>
 8006c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c08:	e008      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c0a:	f7fb fdb3 	bl	8002774 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e090      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8083 	beq.w	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	4b44      	ldr	r3, [pc, #272]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	4a43      	ldr	r2, [pc, #268]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c46:	4b41      	ldr	r3, [pc, #260]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c52:	4b3f      	ldr	r3, [pc, #252]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a3e      	ldr	r2, [pc, #248]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c5e:	f7fb fd89 	bl	8002774 <HAL_GetTick>
 8006c62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c64:	e008      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c66:	f7fb fd85 	bl	8002774 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e062      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c78:	4b35      	ldr	r3, [pc, #212]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c84:	4b31      	ldr	r3, [pc, #196]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d02f      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d028      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006caa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cac:	4b29      	ldr	r3, [pc, #164]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cb2:	4b28      	ldr	r3, [pc, #160]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cb8:	4a24      	ldr	r2, [pc, #144]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cbe:	4b23      	ldr	r3, [pc, #140]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d114      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cca:	f7fb fd53 	bl	8002774 <HAL_GetTick>
 8006cce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd0:	e00a      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd2:	f7fb fd4f 	bl	8002774 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e02a      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce8:	4b18      	ldr	r3, [pc, #96]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0ee      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d00:	d10d      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d02:	4b12      	ldr	r3, [pc, #72]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d16:	490d      	ldr	r1, [pc, #52]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	608b      	str	r3, [r1, #8]
 8006d1c:	e005      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	4a0a      	ldr	r2, [pc, #40]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d24:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006d28:	6093      	str	r3, [r2, #8]
 8006d2a:	4b08      	ldr	r3, [pc, #32]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d36:	4905      	ldr	r1, [pc, #20]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	42470068 	.word	0x42470068
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40007000 	.word	0x40007000
 8006d54:	42470e40 	.word	0x42470e40

08006d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d13f      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d76:	4b24      	ldr	r3, [pc, #144]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d006      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d8c:	d12f      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d90:	617b      	str	r3, [r7, #20]
          break;
 8006d92:	e02f      	b.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d94:	4b1c      	ldr	r3, [pc, #112]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006da0:	d108      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006da2:	4b19      	ldr	r3, [pc, #100]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006daa:	4a19      	ldr	r2, [pc, #100]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	e007      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006db4:	4b14      	ldr	r3, [pc, #80]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dbc:	4a15      	ldr	r2, [pc, #84]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006dc4:	4b10      	ldr	r3, [pc, #64]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dca:	099b      	lsrs	r3, r3, #6
 8006dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dde:	0f1b      	lsrs	r3, r3, #28
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	617b      	str	r3, [r7, #20]
          break;
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
          break;
 8006df2:	bf00      	nop
        }
      }
      break;
 8006df4:	e000      	b.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006df6:	bf00      	nop
    }
  }
  return frequency;
 8006df8:	697b      	ldr	r3, [r7, #20]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40023800 	.word	0x40023800
 8006e0c:	00bb8000 	.word	0x00bb8000
 8006e10:	007a1200 	.word	0x007a1200
 8006e14:	00f42400 	.word	0x00f42400

08006e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e07b      	b.n	8006f22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d108      	bne.n	8006e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e3a:	d009      	beq.n	8006e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	61da      	str	r2, [r3, #28]
 8006e42:	e005      	b.n	8006e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fb f81a 	bl	8001ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed4:	ea42 0103 	orr.w	r1, r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	f003 0104 	and.w	r1, r3, #4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	f003 0210 	and.w	r2, r3, #16
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e042      	b.n	8006fc2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fa ffef 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2224      	movs	r2, #36	@ 0x24
 8006f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa0a 	bl	8007388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695a      	ldr	r2, [r3, #20]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fa2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b08a      	sub	sp, #40	@ 0x28
 8006fce:	af02      	add	r7, sp, #8
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	603b      	str	r3, [r7, #0]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d175      	bne.n	80070d6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <HAL_UART_Transmit+0x2c>
 8006ff0:	88fb      	ldrh	r3, [r7, #6]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e06e      	b.n	80070d8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2221      	movs	r2, #33	@ 0x21
 8007004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007008:	f7fb fbb4 	bl	8002774 <HAL_GetTick>
 800700c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	88fa      	ldrh	r2, [r7, #6]
 8007012:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007022:	d108      	bne.n	8007036 <HAL_UART_Transmit+0x6c>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d104      	bne.n	8007036 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800702c:	2300      	movs	r3, #0
 800702e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	61bb      	str	r3, [r7, #24]
 8007034:	e003      	b.n	800703e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800703e:	e02e      	b.n	800709e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2200      	movs	r2, #0
 8007048:	2180      	movs	r1, #128	@ 0x80
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f8df 	bl	800720e <UART_WaitOnFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e03a      	b.n	80070d8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007076:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	3302      	adds	r3, #2
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	e007      	b.n	8007090 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	781a      	ldrb	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	3301      	adds	r3, #1
 800708e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1cb      	bne.n	8007040 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2200      	movs	r2, #0
 80070b0:	2140      	movs	r1, #64	@ 0x40
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f8ab 	bl	800720e <UART_WaitOnFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e006      	b.n	80070d8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
  }
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08a      	sub	sp, #40	@ 0x28
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	f040 8081 	bne.w	8007204 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <HAL_UART_Receive+0x2e>
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e079      	b.n	8007206 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2222      	movs	r2, #34	@ 0x22
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007126:	f7fb fb25 	bl	8002774 <HAL_GetTick>
 800712a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	88fa      	ldrh	r2, [r7, #6]
 8007136:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007140:	d108      	bne.n	8007154 <HAL_UART_Receive+0x74>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	e003      	b.n	800715c <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007158:	2300      	movs	r3, #0
 800715a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800715c:	e047      	b.n	80071ee <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2200      	movs	r2, #0
 8007166:	2120      	movs	r1, #32
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f850 	bl	800720e <UART_WaitOnFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2220      	movs	r2, #32
 8007178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e042      	b.n	8007206 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10c      	bne.n	80071a0 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	b29b      	uxth	r3, r3
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	b29a      	uxth	r2, r3
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	3302      	adds	r3, #2
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	e01f      	b.n	80071e0 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a8:	d007      	beq.n	80071ba <HAL_UART_Receive+0xda>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <HAL_UART_Receive+0xe8>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e008      	b.n	80071da <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	3301      	adds	r3, #1
 80071de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1b2      	bne.n	800715e <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	e000      	b.n	8007206 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007204:	2302      	movs	r3, #2
  }
}
 8007206:	4618      	mov	r0, r3
 8007208:	3720      	adds	r7, #32
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	4613      	mov	r3, r2
 800721c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800721e:	e03b      	b.n	8007298 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d037      	beq.n	8007298 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007228:	f7fb faa4 	bl	8002774 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	6a3a      	ldr	r2, [r7, #32]
 8007234:	429a      	cmp	r2, r3
 8007236:	d302      	bcc.n	800723e <UART_WaitOnFlagUntilTimeout+0x30>
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e03a      	b.n	80072b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d023      	beq.n	8007298 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b80      	cmp	r3, #128	@ 0x80
 8007254:	d020      	beq.n	8007298 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b40      	cmp	r3, #64	@ 0x40
 800725a:	d01d      	beq.n	8007298 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b08      	cmp	r3, #8
 8007268:	d116      	bne.n	8007298 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f81d 	bl	80072c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2208      	movs	r2, #8
 800728a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e00f      	b.n	80072b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4013      	ands	r3, r2
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	bf0c      	ite	eq
 80072a8:	2301      	moveq	r3, #1
 80072aa:	2300      	movne	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d0b4      	beq.n	8007220 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b095      	sub	sp, #84	@ 0x54
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	330c      	adds	r3, #12
 80072ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e5      	bne.n	80072c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3314      	adds	r3, #20
 8007302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	61fb      	str	r3, [r7, #28]
   return(result);
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3314      	adds	r3, #20
 800731a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800731c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800731e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007334:	2b01      	cmp	r3, #1
 8007336:	d119      	bne.n	800736c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	60bb      	str	r3, [r7, #8]
   return(result);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f023 0310 	bic.w	r3, r3, #16
 800734e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007358:	61ba      	str	r2, [r7, #24]
 800735a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6979      	ldr	r1, [r7, #20]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	613b      	str	r3, [r7, #16]
   return(result);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800737a:	bf00      	nop
 800737c:	3754      	adds	r7, #84	@ 0x54
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
	...

08007388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800738c:	b0c0      	sub	sp, #256	@ 0x100
 800738e:	af00      	add	r7, sp, #0
 8007390:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a4:	68d9      	ldr	r1, [r3, #12]
 80073a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	ea40 0301 	orr.w	r3, r0, r1
 80073b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	431a      	orrs	r2, r3
 80073c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073e0:	f021 010c 	bic.w	r1, r1, #12
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073ee:	430b      	orrs	r3, r1
 80073f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007402:	6999      	ldr	r1, [r3, #24]
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	ea40 0301 	orr.w	r3, r0, r1
 800740e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4b8f      	ldr	r3, [pc, #572]	@ (8007654 <UART_SetConfig+0x2cc>)
 8007418:	429a      	cmp	r2, r3
 800741a:	d005      	beq.n	8007428 <UART_SetConfig+0xa0>
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4b8d      	ldr	r3, [pc, #564]	@ (8007658 <UART_SetConfig+0x2d0>)
 8007424:	429a      	cmp	r2, r3
 8007426:	d104      	bne.n	8007432 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007428:	f7ff fba0 	bl	8006b6c <HAL_RCC_GetPCLK2Freq>
 800742c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007430:	e003      	b.n	800743a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007432:	f7ff fb87 	bl	8006b44 <HAL_RCC_GetPCLK1Freq>
 8007436:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007444:	f040 810c 	bne.w	8007660 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800744c:	2200      	movs	r2, #0
 800744e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007452:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007456:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800745a:	4622      	mov	r2, r4
 800745c:	462b      	mov	r3, r5
 800745e:	1891      	adds	r1, r2, r2
 8007460:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007462:	415b      	adcs	r3, r3
 8007464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007466:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800746a:	4621      	mov	r1, r4
 800746c:	eb12 0801 	adds.w	r8, r2, r1
 8007470:	4629      	mov	r1, r5
 8007472:	eb43 0901 	adc.w	r9, r3, r1
 8007476:	f04f 0200 	mov.w	r2, #0
 800747a:	f04f 0300 	mov.w	r3, #0
 800747e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800748a:	4690      	mov	r8, r2
 800748c:	4699      	mov	r9, r3
 800748e:	4623      	mov	r3, r4
 8007490:	eb18 0303 	adds.w	r3, r8, r3
 8007494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007498:	462b      	mov	r3, r5
 800749a:	eb49 0303 	adc.w	r3, r9, r3
 800749e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074b6:	460b      	mov	r3, r1
 80074b8:	18db      	adds	r3, r3, r3
 80074ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80074bc:	4613      	mov	r3, r2
 80074be:	eb42 0303 	adc.w	r3, r2, r3
 80074c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80074c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074cc:	f7f8 fee8 	bl	80002a0 <__aeabi_uldivmod>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4b61      	ldr	r3, [pc, #388]	@ (800765c <UART_SetConfig+0x2d4>)
 80074d6:	fba3 2302 	umull	r2, r3, r3, r2
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	011c      	lsls	r4, r3, #4
 80074de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074f0:	4642      	mov	r2, r8
 80074f2:	464b      	mov	r3, r9
 80074f4:	1891      	adds	r1, r2, r2
 80074f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074f8:	415b      	adcs	r3, r3
 80074fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007500:	4641      	mov	r1, r8
 8007502:	eb12 0a01 	adds.w	sl, r2, r1
 8007506:	4649      	mov	r1, r9
 8007508:	eb43 0b01 	adc.w	fp, r3, r1
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007518:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800751c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007520:	4692      	mov	sl, r2
 8007522:	469b      	mov	fp, r3
 8007524:	4643      	mov	r3, r8
 8007526:	eb1a 0303 	adds.w	r3, sl, r3
 800752a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800752e:	464b      	mov	r3, r9
 8007530:	eb4b 0303 	adc.w	r3, fp, r3
 8007534:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007544:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007548:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800754c:	460b      	mov	r3, r1
 800754e:	18db      	adds	r3, r3, r3
 8007550:	643b      	str	r3, [r7, #64]	@ 0x40
 8007552:	4613      	mov	r3, r2
 8007554:	eb42 0303 	adc.w	r3, r2, r3
 8007558:	647b      	str	r3, [r7, #68]	@ 0x44
 800755a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800755e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007562:	f7f8 fe9d 	bl	80002a0 <__aeabi_uldivmod>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4611      	mov	r1, r2
 800756c:	4b3b      	ldr	r3, [pc, #236]	@ (800765c <UART_SetConfig+0x2d4>)
 800756e:	fba3 2301 	umull	r2, r3, r3, r1
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	2264      	movs	r2, #100	@ 0x64
 8007576:	fb02 f303 	mul.w	r3, r2, r3
 800757a:	1acb      	subs	r3, r1, r3
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007582:	4b36      	ldr	r3, [pc, #216]	@ (800765c <UART_SetConfig+0x2d4>)
 8007584:	fba3 2302 	umull	r2, r3, r3, r2
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007590:	441c      	add	r4, r3
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007596:	2200      	movs	r2, #0
 8007598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800759c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	1891      	adds	r1, r2, r2
 80075aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075ac:	415b      	adcs	r3, r3
 80075ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075b4:	4641      	mov	r1, r8
 80075b6:	1851      	adds	r1, r2, r1
 80075b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80075ba:	4649      	mov	r1, r9
 80075bc:	414b      	adcs	r3, r1
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075cc:	4659      	mov	r1, fp
 80075ce:	00cb      	lsls	r3, r1, #3
 80075d0:	4651      	mov	r1, sl
 80075d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d6:	4651      	mov	r1, sl
 80075d8:	00ca      	lsls	r2, r1, #3
 80075da:	4610      	mov	r0, r2
 80075dc:	4619      	mov	r1, r3
 80075de:	4603      	mov	r3, r0
 80075e0:	4642      	mov	r2, r8
 80075e2:	189b      	adds	r3, r3, r2
 80075e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075e8:	464b      	mov	r3, r9
 80075ea:	460a      	mov	r2, r1
 80075ec:	eb42 0303 	adc.w	r3, r2, r3
 80075f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007600:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007608:	460b      	mov	r3, r1
 800760a:	18db      	adds	r3, r3, r3
 800760c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800760e:	4613      	mov	r3, r2
 8007610:	eb42 0303 	adc.w	r3, r2, r3
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800761a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800761e:	f7f8 fe3f 	bl	80002a0 <__aeabi_uldivmod>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4b0d      	ldr	r3, [pc, #52]	@ (800765c <UART_SetConfig+0x2d4>)
 8007628:	fba3 1302 	umull	r1, r3, r3, r2
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	2164      	movs	r1, #100	@ 0x64
 8007630:	fb01 f303 	mul.w	r3, r1, r3
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	3332      	adds	r3, #50	@ 0x32
 800763a:	4a08      	ldr	r2, [pc, #32]	@ (800765c <UART_SetConfig+0x2d4>)
 800763c:	fba2 2303 	umull	r2, r3, r2, r3
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	f003 0207 	and.w	r2, r3, #7
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4422      	add	r2, r4
 800764e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007650:	e106      	b.n	8007860 <UART_SetConfig+0x4d8>
 8007652:	bf00      	nop
 8007654:	40011000 	.word	0x40011000
 8007658:	40011400 	.word	0x40011400
 800765c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007664:	2200      	movs	r2, #0
 8007666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800766a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800766e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007672:	4642      	mov	r2, r8
 8007674:	464b      	mov	r3, r9
 8007676:	1891      	adds	r1, r2, r2
 8007678:	6239      	str	r1, [r7, #32]
 800767a:	415b      	adcs	r3, r3
 800767c:	627b      	str	r3, [r7, #36]	@ 0x24
 800767e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007682:	4641      	mov	r1, r8
 8007684:	1854      	adds	r4, r2, r1
 8007686:	4649      	mov	r1, r9
 8007688:	eb43 0501 	adc.w	r5, r3, r1
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	00eb      	lsls	r3, r5, #3
 8007696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800769a:	00e2      	lsls	r2, r4, #3
 800769c:	4614      	mov	r4, r2
 800769e:	461d      	mov	r5, r3
 80076a0:	4643      	mov	r3, r8
 80076a2:	18e3      	adds	r3, r4, r3
 80076a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076a8:	464b      	mov	r3, r9
 80076aa:	eb45 0303 	adc.w	r3, r5, r3
 80076ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076ce:	4629      	mov	r1, r5
 80076d0:	008b      	lsls	r3, r1, #2
 80076d2:	4621      	mov	r1, r4
 80076d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076d8:	4621      	mov	r1, r4
 80076da:	008a      	lsls	r2, r1, #2
 80076dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076e0:	f7f8 fdde 	bl	80002a0 <__aeabi_uldivmod>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4b60      	ldr	r3, [pc, #384]	@ (800786c <UART_SetConfig+0x4e4>)
 80076ea:	fba3 2302 	umull	r2, r3, r3, r2
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	011c      	lsls	r4, r3, #4
 80076f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007700:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007704:	4642      	mov	r2, r8
 8007706:	464b      	mov	r3, r9
 8007708:	1891      	adds	r1, r2, r2
 800770a:	61b9      	str	r1, [r7, #24]
 800770c:	415b      	adcs	r3, r3
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007714:	4641      	mov	r1, r8
 8007716:	1851      	adds	r1, r2, r1
 8007718:	6139      	str	r1, [r7, #16]
 800771a:	4649      	mov	r1, r9
 800771c:	414b      	adcs	r3, r1
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800772c:	4659      	mov	r1, fp
 800772e:	00cb      	lsls	r3, r1, #3
 8007730:	4651      	mov	r1, sl
 8007732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007736:	4651      	mov	r1, sl
 8007738:	00ca      	lsls	r2, r1, #3
 800773a:	4610      	mov	r0, r2
 800773c:	4619      	mov	r1, r3
 800773e:	4603      	mov	r3, r0
 8007740:	4642      	mov	r2, r8
 8007742:	189b      	adds	r3, r3, r2
 8007744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007748:	464b      	mov	r3, r9
 800774a:	460a      	mov	r2, r1
 800774c:	eb42 0303 	adc.w	r3, r2, r3
 8007750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800775e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800776c:	4649      	mov	r1, r9
 800776e:	008b      	lsls	r3, r1, #2
 8007770:	4641      	mov	r1, r8
 8007772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007776:	4641      	mov	r1, r8
 8007778:	008a      	lsls	r2, r1, #2
 800777a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800777e:	f7f8 fd8f 	bl	80002a0 <__aeabi_uldivmod>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4611      	mov	r1, r2
 8007788:	4b38      	ldr	r3, [pc, #224]	@ (800786c <UART_SetConfig+0x4e4>)
 800778a:	fba3 2301 	umull	r2, r3, r3, r1
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	2264      	movs	r2, #100	@ 0x64
 8007792:	fb02 f303 	mul.w	r3, r2, r3
 8007796:	1acb      	subs	r3, r1, r3
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	3332      	adds	r3, #50	@ 0x32
 800779c:	4a33      	ldr	r2, [pc, #204]	@ (800786c <UART_SetConfig+0x4e4>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077a8:	441c      	add	r4, r3
 80077aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077ae:	2200      	movs	r2, #0
 80077b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80077b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80077b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077b8:	4642      	mov	r2, r8
 80077ba:	464b      	mov	r3, r9
 80077bc:	1891      	adds	r1, r2, r2
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	415b      	adcs	r3, r3
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077c8:	4641      	mov	r1, r8
 80077ca:	1851      	adds	r1, r2, r1
 80077cc:	6039      	str	r1, [r7, #0]
 80077ce:	4649      	mov	r1, r9
 80077d0:	414b      	adcs	r3, r1
 80077d2:	607b      	str	r3, [r7, #4]
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077e0:	4659      	mov	r1, fp
 80077e2:	00cb      	lsls	r3, r1, #3
 80077e4:	4651      	mov	r1, sl
 80077e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ea:	4651      	mov	r1, sl
 80077ec:	00ca      	lsls	r2, r1, #3
 80077ee:	4610      	mov	r0, r2
 80077f0:	4619      	mov	r1, r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	4642      	mov	r2, r8
 80077f6:	189b      	adds	r3, r3, r2
 80077f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077fa:	464b      	mov	r3, r9
 80077fc:	460a      	mov	r2, r1
 80077fe:	eb42 0303 	adc.w	r3, r2, r3
 8007802:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	663b      	str	r3, [r7, #96]	@ 0x60
 800780e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007810:	f04f 0200 	mov.w	r2, #0
 8007814:	f04f 0300 	mov.w	r3, #0
 8007818:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800781c:	4649      	mov	r1, r9
 800781e:	008b      	lsls	r3, r1, #2
 8007820:	4641      	mov	r1, r8
 8007822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007826:	4641      	mov	r1, r8
 8007828:	008a      	lsls	r2, r1, #2
 800782a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800782e:	f7f8 fd37 	bl	80002a0 <__aeabi_uldivmod>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4b0d      	ldr	r3, [pc, #52]	@ (800786c <UART_SetConfig+0x4e4>)
 8007838:	fba3 1302 	umull	r1, r3, r3, r2
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	2164      	movs	r1, #100	@ 0x64
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	3332      	adds	r3, #50	@ 0x32
 800784a:	4a08      	ldr	r2, [pc, #32]	@ (800786c <UART_SetConfig+0x4e4>)
 800784c:	fba2 2303 	umull	r2, r3, r2, r3
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	f003 020f 	and.w	r2, r3, #15
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4422      	add	r2, r4
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007866:	46bd      	mov	sp, r7
 8007868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800786c:	51eb851f 	.word	0x51eb851f

08007870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007870:	b084      	sub	sp, #16
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	f107 001c 	add.w	r0, r7, #28
 800787e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007882:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007886:	2b01      	cmp	r3, #1
 8007888:	d123      	bne.n	80078d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800789e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d105      	bne.n	80078c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9dc 	bl	8007c84 <USB_CoreReset>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]
 80078d0:	e01b      	b.n	800790a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9d0 	bl	8007c84 <USB_CoreReset>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80078fc:	e005      	b.n	800790a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007902:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800790a:	7fbb      	ldrb	r3, [r7, #30]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d10b      	bne.n	8007928 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f043 0206 	orr.w	r2, r3, #6
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f043 0220 	orr.w	r2, r3, #32
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007934:	b004      	add	sp, #16
 8007936:	4770      	bx	lr

08007938 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f043 0201 	orr.w	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f023 0201 	bic.w	r2, r3, #1
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d115      	bne.n	80079ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079aa:	200a      	movs	r0, #10
 80079ac:	f7fa feee 	bl	800278c <HAL_Delay>
      ms += 10U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	330a      	adds	r3, #10
 80079b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f956 	bl	8007c68 <USB_GetMode>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d01e      	beq.n	8007a00 <USB_SetCurrentMode+0x84>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80079c6:	d9f0      	bls.n	80079aa <USB_SetCurrentMode+0x2e>
 80079c8:	e01a      	b.n	8007a00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d115      	bne.n	80079fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079dc:	200a      	movs	r0, #10
 80079de:	f7fa fed5 	bl	800278c <HAL_Delay>
      ms += 10U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	330a      	adds	r3, #10
 80079e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f93d 	bl	8007c68 <USB_GetMode>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d005      	beq.n	8007a00 <USB_SetCurrentMode+0x84>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80079f8:	d9f0      	bls.n	80079dc <USB_SetCurrentMode+0x60>
 80079fa:	e001      	b.n	8007a00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e005      	b.n	8007a0c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2bc8      	cmp	r3, #200	@ 0xc8
 8007a04:	d101      	bne.n	8007a0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3301      	adds	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a2e:	d901      	bls.n	8007a34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e01b      	b.n	8007a6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	daf2      	bge.n	8007a22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	019b      	lsls	r3, r3, #6
 8007a44:	f043 0220 	orr.w	r2, r3, #32
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a58:	d901      	bls.n	8007a5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e006      	b.n	8007a6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	d0f0      	beq.n	8007a4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a90:	d901      	bls.n	8007a96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e018      	b.n	8007ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	daf2      	bge.n	8007a84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2210      	movs	r2, #16
 8007aa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ab4:	d901      	bls.n	8007aba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e006      	b.n	8007ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f003 0310 	and.w	r3, r3, #16
 8007ac2:	2b10      	cmp	r3, #16
 8007ac4:	d0f0      	beq.n	8007aa8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b089      	sub	sp, #36	@ 0x24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	71fb      	strb	r3, [r7, #7]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007af2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d123      	bne.n	8007b42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007afa:	88bb      	ldrh	r3, [r7, #4]
 8007afc:	3303      	adds	r3, #3
 8007afe:	089b      	lsrs	r3, r3, #2
 8007b00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b02:	2300      	movs	r3, #0
 8007b04:	61bb      	str	r3, [r7, #24]
 8007b06:	e018      	b.n	8007b3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	031a      	lsls	r2, r3, #12
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b14:	461a      	mov	r2, r3
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	3301      	adds	r3, #1
 8007b26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	3301      	adds	r3, #1
 8007b32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	3301      	adds	r3, #1
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d3e2      	bcc.n	8007b08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3724      	adds	r7, #36	@ 0x24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b08b      	sub	sp, #44	@ 0x2c
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	089b      	lsrs	r3, r3, #2
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	623b      	str	r3, [r7, #32]
 8007b7a:	e014      	b.n	8007ba6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	3301      	adds	r3, #1
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	3301      	adds	r3, #1
 8007b98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	623b      	str	r3, [r7, #32]
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d3e6      	bcc.n	8007b7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bae:	8bfb      	ldrh	r3, [r7, #30]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01e      	beq.n	8007bf2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f107 0310 	add.w	r3, r7, #16
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd8:	701a      	strb	r2, [r3, #0]
      i++;
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	623b      	str	r3, [r7, #32]
      pDest++;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	3301      	adds	r3, #1
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007be6:	8bfb      	ldrh	r3, [r7, #30]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bec:	8bfb      	ldrh	r3, [r7, #30]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1ea      	bne.n	8007bc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	372c      	adds	r7, #44	@ 0x2c
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4013      	ands	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c18:	68fb      	ldr	r3, [r7, #12]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	4013      	ands	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 0301 	and.w	r3, r3, #1
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c9c:	d901      	bls.n	8007ca2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e01b      	b.n	8007cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	daf2      	bge.n	8007c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f043 0201 	orr.w	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cc6:	d901      	bls.n	8007ccc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e006      	b.n	8007cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d0f0      	beq.n	8007cba <USB_CoreReset+0x36>

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ce8:	b084      	sub	sp, #16
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d119      	bne.n	8007d72 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d10a      	bne.n	8007d5c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d54:	f043 0304 	orr.w	r3, r3, #4
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	e014      	b.n	8007d86 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d6a:	f023 0304 	bic.w	r3, r3, #4
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	e009      	b.n	8007d86 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d80:	f023 0304 	bic.w	r3, r3, #4
 8007d84:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d86:	2110      	movs	r1, #16
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fe43 	bl	8007a14 <USB_FlushTxFifo>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fe6d 	bl	8007a78 <USB_FlushRxFifo>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007da8:	2300      	movs	r3, #0
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	e015      	b.n	8007dda <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dde:	461a      	mov	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d3e3      	bcc.n	8007dae <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295
 8007df2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a18      	ldr	r2, [pc, #96]	@ (8007e58 <USB_HostInit+0x170>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d10b      	bne.n	8007e14 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e02:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a15      	ldr	r2, [pc, #84]	@ (8007e5c <USB_HostInit+0x174>)
 8007e08:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a14      	ldr	r2, [pc, #80]	@ (8007e60 <USB_HostInit+0x178>)
 8007e0e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007e12:	e009      	b.n	8007e28 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2280      	movs	r2, #128	@ 0x80
 8007e18:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a11      	ldr	r2, [pc, #68]	@ (8007e64 <USB_HostInit+0x17c>)
 8007e1e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a11      	ldr	r2, [pc, #68]	@ (8007e68 <USB_HostInit+0x180>)
 8007e24:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d105      	bne.n	8007e3c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	f043 0210 	orr.w	r2, r3, #16
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	4b0a      	ldr	r3, [pc, #40]	@ (8007e6c <USB_HostInit+0x184>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e54:	b004      	add	sp, #16
 8007e56:	4770      	bx	lr
 8007e58:	40040000 	.word	0x40040000
 8007e5c:	01000200 	.word	0x01000200
 8007e60:	00e00300 	.word	0x00e00300
 8007e64:	00600080 	.word	0x00600080
 8007e68:	004000e0 	.word	0x004000e0
 8007e6c:	a3200008 	.word	0xa3200008

08007e70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d107      	bne.n	8007ec2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007ebe:	6053      	str	r3, [r2, #4]
 8007ec0:	e00c      	b.n	8007edc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d107      	bne.n	8007ed8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007ed4:	6053      	str	r3, [r2, #4]
 8007ed6:	e001      	b.n	8007edc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e000      	b.n	8007ede <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f0a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f18:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f1a:	2064      	movs	r0, #100	@ 0x64
 8007f1c:	f7fa fc36 	bl	800278c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f2c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f2e:	200a      	movs	r0, #10
 8007f30:	f7fa fc2c 	bl	800278c <HAL_Delay>

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f62:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <USB_DriveVbus+0x44>
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d106      	bne.n	8007f82 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f80:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f8c:	d109      	bne.n	8007fa2 <USB_DriveVbus+0x64>
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fa0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	0c5b      	lsrs	r3, r3, #17
 8007fce:	f003 0303 	and.w	r3, r3, #3
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	b29b      	uxth	r3, r3
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	461a      	mov	r2, r3
 800800e:	4603      	mov	r3, r0
 8008010:	70fb      	strb	r3, [r7, #3]
 8008012:	460b      	mov	r3, r1
 8008014:	70bb      	strb	r3, [r7, #2]
 8008016:	4613      	mov	r3, r2
 8008018:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008022:	78fb      	ldrb	r3, [r7, #3]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4413      	add	r3, r2
 800802a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802e:	461a      	mov	r2, r3
 8008030:	f04f 33ff 	mov.w	r3, #4294967295
 8008034:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008036:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800803a:	2b03      	cmp	r3, #3
 800803c:	d87c      	bhi.n	8008138 <USB_HC_Init+0x138>
 800803e:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <USB_HC_Init+0x44>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008055 	.word	0x08008055
 8008048:	080080fb 	.word	0x080080fb
 800804c:	08008055 	.word	0x08008055
 8008050:	080080bd 	.word	0x080080bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4413      	add	r3, r2
 800805c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008060:	461a      	mov	r2, r3
 8008062:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008066:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800806c:	2b00      	cmp	r3, #0
 800806e:	da10      	bge.n	8008092 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	4413      	add	r3, r2
 8008078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	440a      	add	r2, r1
 8008086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800808a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800808e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008090:	e055      	b.n	800813e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a6f      	ldr	r2, [pc, #444]	@ (8008254 <USB_HC_Init+0x254>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d151      	bne.n	800813e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80080b8:	60d3      	str	r3, [r2, #12]
      break;
 80080ba:	e040      	b.n	800813e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c8:	461a      	mov	r2, r3
 80080ca:	f240 639d 	movw	r3, #1693	@ 0x69d
 80080ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	da34      	bge.n	8008142 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	78fa      	ldrb	r2, [r7, #3]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080f8:	e023      	b.n	8008142 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	4413      	add	r3, r2
 8008102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008106:	461a      	mov	r2, r3
 8008108:	f240 2325 	movw	r3, #549	@ 0x225
 800810c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800810e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008112:	2b00      	cmp	r3, #0
 8008114:	da17      	bge.n	8008146 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4413      	add	r3, r2
 800811e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	78fa      	ldrb	r2, [r7, #3]
 8008126:	0151      	lsls	r1, r2, #5
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	440a      	add	r2, r1
 800812c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008130:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008134:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008136:	e006      	b.n	8008146 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	77fb      	strb	r3, [r7, #31]
      break;
 800813c:	e004      	b.n	8008148 <USB_HC_Init+0x148>
      break;
 800813e:	bf00      	nop
 8008140:	e002      	b.n	8008148 <USB_HC_Init+0x148>
      break;
 8008142:	bf00      	nop
 8008144:	e000      	b.n	8008148 <USB_HC_Init+0x148>
      break;
 8008146:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	4413      	add	r3, r2
 8008150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008154:	461a      	mov	r2, r3
 8008156:	2300      	movs	r3, #0
 8008158:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	4413      	add	r3, r2
 8008162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	0151      	lsls	r1, r2, #5
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	440a      	add	r2, r1
 8008170:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008174:	f043 0302 	orr.w	r3, r3, #2
 8008178:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	f003 030f 	and.w	r3, r3, #15
 8008188:	2101      	movs	r1, #1
 800818a:	fa01 f303 	lsl.w	r3, r1, r3
 800818e:	6939      	ldr	r1, [r7, #16]
 8008190:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008194:	4313      	orrs	r3, r2
 8008196:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80081a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	da03      	bge.n	80081b4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80081ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081b0:	61bb      	str	r3, [r7, #24]
 80081b2:	e001      	b.n	80081b8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fef9 	bl	8007fb0 <USB_GetHostSpeed>
 80081be:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80081c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d106      	bne.n	80081d6 <USB_HC_Init+0x1d6>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d003      	beq.n	80081d6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e001      	b.n	80081da <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081da:	787b      	ldrb	r3, [r7, #1]
 80081dc:	059b      	lsls	r3, r3, #22
 80081de:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081e2:	78bb      	ldrb	r3, [r7, #2]
 80081e4:	02db      	lsls	r3, r3, #11
 80081e6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081ea:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081f0:	049b      	lsls	r3, r3, #18
 80081f2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081f6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80081f8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80081fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081fe:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	431a      	orrs	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008208:	78fa      	ldrb	r2, [r7, #3]
 800820a:	0151      	lsls	r1, r2, #5
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	440a      	add	r2, r1
 8008210:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008218:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800821a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800821e:	2b03      	cmp	r3, #3
 8008220:	d003      	beq.n	800822a <USB_HC_Init+0x22a>
 8008222:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d10f      	bne.n	800824a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	4413      	add	r3, r2
 8008232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	440a      	add	r2, r1
 8008240:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008244:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008248:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800824a:	7ffb      	ldrb	r3, [r7, #31]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	40040000 	.word	0x40040000

08008258 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08c      	sub	sp, #48	@ 0x30
 800825c:	af02      	add	r7, sp, #8
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	785b      	ldrb	r3, [r3, #1]
 800826e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008274:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4a5d      	ldr	r2, [pc, #372]	@ (80083f0 <USB_HC_StartXfer+0x198>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d12f      	bne.n	80082de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d11c      	bne.n	80082be <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	7c9b      	ldrb	r3, [r3, #18]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <USB_HC_StartXfer+0x3c>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	7c9b      	ldrb	r3, [r3, #18]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d124      	bne.n	80082de <USB_HC_StartXfer+0x86>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	799b      	ldrb	r3, [r3, #6]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d120      	bne.n	80082de <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	6a3a      	ldr	r2, [r7, #32]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ba:	60d3      	str	r3, [r2, #12]
 80082bc:	e00f      	b.n	80082de <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	791b      	ldrb	r3, [r3, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <USB_HC_StartXfer+0x86>
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	795b      	ldrb	r3, [r3, #5]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d107      	bne.n	80082de <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	4619      	mov	r1, r3
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 fb6b 	bl	80089b0 <USB_DoPing>
        return HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	e232      	b.n	8008744 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	799b      	ldrb	r3, [r3, #6]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d158      	bne.n	8008398 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80082e6:	2301      	movs	r3, #1
 80082e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	78db      	ldrb	r3, [r3, #3]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	8a92      	ldrh	r2, [r2, #20]
 80082f8:	fb03 f202 	mul.w	r2, r3, r2
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	61da      	str	r2, [r3, #28]
 8008300:	e07c      	b.n	80083fc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	7c9b      	ldrb	r3, [r3, #18]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d130      	bne.n	800836c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	2bbc      	cmp	r3, #188	@ 0xbc
 8008310:	d918      	bls.n	8008344 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	8a9b      	ldrh	r3, [r3, #20]
 8008316:	461a      	mov	r2, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	69da      	ldr	r2, [r3, #28]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d003      	beq.n	8008334 <USB_HC_StartXfer+0xdc>
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d103      	bne.n	800833c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2202      	movs	r2, #2
 8008338:	60da      	str	r2, [r3, #12]
 800833a:	e05f      	b.n	80083fc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2201      	movs	r2, #1
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	e05b      	b.n	80083fc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	6a1a      	ldr	r2, [r3, #32]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d007      	beq.n	8008364 <USB_HC_StartXfer+0x10c>
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d003      	beq.n	8008364 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2204      	movs	r2, #4
 8008360:	60da      	str	r2, [r3, #12]
 8008362:	e04b      	b.n	80083fc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2203      	movs	r2, #3
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	e047      	b.n	80083fc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d10d      	bne.n	800838e <USB_HC_StartXfer+0x136>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	8a92      	ldrh	r2, [r2, #20]
 800837a:	4293      	cmp	r3, r2
 800837c:	d907      	bls.n	800838e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800837e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	8a92      	ldrh	r2, [r2, #20]
 8008384:	fb03 f202 	mul.w	r2, r3, r2
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	61da      	str	r2, [r3, #28]
 800838c:	e036      	b.n	80083fc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	6a1a      	ldr	r2, [r3, #32]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	61da      	str	r2, [r3, #28]
 8008396:	e031      	b.n	80083fc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d018      	beq.n	80083d2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	8a92      	ldrh	r2, [r2, #20]
 80083a8:	4413      	add	r3, r2
 80083aa:	3b01      	subs	r3, #1
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	8a92      	ldrh	r2, [r2, #20]
 80083b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80083b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80083b8:	8b7b      	ldrh	r3, [r7, #26]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d90b      	bls.n	80083d6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80083be:	8b7b      	ldrh	r3, [r7, #26]
 80083c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	8a92      	ldrh	r2, [r2, #20]
 80083c8:	fb03 f202 	mul.w	r2, r3, r2
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	61da      	str	r2, [r3, #28]
 80083d0:	e001      	b.n	80083d6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80083d2:	2301      	movs	r3, #1
 80083d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	78db      	ldrb	r3, [r3, #3]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	8a92      	ldrh	r2, [r2, #20]
 80083e4:	fb03 f202 	mul.w	r2, r3, r2
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	61da      	str	r2, [r3, #28]
 80083ec:	e006      	b.n	80083fc <USB_HC_StartXfer+0x1a4>
 80083ee:	bf00      	nop
 80083f0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008404:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008406:	04d9      	lsls	r1, r3, #19
 8008408:	4ba3      	ldr	r3, [pc, #652]	@ (8008698 <USB_HC_StartXfer+0x440>)
 800840a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800840c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	7d9b      	ldrb	r3, [r3, #22]
 8008412:	075b      	lsls	r3, r3, #29
 8008414:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008418:	69f9      	ldr	r1, [r7, #28]
 800841a:	0148      	lsls	r0, r1, #5
 800841c:	6a39      	ldr	r1, [r7, #32]
 800841e:	4401      	add	r1, r0
 8008420:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008424:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008426:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6999      	ldr	r1, [r3, #24]
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	4413      	add	r3, r2
 800843a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800843e:	460a      	mov	r2, r1
 8008440:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	bf0c      	ite	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	2300      	movne	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	4413      	add	r3, r2
 8008462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	6a3a      	ldr	r2, [r7, #32]
 800846e:	440a      	add	r2, r1
 8008470:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008474:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008478:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	4413      	add	r3, r2
 8008482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	7e7b      	ldrb	r3, [r7, #25]
 800848a:	075b      	lsls	r3, r3, #29
 800848c:	69f9      	ldr	r1, [r7, #28]
 800848e:	0148      	lsls	r0, r1, #5
 8008490:	6a39      	ldr	r1, [r7, #32]
 8008492:	4401      	add	r1, r0
 8008494:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008498:	4313      	orrs	r3, r2
 800849a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	799b      	ldrb	r3, [r3, #6]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	f040 80c3 	bne.w	800862c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	7c5b      	ldrb	r3, [r3, #17]
 80084aa:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80084b0:	4313      	orrs	r3, r2
 80084b2:	69fa      	ldr	r2, [r7, #28]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	6a3a      	ldr	r2, [r7, #32]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80084be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80084c2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	0151      	lsls	r1, r2, #5
 80084d6:	6a3a      	ldr	r2, [r7, #32]
 80084d8:	440a      	add	r2, r1
 80084da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084de:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80084e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	79db      	ldrb	r3, [r3, #7]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d123      	bne.n	8008534 <USB_HC_StartXfer+0x2dc>
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	78db      	ldrb	r3, [r3, #3]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d11f      	bne.n	8008534 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	6a3a      	ldr	r2, [r7, #32]
 8008508:	440a      	add	r2, r1
 800850a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800850e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008512:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	4413      	add	r3, r2
 800851c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	440a      	add	r2, r1
 800852a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800852e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008532:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	7c9b      	ldrb	r3, [r3, #18]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d003      	beq.n	8008544 <USB_HC_StartXfer+0x2ec>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	7c9b      	ldrb	r3, [r3, #18]
 8008540:	2b03      	cmp	r3, #3
 8008542:	d117      	bne.n	8008574 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008548:	2b01      	cmp	r3, #1
 800854a:	d113      	bne.n	8008574 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	78db      	ldrb	r3, [r3, #3]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d10f      	bne.n	8008574 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	4413      	add	r3, r2
 800855c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	0151      	lsls	r1, r2, #5
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	440a      	add	r2, r1
 800856a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800856e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008572:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	7c9b      	ldrb	r3, [r3, #18]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d162      	bne.n	8008642 <USB_HC_StartXfer+0x3ea>
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	78db      	ldrb	r3, [r3, #3]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d15e      	bne.n	8008642 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	3b01      	subs	r3, #1
 800858a:	2b03      	cmp	r3, #3
 800858c:	d858      	bhi.n	8008640 <USB_HC_StartXfer+0x3e8>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <USB_HC_StartXfer+0x33c>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085a5 	.word	0x080085a5
 8008598:	080085c7 	.word	0x080085c7
 800859c:	080085e9 	.word	0x080085e9
 80085a0:	0800860b 	.word	0x0800860b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	6a3a      	ldr	r2, [r7, #32]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085c2:	6053      	str	r3, [r2, #4]
          break;
 80085c4:	e03d      	b.n	8008642 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	69fa      	ldr	r2, [r7, #28]
 80085d6:	0151      	lsls	r1, r2, #5
 80085d8:	6a3a      	ldr	r2, [r7, #32]
 80085da:	440a      	add	r2, r1
 80085dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085e0:	f043 030e 	orr.w	r3, r3, #14
 80085e4:	6053      	str	r3, [r2, #4]
          break;
 80085e6:	e02c      	b.n	8008642 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	0151      	lsls	r1, r2, #5
 80085fa:	6a3a      	ldr	r2, [r7, #32]
 80085fc:	440a      	add	r2, r1
 80085fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008606:	6053      	str	r3, [r2, #4]
          break;
 8008608:	e01b      	b.n	8008642 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	4413      	add	r3, r2
 8008612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	0151      	lsls	r1, r2, #5
 800861c:	6a3a      	ldr	r2, [r7, #32]
 800861e:	440a      	add	r2, r1
 8008620:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008624:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008628:	6053      	str	r3, [r2, #4]
          break;
 800862a:	e00a      	b.n	8008642 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	4413      	add	r3, r2
 8008634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008638:	461a      	mov	r2, r3
 800863a:	2300      	movs	r3, #0
 800863c:	6053      	str	r3, [r2, #4]
 800863e:	e000      	b.n	8008642 <USB_HC_StartXfer+0x3ea>
          break;
 8008640:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	4413      	add	r3, r2
 800864a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008658:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	78db      	ldrb	r3, [r3, #3]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	e003      	b.n	8008674 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008672:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800867a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	4413      	add	r3, r2
 8008684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008688:	461a      	mov	r2, r3
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	e055      	b.n	8008744 <USB_HC_StartXfer+0x4ec>
 8008698:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	78db      	ldrb	r3, [r3, #3]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d14e      	bne.n	8008742 <USB_HC_StartXfer+0x4ea>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d04a      	beq.n	8008742 <USB_HC_StartXfer+0x4ea>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	79db      	ldrb	r3, [r3, #7]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d146      	bne.n	8008742 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	7c9b      	ldrb	r3, [r3, #18]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d831      	bhi.n	8008720 <USB_HC_StartXfer+0x4c8>
 80086bc:	a201      	add	r2, pc, #4	@ (adr r2, 80086c4 <USB_HC_StartXfer+0x46c>)
 80086be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c2:	bf00      	nop
 80086c4:	080086d5 	.word	0x080086d5
 80086c8:	080086f9 	.word	0x080086f9
 80086cc:	080086d5 	.word	0x080086d5
 80086d0:	080086f9 	.word	0x080086f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	3303      	adds	r3, #3
 80086da:	089b      	lsrs	r3, r3, #2
 80086dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80086de:	8afa      	ldrh	r2, [r7, #22]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d91c      	bls.n	8008724 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f043 0220 	orr.w	r2, r3, #32
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80086f6:	e015      	b.n	8008724 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	3303      	adds	r3, #3
 80086fe:	089b      	lsrs	r3, r3, #2
 8008700:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008702:	8afa      	ldrh	r2, [r7, #22]
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	b29b      	uxth	r3, r3
 800870e:	429a      	cmp	r2, r3
 8008710:	d90a      	bls.n	8008728 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	619a      	str	r2, [r3, #24]
        }
        break;
 800871e:	e003      	b.n	8008728 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008720:	bf00      	nop
 8008722:	e002      	b.n	800872a <USB_HC_StartXfer+0x4d2>
        break;
 8008724:	bf00      	nop
 8008726:	e000      	b.n	800872a <USB_HC_StartXfer+0x4d2>
        break;
 8008728:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	6999      	ldr	r1, [r3, #24]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	785a      	ldrb	r2, [r3, #1]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	b29b      	uxth	r3, r3
 8008738:	2000      	movs	r0, #0
 800873a:	9000      	str	r0, [sp, #0]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7ff f9c9 	bl	8007ad4 <USB_WritePacket>
  }

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3728      	adds	r7, #40	@ 0x28
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	b29b      	uxth	r3, r3
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800876e:	b480      	push	{r7}
 8008770:	b089      	sub	sp, #36	@ 0x24
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	0c9b      	lsrs	r3, r3, #18
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	0fdb      	lsrs	r3, r3, #31
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	0fdb      	lsrs	r3, r3, #31
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d10d      	bne.n	80087f0 <USB_HC_Halt+0x82>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <USB_HC_Halt+0x82>
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d005      	beq.n	80087ec <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d002      	beq.n	80087ec <USB_HC_Halt+0x7e>
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d101      	bne.n	80087f0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	e0d8      	b.n	80089a2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <USB_HC_Halt+0x8e>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d173      	bne.n	80088e4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	4413      	add	r3, r2
 8008804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	440a      	add	r2, r1
 8008812:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008816:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800881a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f003 0320 	and.w	r3, r3, #32
 8008824:	2b00      	cmp	r3, #0
 8008826:	d14a      	bne.n	80088be <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d133      	bne.n	800889c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	4413      	add	r3, r2
 800883c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	440a      	add	r2, r1
 800884a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800884e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008852:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	4413      	add	r3, r2
 800885c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	0151      	lsls	r1, r2, #5
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	440a      	add	r2, r1
 800886a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800886e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008872:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	3301      	adds	r3, #1
 8008878:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008880:	d82e      	bhi.n	80088e0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008898:	d0ec      	beq.n	8008874 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800889a:	e081      	b.n	80089a0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	69fa      	ldr	r2, [r7, #28]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088ba:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088bc:	e070      	b.n	80089a0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088de:	e05f      	b.n	80089a0 <USB_HC_Halt+0x232>
            break;
 80088e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088e2:	e05d      	b.n	80089a0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	0151      	lsls	r1, r2, #5
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	440a      	add	r2, r1
 80088fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008902:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d133      	bne.n	800897c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	440a      	add	r2, r1
 800892a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800892e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008932:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	440a      	add	r2, r1
 800894a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800894e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008952:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	3301      	adds	r3, #1
 8008958:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008960:	d81d      	bhi.n	800899e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008974:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008978:	d0ec      	beq.n	8008954 <USB_HC_Halt+0x1e6>
 800897a:	e011      	b.n	80089a0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	4413      	add	r3, r2
 8008984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	0151      	lsls	r1, r2, #5
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	440a      	add	r2, r1
 8008992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800899a:	6013      	str	r3, [r2, #0]
 800899c:	e000      	b.n	80089a0 <USB_HC_Halt+0x232>
          break;
 800899e:	bf00      	nop
    }
  }

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3724      	adds	r7, #36	@ 0x24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80089c4:	2301      	movs	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	04da      	lsls	r2, r3, #19
 80089cc:	4b15      	ldr	r3, [pc, #84]	@ (8008a24 <USB_DoPing+0x74>)
 80089ce:	4013      	ands	r3, r2
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	0151      	lsls	r1, r2, #5
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	440a      	add	r2, r1
 80089d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	1ff80000 	.word	0x1ff80000

08008a28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7fe ff8c 	bl	800795a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a42:	2110      	movs	r1, #16
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7fe ffe5 	bl	8007a14 <USB_FlushTxFifo>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff f80f 	bl	8007a78 <USB_FlushRxFifo>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
 8008a68:	e01f      	b.n	8008aaa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	2b0f      	cmp	r3, #15
 8008aae:	d9dc      	bls.n	8008a6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	e034      	b.n	8008b20 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008acc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ad4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008adc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aea:	461a      	mov	r2, r3
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008afc:	d80c      	bhi.n	8008b18 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b14:	d0ec      	beq.n	8008af0 <USB_StopHost+0xc8>
 8008b16:	e000      	b.n	8008b1a <USB_StopHost+0xf2>
        break;
 8008b18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	61bb      	str	r3, [r7, #24]
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b0f      	cmp	r3, #15
 8008b24:	d9c7      	bls.n	8008ab6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7fe fefb 	bl	8007938 <USB_EnableGlobalInt>

  return ret;
 8008b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3720      	adds	r7, #32
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b089      	sub	sp, #36	@ 0x24
 8008b50:	af04      	add	r7, sp, #16
 8008b52:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008b54:	2301      	movs	r3, #1
 8008b56:	2202      	movs	r2, #2
 8008b58:	2102      	movs	r1, #2
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fc85 	bl	800946a <USBH_FindInterface>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	2bff      	cmp	r3, #255	@ 0xff
 8008b68:	d002      	beq.n	8008b70 <USBH_CDC_InterfaceInit+0x24>
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d901      	bls.n	8008b74 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b70:	2302      	movs	r3, #2
 8008b72:	e13d      	b.n	8008df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fc5a 	bl	8009432 <USBH_SelectInterface>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e131      	b.n	8008df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008b92:	2050      	movs	r0, #80	@ 0x50
 8008b94:	f002 fb68 	bl	800b268 <malloc>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	e11f      	b.n	8008df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008bb0:	2250      	movs	r2, #80	@ 0x50
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	68b8      	ldr	r0, [r7, #8]
 8008bb6:	f002 fec3 	bl	800b940 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	211a      	movs	r1, #26
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	b25b      	sxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	da15      	bge.n	8008bfe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	211a      	movs	r1, #26
 8008bd8:	fb01 f303 	mul.w	r3, r1, r3
 8008bdc:	4413      	add	r3, r2
 8008bde:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008be2:	781a      	ldrb	r2, [r3, #0]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	211a      	movs	r1, #26
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008bf8:	881a      	ldrh	r2, [r3, #0]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	785b      	ldrb	r3, [r3, #1]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 ffbe 	bl	800ab86 <USBH_AllocPipe>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	7819      	ldrb	r1, [r3, #0]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	7858      	ldrb	r0, [r3, #1]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	8952      	ldrh	r2, [r2, #10]
 8008c2a:	9202      	str	r2, [sp, #8]
 8008c2c:	2203      	movs	r2, #3
 8008c2e:	9201      	str	r2, [sp, #4]
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	4623      	mov	r3, r4
 8008c34:	4602      	mov	r2, r0
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 ff76 	bl	800ab28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2200      	movs	r2, #0
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f002 fa85 	bl	800b154 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	210a      	movs	r1, #10
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fc0a 	bl	800946a <USBH_FindInterface>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2bff      	cmp	r3, #255	@ 0xff
 8008c5e:	d002      	beq.n	8008c66 <USBH_CDC_InterfaceInit+0x11a>
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d901      	bls.n	8008c6a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c66:	2302      	movs	r3, #2
 8008c68:	e0c2      	b.n	8008df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	211a      	movs	r1, #26
 8008c70:	fb01 f303 	mul.w	r3, r1, r3
 8008c74:	4413      	add	r3, r2
 8008c76:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b25b      	sxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da16      	bge.n	8008cb0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	211a      	movs	r1, #26
 8008c88:	fb01 f303 	mul.w	r3, r1, r3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c92:	781a      	ldrb	r2, [r3, #0]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	211a      	movs	r1, #26
 8008c9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008ca8:	881a      	ldrh	r2, [r3, #0]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	835a      	strh	r2, [r3, #26]
 8008cae:	e015      	b.n	8008cdc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	211a      	movs	r1, #26
 8008cb6:	fb01 f303 	mul.w	r3, r1, r3
 8008cba:	4413      	add	r3, r2
 8008cbc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	211a      	movs	r1, #26
 8008ccc:	fb01 f303 	mul.w	r3, r1, r3
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008cd6:	881a      	ldrh	r2, [r3, #0]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	211a      	movs	r1, #26
 8008ce2:	fb01 f303 	mul.w	r3, r1, r3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	b25b      	sxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da16      	bge.n	8008d22 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	211a      	movs	r1, #26
 8008cfa:	fb01 f303 	mul.w	r3, r1, r3
 8008cfe:	4413      	add	r3, r2
 8008d00:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008d04:	781a      	ldrb	r2, [r3, #0]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	211a      	movs	r1, #26
 8008d10:	fb01 f303 	mul.w	r3, r1, r3
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008d1a:	881a      	ldrh	r2, [r3, #0]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	835a      	strh	r2, [r3, #26]
 8008d20:	e015      	b.n	8008d4e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	211a      	movs	r1, #26
 8008d28:	fb01 f303 	mul.w	r3, r1, r3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008d32:	781a      	ldrb	r2, [r3, #0]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	211a      	movs	r1, #26
 8008d3e:	fb01 f303 	mul.w	r3, r1, r3
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008d48:	881a      	ldrh	r2, [r3, #0]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	7b9b      	ldrb	r3, [r3, #14]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 ff16 	bl	800ab86 <USBH_AllocPipe>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	7bdb      	ldrb	r3, [r3, #15]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 ff0c 	bl	800ab86 <USBH_AllocPipe>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	461a      	mov	r2, r3
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	7b59      	ldrb	r1, [r3, #13]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	7b98      	ldrb	r0, [r3, #14]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	8b12      	ldrh	r2, [r2, #24]
 8008d8e:	9202      	str	r2, [sp, #8]
 8008d90:	2202      	movs	r2, #2
 8008d92:	9201      	str	r2, [sp, #4]
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	4623      	mov	r3, r4
 8008d98:	4602      	mov	r2, r0
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 fec4 	bl	800ab28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	7b19      	ldrb	r1, [r3, #12]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	7bd8      	ldrb	r0, [r3, #15]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	8b52      	ldrh	r2, [r2, #26]
 8008db8:	9202      	str	r2, [sp, #8]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	9201      	str	r2, [sp, #4]
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	4623      	mov	r3, r4
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 feaf 	bl	800ab28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	7b5b      	ldrb	r3, [r3, #13]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f002 f9ba 	bl	800b154 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	7b1b      	ldrb	r3, [r3, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f002 f9b3 	bl	800b154 <USBH_LL_SetToggle>

  return USBH_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd90      	pop	{r4, r7, pc}

08008df8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00e      	beq.n	8008e30 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 fea4 	bl	800ab66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 fecf 	bl	800abc8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	7b1b      	ldrb	r3, [r3, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00e      	beq.n	8008e56 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	7b1b      	ldrb	r3, [r3, #12]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 fe91 	bl	800ab66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	7b1b      	ldrb	r3, [r3, #12]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 febc 	bl	800abc8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	7b5b      	ldrb	r3, [r3, #13]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00e      	beq.n	8008e7c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	7b5b      	ldrb	r3, [r3, #13]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f001 fe7e 	bl	800ab66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	7b5b      	ldrb	r3, [r3, #13]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 fea9 	bl	800abc8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f002 f9f1 	bl	800b278 <free>
    phost->pActiveClass->pData = 0U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3340      	adds	r3, #64	@ 0x40
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f8b1 	bl	800902a <GetLineCoding>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008ecc:	7afb      	ldrb	r3, [r7, #11]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d105      	bne.n	8008ede <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ed8:	2102      	movs	r1, #2
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008ede:	7afb      	ldrb	r3, [r7, #11]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d877      	bhi.n	8008ffc <USBH_CDC_Process+0x114>
 8008f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f14 <USBH_CDC_Process+0x2c>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f29 	.word	0x08008f29
 8008f18:	08008f2f 	.word	0x08008f2f
 8008f1c:	08008f5f 	.word	0x08008f5f
 8008f20:	08008fd3 	.word	0x08008fd3
 8008f24:	08008fe1 	.word	0x08008fe1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2c:	e06d      	b.n	800900a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f897 	bl	8009068 <SetLineCoding>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f4c:	e058      	b.n	8009000 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d055      	beq.n	8009000 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2204      	movs	r2, #4
 8008f58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008f5c:	e050      	b.n	8009000 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	3340      	adds	r3, #64	@ 0x40
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f860 	bl	800902a <GetLineCoding>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d126      	bne.n	8008fc2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f86:	791b      	ldrb	r3, [r3, #4]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d13b      	bne.n	8009004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f96:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d133      	bne.n	8009004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fa6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d12b      	bne.n	8009004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fb4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d124      	bne.n	8009004 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f958 	bl	8009270 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008fc0:	e020      	b.n	8009004 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d01d      	beq.n	8009004 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2204      	movs	r2, #4
 8008fcc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008fd0:	e018      	b.n	8009004 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f867 	bl	80090a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f8da 	bl	8009192 <CDC_ProcessReception>
      break;
 8008fde:	e014      	b.n	800900a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 f81a 	bl	800a01c <USBH_ClrFeature>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10a      	bne.n	8009008 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008ffa:	e005      	b.n	8009008 <USBH_CDC_Process+0x120>

    default:
      break;
 8008ffc:	bf00      	nop
 8008ffe:	e004      	b.n	800900a <USBH_CDC_Process+0x122>
      break;
 8009000:	bf00      	nop
 8009002:	e002      	b.n	800900a <USBH_CDC_Process+0x122>
      break;
 8009004:	bf00      	nop
 8009006:	e000      	b.n	800900a <USBH_CDC_Process+0x122>
      break;
 8009008:	bf00      	nop

  }

  return status;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	22a1      	movs	r2, #161	@ 0xa1
 8009038:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2221      	movs	r2, #33	@ 0x21
 800903e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2207      	movs	r2, #7
 8009050:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2207      	movs	r2, #7
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 fb14 	bl	800a686 <USBH_CtlReq>
 800905e:	4603      	mov	r3, r0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2221      	movs	r2, #33	@ 0x21
 8009076:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2207      	movs	r2, #7
 800908e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2207      	movs	r2, #7
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f001 faf5 	bl	800a686 <USBH_CtlReq>
 800909c:	4603      	mov	r3, r0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af02      	add	r7, sp, #8
 80090ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090b8:	2300      	movs	r3, #0
 80090ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d002      	beq.n	80090cc <CDC_ProcessTransmission+0x26>
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d023      	beq.n	8009112 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80090ca:	e05e      	b.n	800918a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	8b12      	ldrh	r2, [r2, #24]
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d90b      	bls.n	80090f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	69d9      	ldr	r1, [r3, #28]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8b1a      	ldrh	r2, [r3, #24]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	7b5b      	ldrb	r3, [r3, #13]
 80090e4:	2001      	movs	r0, #1
 80090e6:	9000      	str	r0, [sp, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 fcda 	bl	800aaa2 <USBH_BulkSendData>
 80090ee:	e00b      	b.n	8009108 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	7b5b      	ldrb	r3, [r3, #13]
 80090fe:	2001      	movs	r0, #1
 8009100:	9000      	str	r0, [sp, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 fccd 	bl	800aaa2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009110:	e03b      	b.n	800918a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	7b5b      	ldrb	r3, [r3, #13]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 fff1 	bl	800b100 <USBH_LL_GetURBState>
 800911e:	4603      	mov	r3, r0
 8009120:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009122:	7afb      	ldrb	r3, [r7, #11]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d128      	bne.n	800917a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	8b12      	ldrh	r2, [r2, #24]
 8009130:	4293      	cmp	r3, r2
 8009132:	d90e      	bls.n	8009152 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	8b12      	ldrh	r2, [r2, #24]
 800913c:	1a9a      	subs	r2, r3, r2
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	8b12      	ldrh	r2, [r2, #24]
 800914a:	441a      	add	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	61da      	str	r2, [r3, #28]
 8009150:	e002      	b.n	8009158 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	d004      	beq.n	800916a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009168:	e00e      	b.n	8009188 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f868 	bl	8009248 <USBH_CDC_TransmitCallback>
      break;
 8009178:	e006      	b.n	8009188 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	2b02      	cmp	r3, #2
 800917e:	d103      	bne.n	8009188 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009188:	bf00      	nop
  }
}
 800918a:	bf00      	nop
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b086      	sub	sp, #24
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d002      	beq.n	80091b8 <CDC_ProcessReception+0x26>
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d00e      	beq.n	80091d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80091b6:	e043      	b.n	8009240 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	6a19      	ldr	r1, [r3, #32]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	8b5a      	ldrh	r2, [r3, #26]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	7b1b      	ldrb	r3, [r3, #12]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fc91 	bl	800aaec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2204      	movs	r2, #4
 80091ce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80091d2:	e035      	b.n	8009240 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	7b1b      	ldrb	r3, [r3, #12]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 ff90 	bl	800b100 <USBH_LL_GetURBState>
 80091e0:	4603      	mov	r3, r0
 80091e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80091e4:	7cfb      	ldrb	r3, [r7, #19]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d129      	bne.n	800923e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	7b1b      	ldrb	r3, [r3, #12]
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f001 fef3 	bl	800afdc <USBH_LL_GetLastXferSize>
 80091f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d016      	beq.n	8009230 <CDC_ProcessReception+0x9e>
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	8b5b      	ldrh	r3, [r3, #26]
 8009206:	461a      	mov	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4293      	cmp	r3, r2
 800920c:	d910      	bls.n	8009230 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	1ad2      	subs	r2, r2, r3
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	441a      	add	r2, r3
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2203      	movs	r2, #3
 800922a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800922e:	e006      	b.n	800923e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f80f 	bl	800925c <USBH_CDC_ReceiveCallback>
      break;
 800923e:	bf00      	nop
  }
}
 8009240:	bf00      	nop
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009298:	2302      	movs	r3, #2
 800929a:	e029      	b.n	80092f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	79fa      	ldrb	r2, [r7, #7]
 80092a0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f81f 	bl	80092f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f001 fdc3 	bl	800ae74 <USBH_LL_Init>

  return USBH_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	e009      	b.n	800931e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	33e0      	adds	r3, #224	@ 0xe0
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	2200      	movs	r2, #0
 8009316:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3301      	adds	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b0f      	cmp	r3, #15
 8009322:	d9f2      	bls.n	800930a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e009      	b.n	800933e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3301      	adds	r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009344:	d3f1      	bcc.n	800932a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2240      	movs	r2, #64	@ 0x40
 800936a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	331c      	adds	r3, #28
 8009396:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f002 facf 	bl	800b940 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80093a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f002 fac6 	bl	800b940 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80093ba:	2212      	movs	r2, #18
 80093bc:	2100      	movs	r1, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	f002 fabe 	bl	800b940 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80093ca:	223e      	movs	r2, #62	@ 0x3e
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 fab6 	bl	800b940 <memset>

  return USBH_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80093de:	b480      	push	{r7}
 80093e0:	b085      	sub	sp, #20
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d016      	beq.n	8009420 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10e      	bne.n	800941a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009402:	1c59      	adds	r1, r3, #1
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	33de      	adds	r3, #222	@ 0xde
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
 8009418:	e004      	b.n	8009424 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800941a:	2302      	movs	r3, #2
 800941c:	73fb      	strb	r3, [r7, #15]
 800941e:	e001      	b.n	8009424 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009420:	2302      	movs	r3, #2
 8009422:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009424:	7bfb      	ldrb	r3, [r7, #15]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009448:	78fa      	ldrb	r2, [r7, #3]
 800944a:	429a      	cmp	r2, r3
 800944c:	d204      	bcs.n	8009458 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	78fa      	ldrb	r2, [r7, #3]
 8009452:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009456:	e001      	b.n	800945c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009458:	2302      	movs	r3, #2
 800945a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800946a:	b480      	push	{r7}
 800946c:	b087      	sub	sp, #28
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	461a      	mov	r2, r3
 8009478:	4603      	mov	r3, r0
 800947a:	70fb      	strb	r3, [r7, #3]
 800947c:	460b      	mov	r3, r1
 800947e:	70bb      	strb	r3, [r7, #2]
 8009480:	4613      	mov	r3, r2
 8009482:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009488:	2300      	movs	r3, #0
 800948a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009492:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009494:	e025      	b.n	80094e2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	221a      	movs	r2, #26
 800949a:	fb02 f303 	mul.w	r3, r2, r3
 800949e:	3308      	adds	r3, #8
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	3302      	adds	r3, #2
 80094a6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	795b      	ldrb	r3, [r3, #5]
 80094ac:	78fa      	ldrb	r2, [r7, #3]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d002      	beq.n	80094b8 <USBH_FindInterface+0x4e>
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	2bff      	cmp	r3, #255	@ 0xff
 80094b6:	d111      	bne.n	80094dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094bc:	78ba      	ldrb	r2, [r7, #2]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d002      	beq.n	80094c8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094c2:	78bb      	ldrb	r3, [r7, #2]
 80094c4:	2bff      	cmp	r3, #255	@ 0xff
 80094c6:	d109      	bne.n	80094dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094cc:	787a      	ldrb	r2, [r7, #1]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d002      	beq.n	80094d8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094d2:	787b      	ldrb	r3, [r7, #1]
 80094d4:	2bff      	cmp	r3, #255	@ 0xff
 80094d6:	d101      	bne.n	80094dc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	e006      	b.n	80094ea <USBH_FindInterface+0x80>
    }
    if_ix++;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	3301      	adds	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d9d6      	bls.n	8009496 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80094e8:	23ff      	movs	r3, #255	@ 0xff
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 fcf4 	bl	800aeec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009504:	2101      	movs	r1, #1
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 fe0d 	bl	800b126 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af04      	add	r7, sp, #16
 800951e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009520:	2302      	movs	r3, #2
 8009522:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b01      	cmp	r3, #1
 8009532:	d102      	bne.n	800953a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2203      	movs	r2, #3
 8009538:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b0b      	cmp	r3, #11
 8009542:	f200 81bb 	bhi.w	80098bc <USBH_Process+0x3a4>
 8009546:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <USBH_Process+0x34>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	0800957d 	.word	0x0800957d
 8009550:	080095af 	.word	0x080095af
 8009554:	08009617 	.word	0x08009617
 8009558:	08009857 	.word	0x08009857
 800955c:	080098bd 	.word	0x080098bd
 8009560:	080096b7 	.word	0x080096b7
 8009564:	080097fd 	.word	0x080097fd
 8009568:	080096ed 	.word	0x080096ed
 800956c:	0800970d 	.word	0x0800970d
 8009570:	0800972b 	.word	0x0800972b
 8009574:	0800976f 	.word	0x0800976f
 8009578:	0800983f 	.word	0x0800983f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 819b 	beq.w	80098c0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009590:	20c8      	movs	r0, #200	@ 0xc8
 8009592:	f001 fe12 	bl	800b1ba <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 fd05 	bl	800afa6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095ac:	e188      	b.n	80098c0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d107      	bne.n	80095c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095c6:	e18a      	b.n	80098de <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80095ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095d2:	d914      	bls.n	80095fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80095da:	3301      	adds	r3, #1
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d903      	bls.n	80095f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	220d      	movs	r2, #13
 80095f2:	701a      	strb	r2, [r3, #0]
      break;
 80095f4:	e173      	b.n	80098de <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
      break;
 80095fc:	e16f      	b.n	80098de <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009604:	f103 020a 	add.w	r2, r3, #10
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800960e:	200a      	movs	r0, #10
 8009610:	f001 fdd3 	bl	800b1ba <USBH_Delay>
      break;
 8009614:	e163      	b.n	80098de <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009626:	2104      	movs	r1, #4
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800962c:	2064      	movs	r0, #100	@ 0x64
 800962e:	f001 fdc4 	bl	800b1ba <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fc90 	bl	800af58 <USBH_LL_GetSpeed>
 8009638:	4603      	mov	r3, r0
 800963a:	461a      	mov	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2205      	movs	r2, #5
 8009646:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009648:	2100      	movs	r1, #0
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fa9b 	bl	800ab86 <USBH_AllocPipe>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009658:	2180      	movs	r1, #128	@ 0x80
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 fa93 	bl	800ab86 <USBH_AllocPipe>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	7919      	ldrb	r1, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800967c:	9202      	str	r2, [sp, #8]
 800967e:	2200      	movs	r2, #0
 8009680:	9201      	str	r2, [sp, #4]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	4603      	mov	r3, r0
 8009686:	2280      	movs	r2, #128	@ 0x80
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 fa4d 	bl	800ab28 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	7959      	ldrb	r1, [r3, #5]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80096a2:	9202      	str	r2, [sp, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	9201      	str	r2, [sp, #4]
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	4603      	mov	r3, r0
 80096ac:	2200      	movs	r2, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 fa3a 	bl	800ab28 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096b4:	e113      	b.n	80098de <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f916 	bl	80098e8 <USBH_HandleEnum>
 80096bc:	4603      	mov	r3, r0
 80096be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f040 80fd 	bne.w	80098c4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d103      	bne.n	80096e4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2208      	movs	r2, #8
 80096e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096e2:	e0ef      	b.n	80098c4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2207      	movs	r2, #7
 80096e8:	701a      	strb	r2, [r3, #0]
      break;
 80096ea:	e0eb      	b.n	80098c4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 80e8 	beq.w	80098c8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096fe:	2101      	movs	r1, #1
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2208      	movs	r2, #8
 8009708:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800970a:	e0dd      	b.n	80098c8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fc3a 	bl	8009f8e <USBH_SetCfg>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	f040 80d5 	bne.w	80098cc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2209      	movs	r2, #9
 8009726:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009728:	e0d0      	b.n	80098cc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009730:	f003 0320 	and.w	r3, r3, #32
 8009734:	2b00      	cmp	r3, #0
 8009736:	d016      	beq.n	8009766 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009738:	2101      	movs	r1, #1
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fc4a 	bl	8009fd4 <USBH_SetFeature>
 8009740:	4603      	mov	r3, r0
 8009742:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	d103      	bne.n	8009754 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	220a      	movs	r2, #10
 8009750:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009752:	e0bd      	b.n	80098d0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b03      	cmp	r3, #3
 800975a:	f040 80b9 	bne.w	80098d0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	220a      	movs	r2, #10
 8009762:	701a      	strb	r2, [r3, #0]
      break;
 8009764:	e0b4      	b.n	80098d0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	220a      	movs	r2, #10
 800976a:	701a      	strb	r2, [r3, #0]
      break;
 800976c:	e0b0      	b.n	80098d0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80ad 	beq.w	80098d4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009782:	2300      	movs	r3, #0
 8009784:	73fb      	strb	r3, [r7, #15]
 8009786:	e016      	b.n	80097b6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009788:	7bfa      	ldrb	r2, [r7, #15]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	32de      	adds	r2, #222	@ 0xde
 800978e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009792:	791a      	ldrb	r2, [r3, #4]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800979a:	429a      	cmp	r2, r3
 800979c:	d108      	bne.n	80097b0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800979e:	7bfa      	ldrb	r2, [r7, #15]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	32de      	adds	r2, #222	@ 0xde
 80097a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80097ae:	e005      	b.n	80097bc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	3301      	adds	r3, #1
 80097b4:	73fb      	strb	r3, [r7, #15]
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0e5      	beq.n	8009788 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d016      	beq.n	80097f4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d109      	bne.n	80097ec <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2206      	movs	r2, #6
 80097dc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097e4:	2103      	movs	r1, #3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097ea:	e073      	b.n	80098d4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	220d      	movs	r2, #13
 80097f0:	701a      	strb	r2, [r3, #0]
      break;
 80097f2:	e06f      	b.n	80098d4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	220d      	movs	r2, #13
 80097f8:	701a      	strb	r2, [r3, #0]
      break;
 80097fa:	e06b      	b.n	80098d4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d017      	beq.n	8009836 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
 8009812:	4603      	mov	r3, r0
 8009814:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d103      	bne.n	8009826 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	220b      	movs	r2, #11
 8009822:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009824:	e058      	b.n	80098d8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b02      	cmp	r3, #2
 800982c:	d154      	bne.n	80098d8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	220d      	movs	r2, #13
 8009832:	701a      	strb	r2, [r3, #0]
      break;
 8009834:	e050      	b.n	80098d8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	220d      	movs	r2, #13
 800983a:	701a      	strb	r2, [r3, #0]
      break;
 800983c:	e04c      	b.n	80098d8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009844:	2b00      	cmp	r3, #0
 8009846:	d049      	beq.n	80098dc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
      }
      break;
 8009854:	e042      	b.n	80098dc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff fd4a 	bl	80092f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d009      	beq.n	8009882 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009892:	2105      	movs	r1, #5
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d107      	bne.n	80098b4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff fe22 	bl	80094f6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098b2:	e014      	b.n	80098de <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f001 fb19 	bl	800aeec <USBH_LL_Start>
      break;
 80098ba:	e010      	b.n	80098de <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80098bc:	bf00      	nop
 80098be:	e00e      	b.n	80098de <USBH_Process+0x3c6>
      break;
 80098c0:	bf00      	nop
 80098c2:	e00c      	b.n	80098de <USBH_Process+0x3c6>
      break;
 80098c4:	bf00      	nop
 80098c6:	e00a      	b.n	80098de <USBH_Process+0x3c6>
    break;
 80098c8:	bf00      	nop
 80098ca:	e008      	b.n	80098de <USBH_Process+0x3c6>
      break;
 80098cc:	bf00      	nop
 80098ce:	e006      	b.n	80098de <USBH_Process+0x3c6>
      break;
 80098d0:	bf00      	nop
 80098d2:	e004      	b.n	80098de <USBH_Process+0x3c6>
      break;
 80098d4:	bf00      	nop
 80098d6:	e002      	b.n	80098de <USBH_Process+0x3c6>
      break;
 80098d8:	bf00      	nop
 80098da:	e000      	b.n	80098de <USBH_Process+0x3c6>
      break;
 80098dc:	bf00      	nop
  }
  return USBH_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af04      	add	r7, sp, #16
 80098ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80098f0:	2301      	movs	r3, #1
 80098f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80098f4:	2301      	movs	r3, #1
 80098f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b07      	cmp	r3, #7
 80098fe:	f200 81bd 	bhi.w	8009c7c <USBH_HandleEnum+0x394>
 8009902:	a201      	add	r2, pc, #4	@ (adr r2, 8009908 <USBH_HandleEnum+0x20>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	08009929 	.word	0x08009929
 800990c:	080099e3 	.word	0x080099e3
 8009910:	08009a4d 	.word	0x08009a4d
 8009914:	08009ad7 	.word	0x08009ad7
 8009918:	08009b41 	.word	0x08009b41
 800991c:	08009bb1 	.word	0x08009bb1
 8009920:	08009bf7 	.word	0x08009bf7
 8009924:	08009c3d 	.word	0x08009c3d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009928:	2108      	movs	r1, #8
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fa4c 	bl	8009dc8 <USBH_Get_DevDesc>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d12e      	bne.n	8009998 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	7919      	ldrb	r1, [r3, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800995e:	9202      	str	r2, [sp, #8]
 8009960:	2200      	movs	r2, #0
 8009962:	9201      	str	r2, [sp, #4]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	4603      	mov	r3, r0
 8009968:	2280      	movs	r2, #128	@ 0x80
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 f8dc 	bl	800ab28 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	7959      	ldrb	r1, [r3, #5]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009984:	9202      	str	r2, [sp, #8]
 8009986:	2200      	movs	r2, #0
 8009988:	9201      	str	r2, [sp, #4]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	4603      	mov	r3, r0
 800998e:	2200      	movs	r2, #0
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f8c9 	bl	800ab28 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009996:	e173      	b.n	8009c80 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	2b03      	cmp	r3, #3
 800999c:	f040 8170 	bne.w	8009c80 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099a6:	3301      	adds	r3, #1
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d903      	bls.n	80099c2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	220d      	movs	r2, #13
 80099be:	701a      	strb	r2, [r3, #0]
      break;
 80099c0:	e15e      	b.n	8009c80 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	795b      	ldrb	r3, [r3, #5]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 f8fd 	bl	800abc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	791b      	ldrb	r3, [r3, #4]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 f8f7 	bl	800abc8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	701a      	strb	r2, [r3, #0]
      break;
 80099e0:	e14e      	b.n	8009c80 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80099e2:	2112      	movs	r1, #18
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f9ef 	bl	8009dc8 <USBH_Get_DevDesc>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d103      	bne.n	80099fc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099fa:	e143      	b.n	8009c84 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	f040 8140 	bne.w	8009c84 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d903      	bls.n	8009a26 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	220d      	movs	r2, #13
 8009a22:	701a      	strb	r2, [r3, #0]
      break;
 8009a24:	e12e      	b.n	8009c84 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	795b      	ldrb	r3, [r3, #5]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f001 f8cb 	bl	800abc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	791b      	ldrb	r3, [r3, #4]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f001 f8c5 	bl	800abc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
      break;
 8009a4a:	e11b      	b.n	8009c84 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa79 	bl	8009f46 <USBH_SetAddress>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d130      	bne.n	8009ac0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009a5e:	2002      	movs	r0, #2
 8009a60:	f001 fbab 	bl	800b1ba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2203      	movs	r2, #3
 8009a70:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	7919      	ldrb	r1, [r3, #4]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a86:	9202      	str	r2, [sp, #8]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	9201      	str	r2, [sp, #4]
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2280      	movs	r2, #128	@ 0x80
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f001 f848 	bl	800ab28 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7959      	ldrb	r1, [r3, #5]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009aac:	9202      	str	r2, [sp, #8]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	9201      	str	r2, [sp, #4]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f001 f835 	bl	800ab28 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009abe:	e0e3      	b.n	8009c88 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	f040 80e0 	bne.w	8009c88 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	220d      	movs	r2, #13
 8009acc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	705a      	strb	r2, [r3, #1]
      break;
 8009ad4:	e0d8      	b.n	8009c88 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ad6:	2109      	movs	r1, #9
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f9a1 	bl	8009e20 <USBH_Get_CfgDesc>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2204      	movs	r2, #4
 8009aec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009aee:	e0cd      	b.n	8009c8c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	f040 80ca 	bne.w	8009c8c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009afe:	3301      	adds	r3, #1
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d903      	bls.n	8009b1a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	220d      	movs	r2, #13
 8009b16:	701a      	strb	r2, [r3, #0]
      break;
 8009b18:	e0b8      	b.n	8009c8c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	795b      	ldrb	r3, [r3, #5]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f001 f851 	bl	800abc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	791b      	ldrb	r3, [r3, #4]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 f84b 	bl	800abc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
      break;
 8009b3e:	e0a5      	b.n	8009c8c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f969 	bl	8009e20 <USBH_Get_CfgDesc>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d103      	bne.n	8009b60 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2205      	movs	r2, #5
 8009b5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b5e:	e097      	b.n	8009c90 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	f040 8094 	bne.w	8009c90 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b6e:	3301      	adds	r3, #1
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d903      	bls.n	8009b8a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	220d      	movs	r2, #13
 8009b86:	701a      	strb	r2, [r3, #0]
      break;
 8009b88:	e082      	b.n	8009c90 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	795b      	ldrb	r3, [r3, #5]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 f819 	bl	800abc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	791b      	ldrb	r3, [r3, #4]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f001 f813 	bl	800abc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]
      break;
 8009bae:	e06f      	b.n	8009c90 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d019      	beq.n	8009bee <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bc6:	23ff      	movs	r3, #255	@ 0xff
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f953 	bl	8009e74 <USBH_Get_StringDesc>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d103      	bne.n	8009be0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2206      	movs	r2, #6
 8009bdc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bde:	e059      	b.n	8009c94 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d156      	bne.n	8009c94 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2206      	movs	r2, #6
 8009bea:	705a      	strb	r2, [r3, #1]
      break;
 8009bec:	e052      	b.n	8009c94 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2206      	movs	r2, #6
 8009bf2:	705a      	strb	r2, [r3, #1]
      break;
 8009bf4:	e04e      	b.n	8009c94 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d019      	beq.n	8009c34 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c0c:	23ff      	movs	r3, #255	@ 0xff
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f930 	bl	8009e74 <USBH_Get_StringDesc>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d103      	bne.n	8009c26 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2207      	movs	r2, #7
 8009c22:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c24:	e038      	b.n	8009c98 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d135      	bne.n	8009c98 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2207      	movs	r2, #7
 8009c30:	705a      	strb	r2, [r3, #1]
      break;
 8009c32:	e031      	b.n	8009c98 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2207      	movs	r2, #7
 8009c38:	705a      	strb	r2, [r3, #1]
      break;
 8009c3a:	e02d      	b.n	8009c98 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d017      	beq.n	8009c76 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c52:	23ff      	movs	r3, #255	@ 0xff
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f90d 	bl	8009e74 <USBH_Get_StringDesc>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c68:	e018      	b.n	8009c9c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d115      	bne.n	8009c9c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]
      break;
 8009c74:	e012      	b.n	8009c9c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]
      break;
 8009c7a:	e00f      	b.n	8009c9c <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009c7c:	bf00      	nop
 8009c7e:	e00e      	b.n	8009c9e <USBH_HandleEnum+0x3b6>
      break;
 8009c80:	bf00      	nop
 8009c82:	e00c      	b.n	8009c9e <USBH_HandleEnum+0x3b6>
      break;
 8009c84:	bf00      	nop
 8009c86:	e00a      	b.n	8009c9e <USBH_HandleEnum+0x3b6>
      break;
 8009c88:	bf00      	nop
 8009c8a:	e008      	b.n	8009c9e <USBH_HandleEnum+0x3b6>
      break;
 8009c8c:	bf00      	nop
 8009c8e:	e006      	b.n	8009c9e <USBH_HandleEnum+0x3b6>
      break;
 8009c90:	bf00      	nop
 8009c92:	e004      	b.n	8009c9e <USBH_HandleEnum+0x3b6>
      break;
 8009c94:	bf00      	nop
 8009c96:	e002      	b.n	8009c9e <USBH_HandleEnum+0x3b6>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <USBH_HandleEnum+0x3b6>
      break;
 8009c9c:	bf00      	nop
  }
  return Status;
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009cba:	bf00      	nop
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f804 	bl	8009cea <USBH_HandleSof>
}
 8009ce2:	bf00      	nop
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b0b      	cmp	r3, #11
 8009cfa:	d10a      	bne.n	8009d12 <USBH_HandleSof+0x28>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	4798      	blx	r3
  }
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009d2a:	bf00      	nop
}
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009d46:	bf00      	nop
}
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 f8be 	bl	800af22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	791b      	ldrb	r3, [r3, #4]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 ff0b 	bl	800abc8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	795b      	ldrb	r3, [r3, #5]
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 ff05 	bl	800abc8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009dd4:	887b      	ldrh	r3, [r7, #2]
 8009dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dda:	d901      	bls.n	8009de0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e01b      	b.n	8009e18 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009de6:	887b      	ldrh	r3, [r7, #2]
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	4613      	mov	r3, r2
 8009dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009df0:	2100      	movs	r1, #0
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f872 	bl	8009edc <USBH_GetDescriptor>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d109      	bne.n	8009e16 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009e08:	887a      	ldrh	r2, [r7, #2]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f929 	bl	800a064 <USBH_ParseDevDesc>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	331c      	adds	r3, #28
 8009e30:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009e32:	887b      	ldrh	r3, [r7, #2]
 8009e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e38:	d901      	bls.n	8009e3e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e016      	b.n	8009e6c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e48:	2100      	movs	r1, #0
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f846 	bl	8009edc <USBH_GetDescriptor>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d107      	bne.n	8009e6a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009e5a:	887b      	ldrh	r3, [r7, #2]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	68b9      	ldr	r1, [r7, #8]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f9af 	bl	800a1c4 <USBH_ParseCfgDesc>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	460b      	mov	r3, r1
 8009e82:	72fb      	strb	r3, [r7, #11]
 8009e84:	4613      	mov	r3, r2
 8009e86:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009e88:	893b      	ldrh	r3, [r7, #8]
 8009e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e8e:	d802      	bhi.n	8009e96 <USBH_Get_StringDesc+0x22>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e01c      	b.n	8009ed4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009e9a:	7afb      	ldrb	r3, [r7, #11]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009ea2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009eaa:	893b      	ldrh	r3, [r7, #8]
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 f812 	bl	8009edc <USBH_GetDescriptor>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d107      	bne.n	8009ed2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009ec8:	893a      	ldrh	r2, [r7, #8]
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 fb8d 	bl	800a5ec <USBH_ParseStringDesc>
  }

  return status;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	72fb      	strb	r3, [r7, #11]
 8009eea:	4613      	mov	r3, r2
 8009eec:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	789b      	ldrb	r3, [r3, #2]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d11c      	bne.n	8009f30 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ef6:	7afb      	ldrb	r3, [r7, #11]
 8009ef8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2206      	movs	r2, #6
 8009f06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	893a      	ldrh	r2, [r7, #8]
 8009f0c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009f0e:	893b      	ldrh	r3, [r7, #8]
 8009f10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f18:	d104      	bne.n	8009f24 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009f20:	829a      	strh	r2, [r3, #20]
 8009f22:	e002      	b.n	8009f2a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	8b3a      	ldrh	r2, [r7, #24]
 8009f2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009f30:	8b3b      	ldrh	r3, [r7, #24]
 8009f32:	461a      	mov	r2, r3
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 fba5 	bl	800a686 <USBH_CtlReq>
 8009f3c:	4603      	mov	r3, r0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	789b      	ldrb	r3, [r3, #2]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d10f      	bne.n	8009f7a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2205      	movs	r2, #5
 8009f64:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f66:	78fb      	ldrb	r3, [r7, #3]
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fb81 	bl	800a686 <USBH_CtlReq>
 8009f84:	4603      	mov	r3, r0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	789b      	ldrb	r3, [r3, #2]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d10e      	bne.n	8009fc0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2209      	movs	r2, #9
 8009fac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	887a      	ldrh	r2, [r7, #2]
 8009fb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fb5e 	bl	800a686 <USBH_CtlReq>
 8009fca:	4603      	mov	r3, r0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	789b      	ldrb	r3, [r3, #2]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d10f      	bne.n	800a008 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2203      	movs	r2, #3
 8009ff2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a008:	2200      	movs	r2, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fb3a 	bl	800a686 <USBH_CtlReq>
 800a012:	4603      	mov	r3, r0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	789b      	ldrb	r3, [r3, #2]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d10f      	bne.n	800a050 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a042:	78fb      	ldrb	r3, [r7, #3]
 800a044:	b29a      	uxth	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a050:	2200      	movs	r2, #0
 800a052:	2100      	movs	r1, #0
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fb16 	bl	800a686 <USBH_CtlReq>
 800a05a:	4603      	mov	r3, r0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a078:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a084:	2302      	movs	r3, #2
 800a086:	e094      	b.n	800a1b2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	785a      	ldrb	r2, [r3, #1]
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	3302      	adds	r3, #2
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	3303      	adds	r3, #3
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	021b      	lsls	r3, r3, #8
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	791a      	ldrb	r2, [r3, #4]
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	795a      	ldrb	r2, [r3, #5]
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	799a      	ldrb	r2, [r3, #6]
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	79da      	ldrb	r2, [r3, #7]
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d004      	beq.n	800a0e6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d11b      	bne.n	800a11e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	79db      	ldrb	r3, [r3, #7]
 800a0ea:	2b20      	cmp	r3, #32
 800a0ec:	dc0f      	bgt.n	800a10e <USBH_ParseDevDesc+0xaa>
 800a0ee:	2b08      	cmp	r3, #8
 800a0f0:	db0f      	blt.n	800a112 <USBH_ParseDevDesc+0xae>
 800a0f2:	3b08      	subs	r3, #8
 800a0f4:	4a32      	ldr	r2, [pc, #200]	@ (800a1c0 <USBH_ParseDevDesc+0x15c>)
 800a0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bf14      	ite	ne
 800a102:	2301      	movne	r3, #1
 800a104:	2300      	moveq	r3, #0
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d106      	bne.n	800a11a <USBH_ParseDevDesc+0xb6>
 800a10c:	e001      	b.n	800a112 <USBH_ParseDevDesc+0xae>
 800a10e:	2b40      	cmp	r3, #64	@ 0x40
 800a110:	d003      	beq.n	800a11a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2208      	movs	r2, #8
 800a116:	71da      	strb	r2, [r3, #7]
        break;
 800a118:	e000      	b.n	800a11c <USBH_ParseDevDesc+0xb8>
        break;
 800a11a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a11c:	e00e      	b.n	800a13c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a124:	2b02      	cmp	r3, #2
 800a126:	d107      	bne.n	800a138 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	79db      	ldrb	r3, [r3, #7]
 800a12c:	2b08      	cmp	r3, #8
 800a12e:	d005      	beq.n	800a13c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2208      	movs	r2, #8
 800a134:	71da      	strb	r2, [r3, #7]
 800a136:	e001      	b.n	800a13c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a138:	2303      	movs	r3, #3
 800a13a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a13c:	88fb      	ldrh	r3, [r7, #6]
 800a13e:	2b08      	cmp	r3, #8
 800a140:	d936      	bls.n	800a1b0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	3308      	adds	r3, #8
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	461a      	mov	r2, r3
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	3309      	adds	r3, #9
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	021b      	lsls	r3, r3, #8
 800a152:	b29b      	uxth	r3, r3
 800a154:	4313      	orrs	r3, r2
 800a156:	b29a      	uxth	r2, r3
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	330a      	adds	r3, #10
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	330b      	adds	r3, #11
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	021b      	lsls	r3, r3, #8
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4313      	orrs	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	330c      	adds	r3, #12
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	330d      	adds	r3, #13
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	b29b      	uxth	r3, r3
 800a188:	4313      	orrs	r3, r2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	7b9a      	ldrb	r2, [r3, #14]
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	7bda      	ldrb	r2, [r3, #15]
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	7c1a      	ldrb	r2, [r3, #16]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	7c5a      	ldrb	r2, [r3, #17]
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	371c      	adds	r7, #28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	01000101 	.word	0x01000101

0800a1c4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08c      	sub	sp, #48	@ 0x30
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a1d8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e0da      	b.n	800a3ac <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	785a      	ldrb	r2, [r3, #1]
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	3302      	adds	r3, #2
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	3303      	adds	r3, #3
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	4313      	orrs	r3, r2
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a224:	bf28      	it	cs
 800a226:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	791a      	ldrb	r2, [r3, #4]
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	795a      	ldrb	r2, [r3, #5]
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	799a      	ldrb	r2, [r3, #6]
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	79da      	ldrb	r2, [r3, #7]
 800a24c:	6a3b      	ldr	r3, [r7, #32]
 800a24e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	7a1a      	ldrb	r2, [r3, #8]
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b09      	cmp	r3, #9
 800a25e:	d002      	beq.n	800a266 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	2209      	movs	r2, #9
 800a264:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	2b09      	cmp	r3, #9
 800a26a:	f240 809d 	bls.w	800a3a8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a26e:	2309      	movs	r3, #9
 800a270:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a272:	2300      	movs	r3, #0
 800a274:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a276:	e081      	b.n	800a37c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a278:	f107 0316 	add.w	r3, r7, #22
 800a27c:	4619      	mov	r1, r3
 800a27e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a280:	f000 f9e7 	bl	800a652 <USBH_GetNextDesc>
 800a284:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d176      	bne.n	800a37c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	2b09      	cmp	r3, #9
 800a294:	d002      	beq.n	800a29c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a298:	2209      	movs	r2, #9
 800a29a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a29c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2a0:	221a      	movs	r2, #26
 800a2a2:	fb02 f303 	mul.w	r3, r2, r3
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	6a3a      	ldr	r2, [r7, #32]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a2b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2b2:	69f8      	ldr	r0, [r7, #28]
 800a2b4:	f000 f87e 	bl	800a3b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2c2:	e043      	b.n	800a34c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2c4:	f107 0316 	add.w	r3, r7, #22
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2cc:	f000 f9c1 	bl	800a652 <USBH_GetNextDesc>
 800a2d0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	2b05      	cmp	r3, #5
 800a2d8:	d138      	bne.n	800a34c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	795b      	ldrb	r3, [r3, #5]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d113      	bne.n	800a30a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d003      	beq.n	800a2f2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	799b      	ldrb	r3, [r3, #6]
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d10b      	bne.n	800a30a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	79db      	ldrb	r3, [r3, #7]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10b      	bne.n	800a312 <USBH_ParseCfgDesc+0x14e>
 800a2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b09      	cmp	r3, #9
 800a300:	d007      	beq.n	800a312 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	2209      	movs	r2, #9
 800a306:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a308:	e003      	b.n	800a312 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	2207      	movs	r2, #7
 800a30e:	701a      	strb	r2, [r3, #0]
 800a310:	e000      	b.n	800a314 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a312:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a318:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a31c:	3201      	adds	r2, #1
 800a31e:	00d2      	lsls	r2, r2, #3
 800a320:	211a      	movs	r1, #26
 800a322:	fb01 f303 	mul.w	r3, r1, r3
 800a326:	4413      	add	r3, r2
 800a328:	3308      	adds	r3, #8
 800a32a:	6a3a      	ldr	r2, [r7, #32]
 800a32c:	4413      	add	r3, r2
 800a32e:	3304      	adds	r3, #4
 800a330:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a334:	69b9      	ldr	r1, [r7, #24]
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f000 f870 	bl	800a41c <USBH_ParseEPDesc>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a342:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a346:	3301      	adds	r3, #1
 800a348:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	791b      	ldrb	r3, [r3, #4]
 800a350:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a354:	429a      	cmp	r2, r3
 800a356:	d204      	bcs.n	800a362 <USBH_ParseCfgDesc+0x19e>
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	885a      	ldrh	r2, [r3, #2]
 800a35c:	8afb      	ldrh	r3, [r7, #22]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d8b0      	bhi.n	800a2c4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	791b      	ldrb	r3, [r3, #4]
 800a366:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d201      	bcs.n	800a372 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a36e:	2303      	movs	r3, #3
 800a370:	e01c      	b.n	800a3ac <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a372:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a376:	3301      	adds	r3, #1
 800a378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a37c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a380:	2b01      	cmp	r3, #1
 800a382:	d805      	bhi.n	800a390 <USBH_ParseCfgDesc+0x1cc>
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	885a      	ldrh	r2, [r3, #2]
 800a388:	8afb      	ldrh	r3, [r7, #22]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	f63f af74 	bhi.w	800a278 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	791b      	ldrb	r3, [r3, #4]
 800a394:	2b02      	cmp	r3, #2
 800a396:	bf28      	it	cs
 800a398:	2302      	movcs	r3, #2
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d201      	bcs.n	800a3a8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e001      	b.n	800a3ac <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a3a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3730      	adds	r7, #48	@ 0x30
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781a      	ldrb	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	785a      	ldrb	r2, [r3, #1]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	789a      	ldrb	r2, [r3, #2]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	78da      	ldrb	r2, [r3, #3]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	bf28      	it	cs
 800a3e8:	2302      	movcs	r3, #2
 800a3ea:	b2da      	uxtb	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	795a      	ldrb	r2, [r3, #5]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	799a      	ldrb	r2, [r3, #6]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	79da      	ldrb	r2, [r3, #7]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	7a1a      	ldrb	r2, [r3, #8]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	721a      	strb	r2, [r3, #8]
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	781a      	ldrb	r2, [r3, #0]
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	785a      	ldrb	r2, [r3, #1]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	789a      	ldrb	r2, [r3, #2]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	78da      	ldrb	r2, [r3, #3]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3304      	adds	r3, #4
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3305      	adds	r3, #5
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	021b      	lsls	r3, r3, #8
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	4313      	orrs	r3, r2
 800a460:	b29a      	uxth	r2, r3
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	799a      	ldrb	r2, [r3, #6]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	889b      	ldrh	r3, [r3, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a47a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a47e:	d804      	bhi.n	800a48a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a488:	d901      	bls.n	800a48e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a48a:	2303      	movs	r3, #3
 800a48c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a494:	2b00      	cmp	r3, #0
 800a496:	d136      	bne.n	800a506 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	78db      	ldrb	r3, [r3, #3]
 800a49c:	f003 0303 	and.w	r3, r3, #3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d108      	bne.n	800a4b6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	889b      	ldrh	r3, [r3, #4]
 800a4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4ac:	f240 8097 	bls.w	800a5de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	75fb      	strb	r3, [r7, #23]
 800a4b4:	e093      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	78db      	ldrb	r3, [r3, #3]
 800a4ba:	f003 0303 	and.w	r3, r3, #3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d107      	bne.n	800a4d2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	889b      	ldrh	r3, [r3, #4]
 800a4c6:	2b40      	cmp	r3, #64	@ 0x40
 800a4c8:	f240 8089 	bls.w	800a5de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	75fb      	strb	r3, [r7, #23]
 800a4d0:	e085      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	78db      	ldrb	r3, [r3, #3]
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d005      	beq.n	800a4ea <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	78db      	ldrb	r3, [r3, #3]
 800a4e2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d10a      	bne.n	800a500 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	799b      	ldrb	r3, [r3, #6]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <USBH_ParseEPDesc+0xde>
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	799b      	ldrb	r3, [r3, #6]
 800a4f6:	2b10      	cmp	r3, #16
 800a4f8:	d970      	bls.n	800a5dc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4fe:	e06d      	b.n	800a5dc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a500:	2303      	movs	r3, #3
 800a502:	75fb      	strb	r3, [r7, #23]
 800a504:	e06b      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d13c      	bne.n	800a58a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	78db      	ldrb	r3, [r3, #3]
 800a514:	f003 0303 	and.w	r3, r3, #3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d005      	beq.n	800a528 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	78db      	ldrb	r3, [r3, #3]
 800a520:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a524:	2b00      	cmp	r3, #0
 800a526:	d106      	bne.n	800a536 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	889b      	ldrh	r3, [r3, #4]
 800a52c:	2b40      	cmp	r3, #64	@ 0x40
 800a52e:	d956      	bls.n	800a5de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a530:	2303      	movs	r3, #3
 800a532:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a534:	e053      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	78db      	ldrb	r3, [r3, #3]
 800a53a:	f003 0303 	and.w	r3, r3, #3
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d10e      	bne.n	800a560 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	799b      	ldrb	r3, [r3, #6]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d007      	beq.n	800a55a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a54e:	2b10      	cmp	r3, #16
 800a550:	d803      	bhi.n	800a55a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a556:	2b40      	cmp	r3, #64	@ 0x40
 800a558:	d941      	bls.n	800a5de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a55a:	2303      	movs	r3, #3
 800a55c:	75fb      	strb	r3, [r7, #23]
 800a55e:	e03e      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	78db      	ldrb	r3, [r3, #3]
 800a564:	f003 0303 	and.w	r3, r3, #3
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d10b      	bne.n	800a584 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	799b      	ldrb	r3, [r3, #6]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d004      	beq.n	800a57e <USBH_ParseEPDesc+0x162>
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	889b      	ldrh	r3, [r3, #4]
 800a578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a57c:	d32f      	bcc.n	800a5de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a57e:	2303      	movs	r3, #3
 800a580:	75fb      	strb	r3, [r7, #23]
 800a582:	e02c      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a584:	2303      	movs	r3, #3
 800a586:	75fb      	strb	r3, [r7, #23]
 800a588:	e029      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a590:	2b02      	cmp	r3, #2
 800a592:	d120      	bne.n	800a5d6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	78db      	ldrb	r3, [r3, #3]
 800a598:	f003 0303 	and.w	r3, r3, #3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d106      	bne.n	800a5ae <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	889b      	ldrh	r3, [r3, #4]
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d01a      	beq.n	800a5de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	75fb      	strb	r3, [r7, #23]
 800a5ac:	e017      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	78db      	ldrb	r3, [r3, #3]
 800a5b2:	f003 0303 	and.w	r3, r3, #3
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d10a      	bne.n	800a5d0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	799b      	ldrb	r3, [r3, #6]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <USBH_ParseEPDesc+0x1ae>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	889b      	ldrh	r3, [r3, #4]
 800a5c6:	2b08      	cmp	r3, #8
 800a5c8:	d909      	bls.n	800a5de <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	75fb      	strb	r3, [r7, #23]
 800a5ce:	e006      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	75fb      	strb	r3, [r7, #23]
 800a5d4:	e003      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	75fb      	strb	r3, [r7, #23]
 800a5da:	e000      	b.n	800a5de <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5dc:	bf00      	nop
  }

  return status;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	371c      	adds	r7, #28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b03      	cmp	r3, #3
 800a602:	d120      	bne.n	800a646 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	1e9a      	subs	r2, r3, #2
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	4293      	cmp	r3, r2
 800a60e:	bf28      	it	cs
 800a610:	4613      	movcs	r3, r2
 800a612:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3302      	adds	r3, #2
 800a618:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a61a:	2300      	movs	r3, #0
 800a61c:	82fb      	strh	r3, [r7, #22]
 800a61e:	e00b      	b.n	800a638 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a620:	8afb      	ldrh	r3, [r7, #22]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	4413      	add	r3, r2
 800a626:	781a      	ldrb	r2, [r3, #0]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	3301      	adds	r3, #1
 800a630:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a632:	8afb      	ldrh	r3, [r7, #22]
 800a634:	3302      	adds	r3, #2
 800a636:	82fb      	strh	r3, [r7, #22]
 800a638:	8afa      	ldrh	r2, [r7, #22]
 800a63a:	8abb      	ldrh	r3, [r7, #20]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d3ef      	bcc.n	800a620 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2200      	movs	r2, #0
 800a644:	701a      	strb	r2, [r3, #0]
  }
}
 800a646:	bf00      	nop
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a652:	b480      	push	{r7}
 800a654:	b085      	sub	sp, #20
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	4413      	add	r3, r2
 800a666:	b29a      	uxth	r2, r3
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4413      	add	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a678:	68fb      	ldr	r3, [r7, #12]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	4613      	mov	r3, r2
 800a692:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a694:	2301      	movs	r3, #1
 800a696:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	789b      	ldrb	r3, [r3, #2]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d002      	beq.n	800a6a6 <USBH_CtlReq+0x20>
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d00f      	beq.n	800a6c4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a6a4:	e027      	b.n	800a6f6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	88fa      	ldrh	r2, [r7, #6]
 800a6b0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a6c2:	e018      	b.n	800a6f6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f000 f81b 	bl	800a700 <USBH_HandleControl>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <USBH_CtlReq+0x54>
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d106      	bne.n	800a6e8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	761a      	strb	r2, [r3, #24]
      break;
 800a6e6:	e005      	b.n	800a6f4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a6e8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d102      	bne.n	800a6f4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	709a      	strb	r2, [r3, #2]
      break;
 800a6f4:	bf00      	nop
  }
  return status;
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af02      	add	r7, sp, #8
 800a706:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a708:	2301      	movs	r3, #1
 800a70a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	7e1b      	ldrb	r3, [r3, #24]
 800a714:	3b01      	subs	r3, #1
 800a716:	2b0a      	cmp	r3, #10
 800a718:	f200 8156 	bhi.w	800a9c8 <USBH_HandleControl+0x2c8>
 800a71c:	a201      	add	r2, pc, #4	@ (adr r2, 800a724 <USBH_HandleControl+0x24>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a751 	.word	0x0800a751
 800a728:	0800a76b 	.word	0x0800a76b
 800a72c:	0800a7d5 	.word	0x0800a7d5
 800a730:	0800a7fb 	.word	0x0800a7fb
 800a734:	0800a833 	.word	0x0800a833
 800a738:	0800a85d 	.word	0x0800a85d
 800a73c:	0800a8af 	.word	0x0800a8af
 800a740:	0800a8d1 	.word	0x0800a8d1
 800a744:	0800a90d 	.word	0x0800a90d
 800a748:	0800a933 	.word	0x0800a933
 800a74c:	0800a971 	.word	0x0800a971
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f103 0110 	add.w	r1, r3, #16
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	795b      	ldrb	r3, [r3, #5]
 800a75a:	461a      	mov	r2, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f943 	bl	800a9e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2202      	movs	r2, #2
 800a766:	761a      	strb	r2, [r3, #24]
      break;
 800a768:	e139      	b.n	800a9de <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	795b      	ldrb	r3, [r3, #5]
 800a76e:	4619      	mov	r1, r3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fcc5 	bl	800b100 <USBH_LL_GetURBState>
 800a776:	4603      	mov	r3, r0
 800a778:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a77a:	7bbb      	ldrb	r3, [r7, #14]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d11e      	bne.n	800a7be <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	7c1b      	ldrb	r3, [r3, #16]
 800a784:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a788:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	8adb      	ldrh	r3, [r3, #22]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00a      	beq.n	800a7a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a792:	7b7b      	ldrb	r3, [r7, #13]
 800a794:	2b80      	cmp	r3, #128	@ 0x80
 800a796:	d103      	bne.n	800a7a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2203      	movs	r2, #3
 800a79c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a79e:	e115      	b.n	800a9cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2205      	movs	r2, #5
 800a7a4:	761a      	strb	r2, [r3, #24]
      break;
 800a7a6:	e111      	b.n	800a9cc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a7a8:	7b7b      	ldrb	r3, [r7, #13]
 800a7aa:	2b80      	cmp	r3, #128	@ 0x80
 800a7ac:	d103      	bne.n	800a7b6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2209      	movs	r2, #9
 800a7b2:	761a      	strb	r2, [r3, #24]
      break;
 800a7b4:	e10a      	b.n	800a9cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2207      	movs	r2, #7
 800a7ba:	761a      	strb	r2, [r3, #24]
      break;
 800a7bc:	e106      	b.n	800a9cc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d003      	beq.n	800a7cc <USBH_HandleControl+0xcc>
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	f040 8100 	bne.w	800a9cc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	220b      	movs	r2, #11
 800a7d0:	761a      	strb	r2, [r3, #24]
      break;
 800a7d2:	e0fb      	b.n	800a9cc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6899      	ldr	r1, [r3, #8]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	899a      	ldrh	r2, [r3, #12]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	791b      	ldrb	r3, [r3, #4]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f93a 	bl	800aa66 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2204      	movs	r2, #4
 800a7f6:	761a      	strb	r2, [r3, #24]
      break;
 800a7f8:	e0f1      	b.n	800a9de <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	791b      	ldrb	r3, [r3, #4]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fc7d 	bl	800b100 <USBH_LL_GetURBState>
 800a806:	4603      	mov	r3, r0
 800a808:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d102      	bne.n	800a816 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2209      	movs	r2, #9
 800a814:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	2b05      	cmp	r3, #5
 800a81a:	d102      	bne.n	800a822 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a81c:	2303      	movs	r3, #3
 800a81e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a820:	e0d6      	b.n	800a9d0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	2b04      	cmp	r3, #4
 800a826:	f040 80d3 	bne.w	800a9d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	220b      	movs	r2, #11
 800a82e:	761a      	strb	r2, [r3, #24]
      break;
 800a830:	e0ce      	b.n	800a9d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6899      	ldr	r1, [r3, #8]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	899a      	ldrh	r2, [r3, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	795b      	ldrb	r3, [r3, #5]
 800a83e:	2001      	movs	r0, #1
 800a840:	9000      	str	r0, [sp, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f8ea 	bl	800aa1c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a84e:	b29a      	uxth	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2206      	movs	r2, #6
 800a858:	761a      	strb	r2, [r3, #24]
      break;
 800a85a:	e0c0      	b.n	800a9de <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	795b      	ldrb	r3, [r3, #5]
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fc4c 	bl	800b100 <USBH_LL_GetURBState>
 800a868:	4603      	mov	r3, r0
 800a86a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d103      	bne.n	800a87a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2207      	movs	r2, #7
 800a876:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a878:	e0ac      	b.n	800a9d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	2b05      	cmp	r3, #5
 800a87e:	d105      	bne.n	800a88c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	220c      	movs	r2, #12
 800a884:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a886:	2303      	movs	r3, #3
 800a888:	73fb      	strb	r3, [r7, #15]
      break;
 800a88a:	e0a3      	b.n	800a9d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d103      	bne.n	800a89a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2205      	movs	r2, #5
 800a896:	761a      	strb	r2, [r3, #24]
      break;
 800a898:	e09c      	b.n	800a9d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a89a:	7bbb      	ldrb	r3, [r7, #14]
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	f040 8099 	bne.w	800a9d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	220b      	movs	r2, #11
 800a8a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ac:	e092      	b.n	800a9d4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	791b      	ldrb	r3, [r3, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f8d5 	bl	800aa66 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2208      	movs	r2, #8
 800a8cc:	761a      	strb	r2, [r3, #24]

      break;
 800a8ce:	e086      	b.n	800a9de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	791b      	ldrb	r3, [r3, #4]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fc12 	bl	800b100 <USBH_LL_GetURBState>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d105      	bne.n	800a8f2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	220d      	movs	r2, #13
 800a8ea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8f0:	e072      	b.n	800a9d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	d103      	bne.n	800a900 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	220b      	movs	r2, #11
 800a8fc:	761a      	strb	r2, [r3, #24]
      break;
 800a8fe:	e06b      	b.n	800a9d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	2b05      	cmp	r3, #5
 800a904:	d168      	bne.n	800a9d8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a906:	2303      	movs	r3, #3
 800a908:	73fb      	strb	r3, [r7, #15]
      break;
 800a90a:	e065      	b.n	800a9d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	795b      	ldrb	r3, [r3, #5]
 800a910:	2201      	movs	r2, #1
 800a912:	9200      	str	r2, [sp, #0]
 800a914:	2200      	movs	r2, #0
 800a916:	2100      	movs	r1, #0
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f87f 	bl	800aa1c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a924:	b29a      	uxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	220a      	movs	r2, #10
 800a92e:	761a      	strb	r2, [r3, #24]
      break;
 800a930:	e055      	b.n	800a9de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	795b      	ldrb	r3, [r3, #5]
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fbe1 	bl	800b100 <USBH_LL_GetURBState>
 800a93e:	4603      	mov	r3, r0
 800a940:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d105      	bne.n	800a954 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	220d      	movs	r2, #13
 800a950:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a952:	e043      	b.n	800a9dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d103      	bne.n	800a962 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2209      	movs	r2, #9
 800a95e:	761a      	strb	r2, [r3, #24]
      break;
 800a960:	e03c      	b.n	800a9dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b04      	cmp	r3, #4
 800a966:	d139      	bne.n	800a9dc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	220b      	movs	r2, #11
 800a96c:	761a      	strb	r2, [r3, #24]
      break;
 800a96e:	e035      	b.n	800a9dc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	7e5b      	ldrb	r3, [r3, #25]
 800a974:	3301      	adds	r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	765a      	strb	r2, [r3, #25]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	7e5b      	ldrb	r3, [r3, #25]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d806      	bhi.n	800a992 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a990:	e025      	b.n	800a9de <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a998:	2106      	movs	r1, #6
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	795b      	ldrb	r3, [r3, #5]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f90c 	bl	800abc8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	791b      	ldrb	r3, [r3, #4]
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f906 	bl	800abc8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a9c6:	e00a      	b.n	800a9de <USBH_HandleControl+0x2de>

    default:
      break;
 800a9c8:	bf00      	nop
 800a9ca:	e008      	b.n	800a9de <USBH_HandleControl+0x2de>
      break;
 800a9cc:	bf00      	nop
 800a9ce:	e006      	b.n	800a9de <USBH_HandleControl+0x2de>
      break;
 800a9d0:	bf00      	nop
 800a9d2:	e004      	b.n	800a9de <USBH_HandleControl+0x2de>
      break;
 800a9d4:	bf00      	nop
 800a9d6:	e002      	b.n	800a9de <USBH_HandleControl+0x2de>
      break;
 800a9d8:	bf00      	nop
 800a9da:	e000      	b.n	800a9de <USBH_HandleControl+0x2de>
      break;
 800a9dc:	bf00      	nop
  }

  return status;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af04      	add	r7, sp, #16
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9f6:	79f9      	ldrb	r1, [r7, #7]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9303      	str	r3, [sp, #12]
 800a9fc:	2308      	movs	r3, #8
 800a9fe:	9302      	str	r3, [sp, #8]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	2300      	movs	r3, #0
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 fb46 	bl	800b09e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af04      	add	r7, sp, #16
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4611      	mov	r1, r2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	80fb      	strh	r3, [r7, #6]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa40:	7979      	ldrb	r1, [r7, #5]
 800aa42:	7e3b      	ldrb	r3, [r7, #24]
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	88fb      	ldrh	r3, [r7, #6]
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	2301      	movs	r3, #1
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	2300      	movs	r3, #0
 800aa54:	2200      	movs	r2, #0
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f000 fb21 	bl	800b09e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b088      	sub	sp, #32
 800aa6a:	af04      	add	r7, sp, #16
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	4611      	mov	r1, r2
 800aa72:	461a      	mov	r2, r3
 800aa74:	460b      	mov	r3, r1
 800aa76:	80fb      	strh	r3, [r7, #6]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa7c:	7979      	ldrb	r1, [r7, #5]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	9303      	str	r3, [sp, #12]
 800aa82:	88fb      	ldrh	r3, [r7, #6]
 800aa84:	9302      	str	r3, [sp, #8]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	2300      	movs	r3, #0
 800aa90:	2201      	movs	r2, #1
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 fb03 	bl	800b09e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa98:	2300      	movs	r3, #0

}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b088      	sub	sp, #32
 800aaa6:	af04      	add	r7, sp, #16
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	4611      	mov	r1, r2
 800aaae:	461a      	mov	r2, r3
 800aab0:	460b      	mov	r3, r1
 800aab2:	80fb      	strh	r3, [r7, #6]
 800aab4:	4613      	mov	r3, r2
 800aab6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aac6:	7979      	ldrb	r1, [r7, #5]
 800aac8:	7e3b      	ldrb	r3, [r7, #24]
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	88fb      	ldrh	r3, [r7, #6]
 800aace:	9302      	str	r3, [sp, #8]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	9301      	str	r3, [sp, #4]
 800aad4:	2301      	movs	r3, #1
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	2302      	movs	r3, #2
 800aada:	2200      	movs	r2, #0
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 fade 	bl	800b09e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af04      	add	r7, sp, #16
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	461a      	mov	r2, r3
 800aafa:	460b      	mov	r3, r1
 800aafc:	80fb      	strh	r3, [r7, #6]
 800aafe:	4613      	mov	r3, r2
 800ab00:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab02:	7979      	ldrb	r1, [r7, #5]
 800ab04:	2300      	movs	r3, #0
 800ab06:	9303      	str	r3, [sp, #12]
 800ab08:	88fb      	ldrh	r3, [r7, #6]
 800ab0a:	9302      	str	r3, [sp, #8]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	2301      	movs	r3, #1
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	2302      	movs	r3, #2
 800ab16:	2201      	movs	r2, #1
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 fac0 	bl	800b09e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af04      	add	r7, sp, #16
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	4608      	mov	r0, r1
 800ab32:	4611      	mov	r1, r2
 800ab34:	461a      	mov	r2, r3
 800ab36:	4603      	mov	r3, r0
 800ab38:	70fb      	strb	r3, [r7, #3]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	70bb      	strb	r3, [r7, #2]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab42:	7878      	ldrb	r0, [r7, #1]
 800ab44:	78ba      	ldrb	r2, [r7, #2]
 800ab46:	78f9      	ldrb	r1, [r7, #3]
 800ab48:	8b3b      	ldrh	r3, [r7, #24]
 800ab4a:	9302      	str	r3, [sp, #8]
 800ab4c:	7d3b      	ldrb	r3, [r7, #20]
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	7c3b      	ldrb	r3, [r7, #16]
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	4603      	mov	r3, r0
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fa53 	bl	800b002 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa72 	bl	800b060 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	460b      	mov	r3, r1
 800ab90:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f836 	bl	800ac04 <USBH_GetFreePipe>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab9c:	89fb      	ldrh	r3, [r7, #14]
 800ab9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d00a      	beq.n	800abbc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800aba6:	78fa      	ldrb	r2, [r7, #3]
 800aba8:	89fb      	ldrh	r3, [r7, #14]
 800abaa:	f003 030f 	and.w	r3, r3, #15
 800abae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800abb2:	6879      	ldr	r1, [r7, #4]
 800abb4:	33e0      	adds	r3, #224	@ 0xe0
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	440b      	add	r3, r1
 800abba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800abbc:	89fb      	ldrh	r3, [r7, #14]
 800abbe:	b2db      	uxtb	r3, r3
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	2b0f      	cmp	r3, #15
 800abd8:	d80d      	bhi.n	800abf6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800abda:	78fb      	ldrb	r3, [r7, #3]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	33e0      	adds	r3, #224	@ 0xe0
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	78fb      	ldrb	r3, [r7, #3]
 800abe8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	33e0      	adds	r3, #224	@ 0xe0
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]
 800ac14:	e00f      	b.n	800ac36 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	33e0      	adds	r3, #224	@ 0xe0
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d102      	bne.n	800ac30 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	e007      	b.n	800ac40 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	3301      	adds	r3, #1
 800ac34:	73fb      	strb	r3, [r7, #15]
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	2b0f      	cmp	r3, #15
 800ac3a:	d9ec      	bls.n	800ac16 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ac50:	2201      	movs	r2, #1
 800ac52:	490e      	ldr	r1, [pc, #56]	@ (800ac8c <MX_USB_HOST_Init+0x40>)
 800ac54:	480e      	ldr	r0, [pc, #56]	@ (800ac90 <MX_USB_HOST_Init+0x44>)
 800ac56:	f7fe fb15 	bl	8009284 <USBH_Init>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ac60:	f7f7 f82a 	bl	8001cb8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ac64:	490b      	ldr	r1, [pc, #44]	@ (800ac94 <MX_USB_HOST_Init+0x48>)
 800ac66:	480a      	ldr	r0, [pc, #40]	@ (800ac90 <MX_USB_HOST_Init+0x44>)
 800ac68:	f7fe fbb9 	bl	80093de <USBH_RegisterClass>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ac72:	f7f7 f821 	bl	8001cb8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ac76:	4806      	ldr	r0, [pc, #24]	@ (800ac90 <MX_USB_HOST_Init+0x44>)
 800ac78:	f7fe fc3d 	bl	80094f6 <USBH_Start>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ac82:	f7f7 f819 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ac86:	bf00      	nop
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	0800acad 	.word	0x0800acad
 800ac90:	200005f0 	.word	0x200005f0
 800ac94:	2000000c 	.word	0x2000000c

0800ac98 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ac9c:	4802      	ldr	r0, [pc, #8]	@ (800aca8 <MX_USB_HOST_Process+0x10>)
 800ac9e:	f7fe fc3b 	bl	8009518 <USBH_Process>
}
 800aca2:	bf00      	nop
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	200005f0 	.word	0x200005f0

0800acac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	3b01      	subs	r3, #1
 800acbc:	2b04      	cmp	r3, #4
 800acbe:	d819      	bhi.n	800acf4 <USBH_UserProcess+0x48>
 800acc0:	a201      	add	r2, pc, #4	@ (adr r2, 800acc8 <USBH_UserProcess+0x1c>)
 800acc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc6:	bf00      	nop
 800acc8:	0800acf5 	.word	0x0800acf5
 800accc:	0800ace5 	.word	0x0800ace5
 800acd0:	0800acf5 	.word	0x0800acf5
 800acd4:	0800aced 	.word	0x0800aced
 800acd8:	0800acdd 	.word	0x0800acdd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800acdc:	4b09      	ldr	r3, [pc, #36]	@ (800ad04 <USBH_UserProcess+0x58>)
 800acde:	2203      	movs	r2, #3
 800ace0:	701a      	strb	r2, [r3, #0]
  break;
 800ace2:	e008      	b.n	800acf6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ace4:	4b07      	ldr	r3, [pc, #28]	@ (800ad04 <USBH_UserProcess+0x58>)
 800ace6:	2202      	movs	r2, #2
 800ace8:	701a      	strb	r2, [r3, #0]
  break;
 800acea:	e004      	b.n	800acf6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800acec:	4b05      	ldr	r3, [pc, #20]	@ (800ad04 <USBH_UserProcess+0x58>)
 800acee:	2201      	movs	r2, #1
 800acf0:	701a      	strb	r2, [r3, #0]
  break;
 800acf2:	e000      	b.n	800acf6 <USBH_UserProcess+0x4a>

  default:
  break;
 800acf4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800acf6:	bf00      	nop
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	200009c8 	.word	0x200009c8

0800ad08 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	@ 0x28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad10:	f107 0314 	add.w	r3, r7, #20
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	605a      	str	r2, [r3, #4]
 800ad1a:	609a      	str	r2, [r3, #8]
 800ad1c:	60da      	str	r2, [r3, #12]
 800ad1e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad28:	d147      	bne.n	800adba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	613b      	str	r3, [r7, #16]
 800ad2e:	4b25      	ldr	r3, [pc, #148]	@ (800adc4 <HAL_HCD_MspInit+0xbc>)
 800ad30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad32:	4a24      	ldr	r2, [pc, #144]	@ (800adc4 <HAL_HCD_MspInit+0xbc>)
 800ad34:	f043 0301 	orr.w	r3, r3, #1
 800ad38:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad3a:	4b22      	ldr	r3, [pc, #136]	@ (800adc4 <HAL_HCD_MspInit+0xbc>)
 800ad3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	613b      	str	r3, [r7, #16]
 800ad44:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ad46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ad54:	f107 0314 	add.w	r3, r7, #20
 800ad58:	4619      	mov	r1, r3
 800ad5a:	481b      	ldr	r0, [pc, #108]	@ (800adc8 <HAL_HCD_MspInit+0xc0>)
 800ad5c:	f7f7 fe4c 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ad60:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ad64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad66:	2302      	movs	r3, #2
 800ad68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad72:	230a      	movs	r3, #10
 800ad74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad76:	f107 0314 	add.w	r3, r7, #20
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	4812      	ldr	r0, [pc, #72]	@ (800adc8 <HAL_HCD_MspInit+0xc0>)
 800ad7e:	f7f7 fe3b 	bl	80029f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad82:	4b10      	ldr	r3, [pc, #64]	@ (800adc4 <HAL_HCD_MspInit+0xbc>)
 800ad84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad86:	4a0f      	ldr	r2, [pc, #60]	@ (800adc4 <HAL_HCD_MspInit+0xbc>)
 800ad88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad8c:	6353      	str	r3, [r2, #52]	@ 0x34
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	4b0c      	ldr	r3, [pc, #48]	@ (800adc4 <HAL_HCD_MspInit+0xbc>)
 800ad94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad96:	4a0b      	ldr	r2, [pc, #44]	@ (800adc4 <HAL_HCD_MspInit+0xbc>)
 800ad98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad9c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad9e:	4b09      	ldr	r3, [pc, #36]	@ (800adc4 <HAL_HCD_MspInit+0xbc>)
 800ada0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ada6:	60fb      	str	r3, [r7, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800adaa:	2200      	movs	r2, #0
 800adac:	2100      	movs	r1, #0
 800adae:	2043      	movs	r0, #67	@ 0x43
 800adb0:	f7f7 fdeb 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800adb4:	2043      	movs	r0, #67	@ 0x43
 800adb6:	f7f7 fe04 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800adba:	bf00      	nop
 800adbc:	3728      	adds	r7, #40	@ 0x28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	40023800 	.word	0x40023800
 800adc8:	40020000 	.word	0x40020000

0800adcc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe ff73 	bl	8009cc6 <USBH_LL_IncTimer>
}
 800ade0:	bf00      	nop
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe ffab 	bl	8009d52 <USBH_LL_Connect>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe ffb4 	bl	8009d80 <USBH_LL_Disconnect>
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	70fb      	strb	r3, [r7, #3]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe ff65 	bl	8009d1a <USBH_LL_PortEnabled>
}
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe ff65 	bl	8009d36 <USBH_LL_PortDisabled>
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d12a      	bne.n	800aedc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ae86:	4a18      	ldr	r2, [pc, #96]	@ (800aee8 <USBH_LL_Init+0x74>)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a15      	ldr	r2, [pc, #84]	@ (800aee8 <USBH_LL_Init+0x74>)
 800ae92:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae96:	4b14      	ldr	r3, [pc, #80]	@ (800aee8 <USBH_LL_Init+0x74>)
 800ae98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ae9e:	4b12      	ldr	r3, [pc, #72]	@ (800aee8 <USBH_LL_Init+0x74>)
 800aea0:	2208      	movs	r2, #8
 800aea2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aea4:	4b10      	ldr	r3, [pc, #64]	@ (800aee8 <USBH_LL_Init+0x74>)
 800aea6:	2201      	movs	r2, #1
 800aea8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aeaa:	4b0f      	ldr	r3, [pc, #60]	@ (800aee8 <USBH_LL_Init+0x74>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aeb0:	4b0d      	ldr	r3, [pc, #52]	@ (800aee8 <USBH_LL_Init+0x74>)
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aeb6:	4b0c      	ldr	r3, [pc, #48]	@ (800aee8 <USBH_LL_Init+0x74>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aebc:	480a      	ldr	r0, [pc, #40]	@ (800aee8 <USBH_LL_Init+0x74>)
 800aebe:	f7f7 ff68 	bl	8002d92 <HAL_HCD_Init>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aec8:	f7f6 fef6 	bl	8001cb8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aecc:	4806      	ldr	r0, [pc, #24]	@ (800aee8 <USBH_LL_Init+0x74>)
 800aece:	f7f8 fbc9 	bl	8003664 <HAL_HCD_GetCurrentFrame>
 800aed2:	4603      	mov	r3, r0
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7fe fee6 	bl	8009ca8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	200009cc 	.word	0x200009cc

0800aeec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af02:	4618      	mov	r0, r3
 800af04:	f7f8 fb36 	bl	8003574 <HAL_HCD_Start>
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f95e 	bl	800b1d0 <USBH_Get_USB_Status>
 800af14:	4603      	mov	r3, r0
 800af16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af18:	7bbb      	ldrb	r3, [r7, #14]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f8 fb3e 	bl	80035ba <HAL_HCD_Stop>
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	4618      	mov	r0, r3
 800af46:	f000 f943 	bl	800b1d0 <USBH_Get_USB_Status>
 800af4a:	4603      	mov	r3, r0
 800af4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800af60:	2301      	movs	r3, #1
 800af62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7f8 fb88 	bl	8003680 <HAL_HCD_GetCurrentSpeed>
 800af70:	4603      	mov	r3, r0
 800af72:	2b02      	cmp	r3, #2
 800af74:	d00c      	beq.n	800af90 <USBH_LL_GetSpeed+0x38>
 800af76:	2b02      	cmp	r3, #2
 800af78:	d80d      	bhi.n	800af96 <USBH_LL_GetSpeed+0x3e>
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <USBH_LL_GetSpeed+0x2c>
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d003      	beq.n	800af8a <USBH_LL_GetSpeed+0x32>
 800af82:	e008      	b.n	800af96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800af84:	2300      	movs	r3, #0
 800af86:	73fb      	strb	r3, [r7, #15]
    break;
 800af88:	e008      	b.n	800af9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800af8a:	2301      	movs	r3, #1
 800af8c:	73fb      	strb	r3, [r7, #15]
    break;
 800af8e:	e005      	b.n	800af9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800af90:	2302      	movs	r3, #2
 800af92:	73fb      	strb	r3, [r7, #15]
    break;
 800af94:	e002      	b.n	800af9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800af96:	2301      	movs	r3, #1
 800af98:	73fb      	strb	r3, [r7, #15]
    break;
 800af9a:	bf00      	nop
  }
  return  speed;
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b084      	sub	sp, #16
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f8 fb19 	bl	80035f4 <HAL_HCD_ResetPort>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f901 	bl	800b1d0 <USBH_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800afee:	78fa      	ldrb	r2, [r7, #3]
 800aff0:	4611      	mov	r1, r2
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7f8 fb21 	bl	800363a <HAL_HCD_HC_GetXferCount>
 800aff8:	4603      	mov	r3, r0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b002:	b590      	push	{r4, r7, lr}
 800b004:	b089      	sub	sp, #36	@ 0x24
 800b006:	af04      	add	r7, sp, #16
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	4608      	mov	r0, r1
 800b00c:	4611      	mov	r1, r2
 800b00e:	461a      	mov	r2, r3
 800b010:	4603      	mov	r3, r0
 800b012:	70fb      	strb	r3, [r7, #3]
 800b014:	460b      	mov	r3, r1
 800b016:	70bb      	strb	r3, [r7, #2]
 800b018:	4613      	mov	r3, r2
 800b01a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b02a:	787c      	ldrb	r4, [r7, #1]
 800b02c:	78ba      	ldrb	r2, [r7, #2]
 800b02e:	78f9      	ldrb	r1, [r7, #3]
 800b030:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b032:	9302      	str	r3, [sp, #8]
 800b034:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b038:	9301      	str	r3, [sp, #4]
 800b03a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	4623      	mov	r3, r4
 800b042:	f7f7 ff0d 	bl	8002e60 <HAL_HCD_HC_Init>
 800b046:	4603      	mov	r3, r0
 800b048:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f000 f8bf 	bl	800b1d0 <USBH_Get_USB_Status>
 800b052:	4603      	mov	r3, r0
 800b054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b056:	7bbb      	ldrb	r3, [r7, #14]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd90      	pop	{r4, r7, pc}

0800b060 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b07a:	78fa      	ldrb	r2, [r7, #3]
 800b07c:	4611      	mov	r1, r2
 800b07e:	4618      	mov	r0, r3
 800b080:	f7f7 ffa6 	bl	8002fd0 <HAL_HCD_HC_Halt>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 f8a0 	bl	800b1d0 <USBH_Get_USB_Status>
 800b090:	4603      	mov	r3, r0
 800b092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b094:	7bbb      	ldrb	r3, [r7, #14]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b09e:	b590      	push	{r4, r7, lr}
 800b0a0:	b089      	sub	sp, #36	@ 0x24
 800b0a2:	af04      	add	r7, sp, #16
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	70fb      	strb	r3, [r7, #3]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70bb      	strb	r3, [r7, #2]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b0c6:	787c      	ldrb	r4, [r7, #1]
 800b0c8:	78ba      	ldrb	r2, [r7, #2]
 800b0ca:	78f9      	ldrb	r1, [r7, #3]
 800b0cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b0d0:	9303      	str	r3, [sp, #12]
 800b0d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b0d4:	9302      	str	r3, [sp, #8]
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	4623      	mov	r3, r4
 800b0e2:	f7f7 ff99 	bl	8003018 <HAL_HCD_HC_SubmitRequest>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 f86f 	bl	800b1d0 <USBH_Get_USB_Status>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd90      	pop	{r4, r7, pc}

0800b100 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b112:	78fa      	ldrb	r2, [r7, #3]
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f7f8 fa7a 	bl	8003610 <HAL_HCD_HC_GetURBState>
 800b11c:	4603      	mov	r3, r0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b082      	sub	sp, #8
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	460b      	mov	r3, r1
 800b130:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d103      	bne.n	800b144 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b13c:	78fb      	ldrb	r3, [r7, #3]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f872 	bl	800b228 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b144:	20c8      	movs	r0, #200	@ 0xc8
 800b146:	f7f7 fb21 	bl	800278c <HAL_Delay>
  return USBH_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	70fb      	strb	r3, [r7, #3]
 800b160:	4613      	mov	r3, r2
 800b162:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b16a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b16c:	78fa      	ldrb	r2, [r7, #3]
 800b16e:	68f9      	ldr	r1, [r7, #12]
 800b170:	4613      	mov	r3, r2
 800b172:	011b      	lsls	r3, r3, #4
 800b174:	1a9b      	subs	r3, r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	440b      	add	r3, r1
 800b17a:	3317      	adds	r3, #23
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00a      	beq.n	800b198 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b182:	78fa      	ldrb	r2, [r7, #3]
 800b184:	68f9      	ldr	r1, [r7, #12]
 800b186:	4613      	mov	r3, r2
 800b188:	011b      	lsls	r3, r3, #4
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	440b      	add	r3, r1
 800b190:	333c      	adds	r3, #60	@ 0x3c
 800b192:	78ba      	ldrb	r2, [r7, #2]
 800b194:	701a      	strb	r2, [r3, #0]
 800b196:	e009      	b.n	800b1ac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b198:	78fa      	ldrb	r2, [r7, #3]
 800b19a:	68f9      	ldr	r1, [r7, #12]
 800b19c:	4613      	mov	r3, r2
 800b19e:	011b      	lsls	r3, r3, #4
 800b1a0:	1a9b      	subs	r3, r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	440b      	add	r3, r1
 800b1a6:	333d      	adds	r3, #61	@ 0x3d
 800b1a8:	78ba      	ldrb	r2, [r7, #2]
 800b1aa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7f7 fae2 	bl	800278c <HAL_Delay>
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1de:	79fb      	ldrb	r3, [r7, #7]
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	d817      	bhi.n	800b214 <USBH_Get_USB_Status+0x44>
 800b1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ec <USBH_Get_USB_Status+0x1c>)
 800b1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ea:	bf00      	nop
 800b1ec:	0800b1fd 	.word	0x0800b1fd
 800b1f0:	0800b203 	.word	0x0800b203
 800b1f4:	0800b209 	.word	0x0800b209
 800b1f8:	0800b20f 	.word	0x0800b20f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b200:	e00b      	b.n	800b21a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b202:	2302      	movs	r3, #2
 800b204:	73fb      	strb	r3, [r7, #15]
    break;
 800b206:	e008      	b.n	800b21a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b208:	2301      	movs	r3, #1
 800b20a:	73fb      	strb	r3, [r7, #15]
    break;
 800b20c:	e005      	b.n	800b21a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b20e:	2302      	movs	r3, #2
 800b210:	73fb      	strb	r3, [r7, #15]
    break;
 800b212:	e002      	b.n	800b21a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b214:	2302      	movs	r3, #2
 800b216:	73fb      	strb	r3, [r7, #15]
    break;
 800b218:	bf00      	nop
  }
  return usb_status;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	4603      	mov	r3, r0
 800b230:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d102      	bne.n	800b242 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b23c:	2300      	movs	r3, #0
 800b23e:	73fb      	strb	r3, [r7, #15]
 800b240:	e001      	b.n	800b246 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b242:	2301      	movs	r3, #1
 800b244:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	461a      	mov	r2, r3
 800b24a:	2101      	movs	r1, #1
 800b24c:	4803      	ldr	r0, [pc, #12]	@ (800b25c <MX_DriverVbusFS+0x34>)
 800b24e:	f7f7 fd87 	bl	8002d60 <HAL_GPIO_WritePin>
}
 800b252:	bf00      	nop
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	40020800 	.word	0x40020800

0800b260 <atoi>:
 800b260:	220a      	movs	r2, #10
 800b262:	2100      	movs	r1, #0
 800b264:	f000 b938 	b.w	800b4d8 <strtol>

0800b268 <malloc>:
 800b268:	4b02      	ldr	r3, [pc, #8]	@ (800b274 <malloc+0xc>)
 800b26a:	4601      	mov	r1, r0
 800b26c:	6818      	ldr	r0, [r3, #0]
 800b26e:	f000 b82d 	b.w	800b2cc <_malloc_r>
 800b272:	bf00      	nop
 800b274:	20000038 	.word	0x20000038

0800b278 <free>:
 800b278:	4b02      	ldr	r3, [pc, #8]	@ (800b284 <free+0xc>)
 800b27a:	4601      	mov	r1, r0
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f000 bcb3 	b.w	800bbe8 <_free_r>
 800b282:	bf00      	nop
 800b284:	20000038 	.word	0x20000038

0800b288 <sbrk_aligned>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	4e0f      	ldr	r6, [pc, #60]	@ (800b2c8 <sbrk_aligned+0x40>)
 800b28c:	460c      	mov	r4, r1
 800b28e:	6831      	ldr	r1, [r6, #0]
 800b290:	4605      	mov	r5, r0
 800b292:	b911      	cbnz	r1, 800b29a <sbrk_aligned+0x12>
 800b294:	f000 fc24 	bl	800bae0 <_sbrk_r>
 800b298:	6030      	str	r0, [r6, #0]
 800b29a:	4621      	mov	r1, r4
 800b29c:	4628      	mov	r0, r5
 800b29e:	f000 fc1f 	bl	800bae0 <_sbrk_r>
 800b2a2:	1c43      	adds	r3, r0, #1
 800b2a4:	d103      	bne.n	800b2ae <sbrk_aligned+0x26>
 800b2a6:	f04f 34ff 	mov.w	r4, #4294967295
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	bd70      	pop	{r4, r5, r6, pc}
 800b2ae:	1cc4      	adds	r4, r0, #3
 800b2b0:	f024 0403 	bic.w	r4, r4, #3
 800b2b4:	42a0      	cmp	r0, r4
 800b2b6:	d0f8      	beq.n	800b2aa <sbrk_aligned+0x22>
 800b2b8:	1a21      	subs	r1, r4, r0
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f000 fc10 	bl	800bae0 <_sbrk_r>
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d1f2      	bne.n	800b2aa <sbrk_aligned+0x22>
 800b2c4:	e7ef      	b.n	800b2a6 <sbrk_aligned+0x1e>
 800b2c6:	bf00      	nop
 800b2c8:	20000dac 	.word	0x20000dac

0800b2cc <_malloc_r>:
 800b2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d0:	1ccd      	adds	r5, r1, #3
 800b2d2:	f025 0503 	bic.w	r5, r5, #3
 800b2d6:	3508      	adds	r5, #8
 800b2d8:	2d0c      	cmp	r5, #12
 800b2da:	bf38      	it	cc
 800b2dc:	250c      	movcc	r5, #12
 800b2de:	2d00      	cmp	r5, #0
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	db01      	blt.n	800b2e8 <_malloc_r+0x1c>
 800b2e4:	42a9      	cmp	r1, r5
 800b2e6:	d904      	bls.n	800b2f2 <_malloc_r+0x26>
 800b2e8:	230c      	movs	r3, #12
 800b2ea:	6033      	str	r3, [r6, #0]
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3c8 <_malloc_r+0xfc>
 800b2f6:	f000 f869 	bl	800b3cc <__malloc_lock>
 800b2fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b2fe:	461c      	mov	r4, r3
 800b300:	bb44      	cbnz	r4, 800b354 <_malloc_r+0x88>
 800b302:	4629      	mov	r1, r5
 800b304:	4630      	mov	r0, r6
 800b306:	f7ff ffbf 	bl	800b288 <sbrk_aligned>
 800b30a:	1c43      	adds	r3, r0, #1
 800b30c:	4604      	mov	r4, r0
 800b30e:	d158      	bne.n	800b3c2 <_malloc_r+0xf6>
 800b310:	f8d8 4000 	ldr.w	r4, [r8]
 800b314:	4627      	mov	r7, r4
 800b316:	2f00      	cmp	r7, #0
 800b318:	d143      	bne.n	800b3a2 <_malloc_r+0xd6>
 800b31a:	2c00      	cmp	r4, #0
 800b31c:	d04b      	beq.n	800b3b6 <_malloc_r+0xea>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	4639      	mov	r1, r7
 800b322:	4630      	mov	r0, r6
 800b324:	eb04 0903 	add.w	r9, r4, r3
 800b328:	f000 fbda 	bl	800bae0 <_sbrk_r>
 800b32c:	4581      	cmp	r9, r0
 800b32e:	d142      	bne.n	800b3b6 <_malloc_r+0xea>
 800b330:	6821      	ldr	r1, [r4, #0]
 800b332:	1a6d      	subs	r5, r5, r1
 800b334:	4629      	mov	r1, r5
 800b336:	4630      	mov	r0, r6
 800b338:	f7ff ffa6 	bl	800b288 <sbrk_aligned>
 800b33c:	3001      	adds	r0, #1
 800b33e:	d03a      	beq.n	800b3b6 <_malloc_r+0xea>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	442b      	add	r3, r5
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	f8d8 3000 	ldr.w	r3, [r8]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	bb62      	cbnz	r2, 800b3a8 <_malloc_r+0xdc>
 800b34e:	f8c8 7000 	str.w	r7, [r8]
 800b352:	e00f      	b.n	800b374 <_malloc_r+0xa8>
 800b354:	6822      	ldr	r2, [r4, #0]
 800b356:	1b52      	subs	r2, r2, r5
 800b358:	d420      	bmi.n	800b39c <_malloc_r+0xd0>
 800b35a:	2a0b      	cmp	r2, #11
 800b35c:	d917      	bls.n	800b38e <_malloc_r+0xc2>
 800b35e:	1961      	adds	r1, r4, r5
 800b360:	42a3      	cmp	r3, r4
 800b362:	6025      	str	r5, [r4, #0]
 800b364:	bf18      	it	ne
 800b366:	6059      	strne	r1, [r3, #4]
 800b368:	6863      	ldr	r3, [r4, #4]
 800b36a:	bf08      	it	eq
 800b36c:	f8c8 1000 	streq.w	r1, [r8]
 800b370:	5162      	str	r2, [r4, r5]
 800b372:	604b      	str	r3, [r1, #4]
 800b374:	4630      	mov	r0, r6
 800b376:	f000 f82f 	bl	800b3d8 <__malloc_unlock>
 800b37a:	f104 000b 	add.w	r0, r4, #11
 800b37e:	1d23      	adds	r3, r4, #4
 800b380:	f020 0007 	bic.w	r0, r0, #7
 800b384:	1ac2      	subs	r2, r0, r3
 800b386:	bf1c      	itt	ne
 800b388:	1a1b      	subne	r3, r3, r0
 800b38a:	50a3      	strne	r3, [r4, r2]
 800b38c:	e7af      	b.n	800b2ee <_malloc_r+0x22>
 800b38e:	6862      	ldr	r2, [r4, #4]
 800b390:	42a3      	cmp	r3, r4
 800b392:	bf0c      	ite	eq
 800b394:	f8c8 2000 	streq.w	r2, [r8]
 800b398:	605a      	strne	r2, [r3, #4]
 800b39a:	e7eb      	b.n	800b374 <_malloc_r+0xa8>
 800b39c:	4623      	mov	r3, r4
 800b39e:	6864      	ldr	r4, [r4, #4]
 800b3a0:	e7ae      	b.n	800b300 <_malloc_r+0x34>
 800b3a2:	463c      	mov	r4, r7
 800b3a4:	687f      	ldr	r7, [r7, #4]
 800b3a6:	e7b6      	b.n	800b316 <_malloc_r+0x4a>
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	d1fb      	bne.n	800b3a8 <_malloc_r+0xdc>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	6053      	str	r3, [r2, #4]
 800b3b4:	e7de      	b.n	800b374 <_malloc_r+0xa8>
 800b3b6:	230c      	movs	r3, #12
 800b3b8:	6033      	str	r3, [r6, #0]
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f000 f80c 	bl	800b3d8 <__malloc_unlock>
 800b3c0:	e794      	b.n	800b2ec <_malloc_r+0x20>
 800b3c2:	6005      	str	r5, [r0, #0]
 800b3c4:	e7d6      	b.n	800b374 <_malloc_r+0xa8>
 800b3c6:	bf00      	nop
 800b3c8:	20000db0 	.word	0x20000db0

0800b3cc <__malloc_lock>:
 800b3cc:	4801      	ldr	r0, [pc, #4]	@ (800b3d4 <__malloc_lock+0x8>)
 800b3ce:	f000 bbd4 	b.w	800bb7a <__retarget_lock_acquire_recursive>
 800b3d2:	bf00      	nop
 800b3d4:	20000ef4 	.word	0x20000ef4

0800b3d8 <__malloc_unlock>:
 800b3d8:	4801      	ldr	r0, [pc, #4]	@ (800b3e0 <__malloc_unlock+0x8>)
 800b3da:	f000 bbcf 	b.w	800bb7c <__retarget_lock_release_recursive>
 800b3de:	bf00      	nop
 800b3e0:	20000ef4 	.word	0x20000ef4

0800b3e4 <_strtol_l.constprop.0>:
 800b3e4:	2b24      	cmp	r3, #36	@ 0x24
 800b3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ea:	4686      	mov	lr, r0
 800b3ec:	4690      	mov	r8, r2
 800b3ee:	d801      	bhi.n	800b3f4 <_strtol_l.constprop.0+0x10>
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d106      	bne.n	800b402 <_strtol_l.constprop.0+0x1e>
 800b3f4:	f000 fb96 	bl	800bb24 <__errno>
 800b3f8:	2316      	movs	r3, #22
 800b3fa:	6003      	str	r3, [r0, #0]
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b402:	4834      	ldr	r0, [pc, #208]	@ (800b4d4 <_strtol_l.constprop.0+0xf0>)
 800b404:	460d      	mov	r5, r1
 800b406:	462a      	mov	r2, r5
 800b408:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b40c:	5d06      	ldrb	r6, [r0, r4]
 800b40e:	f016 0608 	ands.w	r6, r6, #8
 800b412:	d1f8      	bne.n	800b406 <_strtol_l.constprop.0+0x22>
 800b414:	2c2d      	cmp	r4, #45	@ 0x2d
 800b416:	d12d      	bne.n	800b474 <_strtol_l.constprop.0+0x90>
 800b418:	782c      	ldrb	r4, [r5, #0]
 800b41a:	2601      	movs	r6, #1
 800b41c:	1c95      	adds	r5, r2, #2
 800b41e:	f033 0210 	bics.w	r2, r3, #16
 800b422:	d109      	bne.n	800b438 <_strtol_l.constprop.0+0x54>
 800b424:	2c30      	cmp	r4, #48	@ 0x30
 800b426:	d12a      	bne.n	800b47e <_strtol_l.constprop.0+0x9a>
 800b428:	782a      	ldrb	r2, [r5, #0]
 800b42a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b42e:	2a58      	cmp	r2, #88	@ 0x58
 800b430:	d125      	bne.n	800b47e <_strtol_l.constprop.0+0x9a>
 800b432:	786c      	ldrb	r4, [r5, #1]
 800b434:	2310      	movs	r3, #16
 800b436:	3502      	adds	r5, #2
 800b438:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b43c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b440:	2200      	movs	r2, #0
 800b442:	fbbc f9f3 	udiv	r9, ip, r3
 800b446:	4610      	mov	r0, r2
 800b448:	fb03 ca19 	mls	sl, r3, r9, ip
 800b44c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b450:	2f09      	cmp	r7, #9
 800b452:	d81b      	bhi.n	800b48c <_strtol_l.constprop.0+0xa8>
 800b454:	463c      	mov	r4, r7
 800b456:	42a3      	cmp	r3, r4
 800b458:	dd27      	ble.n	800b4aa <_strtol_l.constprop.0+0xc6>
 800b45a:	1c57      	adds	r7, r2, #1
 800b45c:	d007      	beq.n	800b46e <_strtol_l.constprop.0+0x8a>
 800b45e:	4581      	cmp	r9, r0
 800b460:	d320      	bcc.n	800b4a4 <_strtol_l.constprop.0+0xc0>
 800b462:	d101      	bne.n	800b468 <_strtol_l.constprop.0+0x84>
 800b464:	45a2      	cmp	sl, r4
 800b466:	db1d      	blt.n	800b4a4 <_strtol_l.constprop.0+0xc0>
 800b468:	fb00 4003 	mla	r0, r0, r3, r4
 800b46c:	2201      	movs	r2, #1
 800b46e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b472:	e7eb      	b.n	800b44c <_strtol_l.constprop.0+0x68>
 800b474:	2c2b      	cmp	r4, #43	@ 0x2b
 800b476:	bf04      	itt	eq
 800b478:	782c      	ldrbeq	r4, [r5, #0]
 800b47a:	1c95      	addeq	r5, r2, #2
 800b47c:	e7cf      	b.n	800b41e <_strtol_l.constprop.0+0x3a>
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1da      	bne.n	800b438 <_strtol_l.constprop.0+0x54>
 800b482:	2c30      	cmp	r4, #48	@ 0x30
 800b484:	bf0c      	ite	eq
 800b486:	2308      	moveq	r3, #8
 800b488:	230a      	movne	r3, #10
 800b48a:	e7d5      	b.n	800b438 <_strtol_l.constprop.0+0x54>
 800b48c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b490:	2f19      	cmp	r7, #25
 800b492:	d801      	bhi.n	800b498 <_strtol_l.constprop.0+0xb4>
 800b494:	3c37      	subs	r4, #55	@ 0x37
 800b496:	e7de      	b.n	800b456 <_strtol_l.constprop.0+0x72>
 800b498:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b49c:	2f19      	cmp	r7, #25
 800b49e:	d804      	bhi.n	800b4aa <_strtol_l.constprop.0+0xc6>
 800b4a0:	3c57      	subs	r4, #87	@ 0x57
 800b4a2:	e7d8      	b.n	800b456 <_strtol_l.constprop.0+0x72>
 800b4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a8:	e7e1      	b.n	800b46e <_strtol_l.constprop.0+0x8a>
 800b4aa:	1c53      	adds	r3, r2, #1
 800b4ac:	d108      	bne.n	800b4c0 <_strtol_l.constprop.0+0xdc>
 800b4ae:	2322      	movs	r3, #34	@ 0x22
 800b4b0:	f8ce 3000 	str.w	r3, [lr]
 800b4b4:	4660      	mov	r0, ip
 800b4b6:	f1b8 0f00 	cmp.w	r8, #0
 800b4ba:	d0a0      	beq.n	800b3fe <_strtol_l.constprop.0+0x1a>
 800b4bc:	1e69      	subs	r1, r5, #1
 800b4be:	e006      	b.n	800b4ce <_strtol_l.constprop.0+0xea>
 800b4c0:	b106      	cbz	r6, 800b4c4 <_strtol_l.constprop.0+0xe0>
 800b4c2:	4240      	negs	r0, r0
 800b4c4:	f1b8 0f00 	cmp.w	r8, #0
 800b4c8:	d099      	beq.n	800b3fe <_strtol_l.constprop.0+0x1a>
 800b4ca:	2a00      	cmp	r2, #0
 800b4cc:	d1f6      	bne.n	800b4bc <_strtol_l.constprop.0+0xd8>
 800b4ce:	f8c8 1000 	str.w	r1, [r8]
 800b4d2:	e794      	b.n	800b3fe <_strtol_l.constprop.0+0x1a>
 800b4d4:	0800d2b1 	.word	0x0800d2b1

0800b4d8 <strtol>:
 800b4d8:	4613      	mov	r3, r2
 800b4da:	460a      	mov	r2, r1
 800b4dc:	4601      	mov	r1, r0
 800b4de:	4802      	ldr	r0, [pc, #8]	@ (800b4e8 <strtol+0x10>)
 800b4e0:	6800      	ldr	r0, [r0, #0]
 800b4e2:	f7ff bf7f 	b.w	800b3e4 <_strtol_l.constprop.0>
 800b4e6:	bf00      	nop
 800b4e8:	20000038 	.word	0x20000038

0800b4ec <std>:
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	b510      	push	{r4, lr}
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	e9c0 3300 	strd	r3, r3, [r0]
 800b4f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4fa:	6083      	str	r3, [r0, #8]
 800b4fc:	8181      	strh	r1, [r0, #12]
 800b4fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800b500:	81c2      	strh	r2, [r0, #14]
 800b502:	6183      	str	r3, [r0, #24]
 800b504:	4619      	mov	r1, r3
 800b506:	2208      	movs	r2, #8
 800b508:	305c      	adds	r0, #92	@ 0x5c
 800b50a:	f000 fa19 	bl	800b940 <memset>
 800b50e:	4b0d      	ldr	r3, [pc, #52]	@ (800b544 <std+0x58>)
 800b510:	6263      	str	r3, [r4, #36]	@ 0x24
 800b512:	4b0d      	ldr	r3, [pc, #52]	@ (800b548 <std+0x5c>)
 800b514:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b516:	4b0d      	ldr	r3, [pc, #52]	@ (800b54c <std+0x60>)
 800b518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b51a:	4b0d      	ldr	r3, [pc, #52]	@ (800b550 <std+0x64>)
 800b51c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b51e:	4b0d      	ldr	r3, [pc, #52]	@ (800b554 <std+0x68>)
 800b520:	6224      	str	r4, [r4, #32]
 800b522:	429c      	cmp	r4, r3
 800b524:	d006      	beq.n	800b534 <std+0x48>
 800b526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b52a:	4294      	cmp	r4, r2
 800b52c:	d002      	beq.n	800b534 <std+0x48>
 800b52e:	33d0      	adds	r3, #208	@ 0xd0
 800b530:	429c      	cmp	r4, r3
 800b532:	d105      	bne.n	800b540 <std+0x54>
 800b534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b53c:	f000 bb1c 	b.w	800bb78 <__retarget_lock_init_recursive>
 800b540:	bd10      	pop	{r4, pc}
 800b542:	bf00      	nop
 800b544:	0800b791 	.word	0x0800b791
 800b548:	0800b7b3 	.word	0x0800b7b3
 800b54c:	0800b7eb 	.word	0x0800b7eb
 800b550:	0800b80f 	.word	0x0800b80f
 800b554:	20000db4 	.word	0x20000db4

0800b558 <stdio_exit_handler>:
 800b558:	4a02      	ldr	r2, [pc, #8]	@ (800b564 <stdio_exit_handler+0xc>)
 800b55a:	4903      	ldr	r1, [pc, #12]	@ (800b568 <stdio_exit_handler+0x10>)
 800b55c:	4803      	ldr	r0, [pc, #12]	@ (800b56c <stdio_exit_handler+0x14>)
 800b55e:	f000 b869 	b.w	800b634 <_fwalk_sglue>
 800b562:	bf00      	nop
 800b564:	2000002c 	.word	0x2000002c
 800b568:	0800c5d5 	.word	0x0800c5d5
 800b56c:	2000003c 	.word	0x2000003c

0800b570 <cleanup_stdio>:
 800b570:	6841      	ldr	r1, [r0, #4]
 800b572:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a4 <cleanup_stdio+0x34>)
 800b574:	4299      	cmp	r1, r3
 800b576:	b510      	push	{r4, lr}
 800b578:	4604      	mov	r4, r0
 800b57a:	d001      	beq.n	800b580 <cleanup_stdio+0x10>
 800b57c:	f001 f82a 	bl	800c5d4 <_fflush_r>
 800b580:	68a1      	ldr	r1, [r4, #8]
 800b582:	4b09      	ldr	r3, [pc, #36]	@ (800b5a8 <cleanup_stdio+0x38>)
 800b584:	4299      	cmp	r1, r3
 800b586:	d002      	beq.n	800b58e <cleanup_stdio+0x1e>
 800b588:	4620      	mov	r0, r4
 800b58a:	f001 f823 	bl	800c5d4 <_fflush_r>
 800b58e:	68e1      	ldr	r1, [r4, #12]
 800b590:	4b06      	ldr	r3, [pc, #24]	@ (800b5ac <cleanup_stdio+0x3c>)
 800b592:	4299      	cmp	r1, r3
 800b594:	d004      	beq.n	800b5a0 <cleanup_stdio+0x30>
 800b596:	4620      	mov	r0, r4
 800b598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b59c:	f001 b81a 	b.w	800c5d4 <_fflush_r>
 800b5a0:	bd10      	pop	{r4, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000db4 	.word	0x20000db4
 800b5a8:	20000e1c 	.word	0x20000e1c
 800b5ac:	20000e84 	.word	0x20000e84

0800b5b0 <global_stdio_init.part.0>:
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e0 <global_stdio_init.part.0+0x30>)
 800b5b4:	4c0b      	ldr	r4, [pc, #44]	@ (800b5e4 <global_stdio_init.part.0+0x34>)
 800b5b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b5e8 <global_stdio_init.part.0+0x38>)
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	2200      	movs	r2, #0
 800b5be:	2104      	movs	r1, #4
 800b5c0:	f7ff ff94 	bl	800b4ec <std>
 800b5c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	2109      	movs	r1, #9
 800b5cc:	f7ff ff8e 	bl	800b4ec <std>
 800b5d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5da:	2112      	movs	r1, #18
 800b5dc:	f7ff bf86 	b.w	800b4ec <std>
 800b5e0:	20000eec 	.word	0x20000eec
 800b5e4:	20000db4 	.word	0x20000db4
 800b5e8:	0800b559 	.word	0x0800b559

0800b5ec <__sfp_lock_acquire>:
 800b5ec:	4801      	ldr	r0, [pc, #4]	@ (800b5f4 <__sfp_lock_acquire+0x8>)
 800b5ee:	f000 bac4 	b.w	800bb7a <__retarget_lock_acquire_recursive>
 800b5f2:	bf00      	nop
 800b5f4:	20000ef5 	.word	0x20000ef5

0800b5f8 <__sfp_lock_release>:
 800b5f8:	4801      	ldr	r0, [pc, #4]	@ (800b600 <__sfp_lock_release+0x8>)
 800b5fa:	f000 babf 	b.w	800bb7c <__retarget_lock_release_recursive>
 800b5fe:	bf00      	nop
 800b600:	20000ef5 	.word	0x20000ef5

0800b604 <__sinit>:
 800b604:	b510      	push	{r4, lr}
 800b606:	4604      	mov	r4, r0
 800b608:	f7ff fff0 	bl	800b5ec <__sfp_lock_acquire>
 800b60c:	6a23      	ldr	r3, [r4, #32]
 800b60e:	b11b      	cbz	r3, 800b618 <__sinit+0x14>
 800b610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b614:	f7ff bff0 	b.w	800b5f8 <__sfp_lock_release>
 800b618:	4b04      	ldr	r3, [pc, #16]	@ (800b62c <__sinit+0x28>)
 800b61a:	6223      	str	r3, [r4, #32]
 800b61c:	4b04      	ldr	r3, [pc, #16]	@ (800b630 <__sinit+0x2c>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1f5      	bne.n	800b610 <__sinit+0xc>
 800b624:	f7ff ffc4 	bl	800b5b0 <global_stdio_init.part.0>
 800b628:	e7f2      	b.n	800b610 <__sinit+0xc>
 800b62a:	bf00      	nop
 800b62c:	0800b571 	.word	0x0800b571
 800b630:	20000eec 	.word	0x20000eec

0800b634 <_fwalk_sglue>:
 800b634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b638:	4607      	mov	r7, r0
 800b63a:	4688      	mov	r8, r1
 800b63c:	4614      	mov	r4, r2
 800b63e:	2600      	movs	r6, #0
 800b640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b644:	f1b9 0901 	subs.w	r9, r9, #1
 800b648:	d505      	bpl.n	800b656 <_fwalk_sglue+0x22>
 800b64a:	6824      	ldr	r4, [r4, #0]
 800b64c:	2c00      	cmp	r4, #0
 800b64e:	d1f7      	bne.n	800b640 <_fwalk_sglue+0xc>
 800b650:	4630      	mov	r0, r6
 800b652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b656:	89ab      	ldrh	r3, [r5, #12]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d907      	bls.n	800b66c <_fwalk_sglue+0x38>
 800b65c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b660:	3301      	adds	r3, #1
 800b662:	d003      	beq.n	800b66c <_fwalk_sglue+0x38>
 800b664:	4629      	mov	r1, r5
 800b666:	4638      	mov	r0, r7
 800b668:	47c0      	blx	r8
 800b66a:	4306      	orrs	r6, r0
 800b66c:	3568      	adds	r5, #104	@ 0x68
 800b66e:	e7e9      	b.n	800b644 <_fwalk_sglue+0x10>

0800b670 <iprintf>:
 800b670:	b40f      	push	{r0, r1, r2, r3}
 800b672:	b507      	push	{r0, r1, r2, lr}
 800b674:	4906      	ldr	r1, [pc, #24]	@ (800b690 <iprintf+0x20>)
 800b676:	ab04      	add	r3, sp, #16
 800b678:	6808      	ldr	r0, [r1, #0]
 800b67a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b67e:	6881      	ldr	r1, [r0, #8]
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	f000 fc7d 	bl	800bf80 <_vfiprintf_r>
 800b686:	b003      	add	sp, #12
 800b688:	f85d eb04 	ldr.w	lr, [sp], #4
 800b68c:	b004      	add	sp, #16
 800b68e:	4770      	bx	lr
 800b690:	20000038 	.word	0x20000038

0800b694 <_puts_r>:
 800b694:	6a03      	ldr	r3, [r0, #32]
 800b696:	b570      	push	{r4, r5, r6, lr}
 800b698:	6884      	ldr	r4, [r0, #8]
 800b69a:	4605      	mov	r5, r0
 800b69c:	460e      	mov	r6, r1
 800b69e:	b90b      	cbnz	r3, 800b6a4 <_puts_r+0x10>
 800b6a0:	f7ff ffb0 	bl	800b604 <__sinit>
 800b6a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6a6:	07db      	lsls	r3, r3, #31
 800b6a8:	d405      	bmi.n	800b6b6 <_puts_r+0x22>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	0598      	lsls	r0, r3, #22
 800b6ae:	d402      	bmi.n	800b6b6 <_puts_r+0x22>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6b2:	f000 fa62 	bl	800bb7a <__retarget_lock_acquire_recursive>
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	0719      	lsls	r1, r3, #28
 800b6ba:	d502      	bpl.n	800b6c2 <_puts_r+0x2e>
 800b6bc:	6923      	ldr	r3, [r4, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d135      	bne.n	800b72e <_puts_r+0x9a>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f000 f8e5 	bl	800b894 <__swsetup_r>
 800b6ca:	b380      	cbz	r0, 800b72e <_puts_r+0x9a>
 800b6cc:	f04f 35ff 	mov.w	r5, #4294967295
 800b6d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6d2:	07da      	lsls	r2, r3, #31
 800b6d4:	d405      	bmi.n	800b6e2 <_puts_r+0x4e>
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	059b      	lsls	r3, r3, #22
 800b6da:	d402      	bmi.n	800b6e2 <_puts_r+0x4e>
 800b6dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6de:	f000 fa4d 	bl	800bb7c <__retarget_lock_release_recursive>
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	da04      	bge.n	800b6f4 <_puts_r+0x60>
 800b6ea:	69a2      	ldr	r2, [r4, #24]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	dc17      	bgt.n	800b720 <_puts_r+0x8c>
 800b6f0:	290a      	cmp	r1, #10
 800b6f2:	d015      	beq.n	800b720 <_puts_r+0x8c>
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	6022      	str	r2, [r4, #0]
 800b6fa:	7019      	strb	r1, [r3, #0]
 800b6fc:	68a3      	ldr	r3, [r4, #8]
 800b6fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b702:	3b01      	subs	r3, #1
 800b704:	60a3      	str	r3, [r4, #8]
 800b706:	2900      	cmp	r1, #0
 800b708:	d1ed      	bne.n	800b6e6 <_puts_r+0x52>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	da11      	bge.n	800b732 <_puts_r+0x9e>
 800b70e:	4622      	mov	r2, r4
 800b710:	210a      	movs	r1, #10
 800b712:	4628      	mov	r0, r5
 800b714:	f000 f87f 	bl	800b816 <__swbuf_r>
 800b718:	3001      	adds	r0, #1
 800b71a:	d0d7      	beq.n	800b6cc <_puts_r+0x38>
 800b71c:	250a      	movs	r5, #10
 800b71e:	e7d7      	b.n	800b6d0 <_puts_r+0x3c>
 800b720:	4622      	mov	r2, r4
 800b722:	4628      	mov	r0, r5
 800b724:	f000 f877 	bl	800b816 <__swbuf_r>
 800b728:	3001      	adds	r0, #1
 800b72a:	d1e7      	bne.n	800b6fc <_puts_r+0x68>
 800b72c:	e7ce      	b.n	800b6cc <_puts_r+0x38>
 800b72e:	3e01      	subs	r6, #1
 800b730:	e7e4      	b.n	800b6fc <_puts_r+0x68>
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	6022      	str	r2, [r4, #0]
 800b738:	220a      	movs	r2, #10
 800b73a:	701a      	strb	r2, [r3, #0]
 800b73c:	e7ee      	b.n	800b71c <_puts_r+0x88>
	...

0800b740 <puts>:
 800b740:	4b02      	ldr	r3, [pc, #8]	@ (800b74c <puts+0xc>)
 800b742:	4601      	mov	r1, r0
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	f7ff bfa5 	b.w	800b694 <_puts_r>
 800b74a:	bf00      	nop
 800b74c:	20000038 	.word	0x20000038

0800b750 <siprintf>:
 800b750:	b40e      	push	{r1, r2, r3}
 800b752:	b500      	push	{lr}
 800b754:	b09c      	sub	sp, #112	@ 0x70
 800b756:	ab1d      	add	r3, sp, #116	@ 0x74
 800b758:	9002      	str	r0, [sp, #8]
 800b75a:	9006      	str	r0, [sp, #24]
 800b75c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b760:	4809      	ldr	r0, [pc, #36]	@ (800b788 <siprintf+0x38>)
 800b762:	9107      	str	r1, [sp, #28]
 800b764:	9104      	str	r1, [sp, #16]
 800b766:	4909      	ldr	r1, [pc, #36]	@ (800b78c <siprintf+0x3c>)
 800b768:	f853 2b04 	ldr.w	r2, [r3], #4
 800b76c:	9105      	str	r1, [sp, #20]
 800b76e:	6800      	ldr	r0, [r0, #0]
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	a902      	add	r1, sp, #8
 800b774:	f000 fade 	bl	800bd34 <_svfiprintf_r>
 800b778:	9b02      	ldr	r3, [sp, #8]
 800b77a:	2200      	movs	r2, #0
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	b01c      	add	sp, #112	@ 0x70
 800b780:	f85d eb04 	ldr.w	lr, [sp], #4
 800b784:	b003      	add	sp, #12
 800b786:	4770      	bx	lr
 800b788:	20000038 	.word	0x20000038
 800b78c:	ffff0208 	.word	0xffff0208

0800b790 <__sread>:
 800b790:	b510      	push	{r4, lr}
 800b792:	460c      	mov	r4, r1
 800b794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b798:	f000 f990 	bl	800babc <_read_r>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	bfab      	itete	ge
 800b7a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b7a4:	181b      	addge	r3, r3, r0
 800b7a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7aa:	bfac      	ite	ge
 800b7ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7ae:	81a3      	strhlt	r3, [r4, #12]
 800b7b0:	bd10      	pop	{r4, pc}

0800b7b2 <__swrite>:
 800b7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b6:	461f      	mov	r7, r3
 800b7b8:	898b      	ldrh	r3, [r1, #12]
 800b7ba:	05db      	lsls	r3, r3, #23
 800b7bc:	4605      	mov	r5, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	4616      	mov	r6, r2
 800b7c2:	d505      	bpl.n	800b7d0 <__swrite+0x1e>
 800b7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f000 f964 	bl	800ba98 <_lseek_r>
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7da:	81a3      	strh	r3, [r4, #12]
 800b7dc:	4632      	mov	r2, r6
 800b7de:	463b      	mov	r3, r7
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e6:	f000 b98b 	b.w	800bb00 <_write_r>

0800b7ea <__sseek>:
 800b7ea:	b510      	push	{r4, lr}
 800b7ec:	460c      	mov	r4, r1
 800b7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f2:	f000 f951 	bl	800ba98 <_lseek_r>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	bf15      	itete	ne
 800b7fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b802:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b806:	81a3      	strheq	r3, [r4, #12]
 800b808:	bf18      	it	ne
 800b80a:	81a3      	strhne	r3, [r4, #12]
 800b80c:	bd10      	pop	{r4, pc}

0800b80e <__sclose>:
 800b80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b812:	f000 b931 	b.w	800ba78 <_close_r>

0800b816 <__swbuf_r>:
 800b816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b818:	460e      	mov	r6, r1
 800b81a:	4614      	mov	r4, r2
 800b81c:	4605      	mov	r5, r0
 800b81e:	b118      	cbz	r0, 800b828 <__swbuf_r+0x12>
 800b820:	6a03      	ldr	r3, [r0, #32]
 800b822:	b90b      	cbnz	r3, 800b828 <__swbuf_r+0x12>
 800b824:	f7ff feee 	bl	800b604 <__sinit>
 800b828:	69a3      	ldr	r3, [r4, #24]
 800b82a:	60a3      	str	r3, [r4, #8]
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	071a      	lsls	r2, r3, #28
 800b830:	d501      	bpl.n	800b836 <__swbuf_r+0x20>
 800b832:	6923      	ldr	r3, [r4, #16]
 800b834:	b943      	cbnz	r3, 800b848 <__swbuf_r+0x32>
 800b836:	4621      	mov	r1, r4
 800b838:	4628      	mov	r0, r5
 800b83a:	f000 f82b 	bl	800b894 <__swsetup_r>
 800b83e:	b118      	cbz	r0, 800b848 <__swbuf_r+0x32>
 800b840:	f04f 37ff 	mov.w	r7, #4294967295
 800b844:	4638      	mov	r0, r7
 800b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	6922      	ldr	r2, [r4, #16]
 800b84c:	1a98      	subs	r0, r3, r2
 800b84e:	6963      	ldr	r3, [r4, #20]
 800b850:	b2f6      	uxtb	r6, r6
 800b852:	4283      	cmp	r3, r0
 800b854:	4637      	mov	r7, r6
 800b856:	dc05      	bgt.n	800b864 <__swbuf_r+0x4e>
 800b858:	4621      	mov	r1, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	f000 feba 	bl	800c5d4 <_fflush_r>
 800b860:	2800      	cmp	r0, #0
 800b862:	d1ed      	bne.n	800b840 <__swbuf_r+0x2a>
 800b864:	68a3      	ldr	r3, [r4, #8]
 800b866:	3b01      	subs	r3, #1
 800b868:	60a3      	str	r3, [r4, #8]
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	1c5a      	adds	r2, r3, #1
 800b86e:	6022      	str	r2, [r4, #0]
 800b870:	701e      	strb	r6, [r3, #0]
 800b872:	6962      	ldr	r2, [r4, #20]
 800b874:	1c43      	adds	r3, r0, #1
 800b876:	429a      	cmp	r2, r3
 800b878:	d004      	beq.n	800b884 <__swbuf_r+0x6e>
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	07db      	lsls	r3, r3, #31
 800b87e:	d5e1      	bpl.n	800b844 <__swbuf_r+0x2e>
 800b880:	2e0a      	cmp	r6, #10
 800b882:	d1df      	bne.n	800b844 <__swbuf_r+0x2e>
 800b884:	4621      	mov	r1, r4
 800b886:	4628      	mov	r0, r5
 800b888:	f000 fea4 	bl	800c5d4 <_fflush_r>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d0d9      	beq.n	800b844 <__swbuf_r+0x2e>
 800b890:	e7d6      	b.n	800b840 <__swbuf_r+0x2a>
	...

0800b894 <__swsetup_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4b29      	ldr	r3, [pc, #164]	@ (800b93c <__swsetup_r+0xa8>)
 800b898:	4605      	mov	r5, r0
 800b89a:	6818      	ldr	r0, [r3, #0]
 800b89c:	460c      	mov	r4, r1
 800b89e:	b118      	cbz	r0, 800b8a8 <__swsetup_r+0x14>
 800b8a0:	6a03      	ldr	r3, [r0, #32]
 800b8a2:	b90b      	cbnz	r3, 800b8a8 <__swsetup_r+0x14>
 800b8a4:	f7ff feae 	bl	800b604 <__sinit>
 800b8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ac:	0719      	lsls	r1, r3, #28
 800b8ae:	d422      	bmi.n	800b8f6 <__swsetup_r+0x62>
 800b8b0:	06da      	lsls	r2, r3, #27
 800b8b2:	d407      	bmi.n	800b8c4 <__swsetup_r+0x30>
 800b8b4:	2209      	movs	r2, #9
 800b8b6:	602a      	str	r2, [r5, #0]
 800b8b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c2:	e033      	b.n	800b92c <__swsetup_r+0x98>
 800b8c4:	0758      	lsls	r0, r3, #29
 800b8c6:	d512      	bpl.n	800b8ee <__swsetup_r+0x5a>
 800b8c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8ca:	b141      	cbz	r1, 800b8de <__swsetup_r+0x4a>
 800b8cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8d0:	4299      	cmp	r1, r3
 800b8d2:	d002      	beq.n	800b8da <__swsetup_r+0x46>
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 f987 	bl	800bbe8 <_free_r>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8e4:	81a3      	strh	r3, [r4, #12]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	6063      	str	r3, [r4, #4]
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	f043 0308 	orr.w	r3, r3, #8
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	6923      	ldr	r3, [r4, #16]
 800b8f8:	b94b      	cbnz	r3, 800b90e <__swsetup_r+0x7a>
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b904:	d003      	beq.n	800b90e <__swsetup_r+0x7a>
 800b906:	4621      	mov	r1, r4
 800b908:	4628      	mov	r0, r5
 800b90a:	f000 fec3 	bl	800c694 <__smakebuf_r>
 800b90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b912:	f013 0201 	ands.w	r2, r3, #1
 800b916:	d00a      	beq.n	800b92e <__swsetup_r+0x9a>
 800b918:	2200      	movs	r2, #0
 800b91a:	60a2      	str	r2, [r4, #8]
 800b91c:	6962      	ldr	r2, [r4, #20]
 800b91e:	4252      	negs	r2, r2
 800b920:	61a2      	str	r2, [r4, #24]
 800b922:	6922      	ldr	r2, [r4, #16]
 800b924:	b942      	cbnz	r2, 800b938 <__swsetup_r+0xa4>
 800b926:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b92a:	d1c5      	bne.n	800b8b8 <__swsetup_r+0x24>
 800b92c:	bd38      	pop	{r3, r4, r5, pc}
 800b92e:	0799      	lsls	r1, r3, #30
 800b930:	bf58      	it	pl
 800b932:	6962      	ldrpl	r2, [r4, #20]
 800b934:	60a2      	str	r2, [r4, #8]
 800b936:	e7f4      	b.n	800b922 <__swsetup_r+0x8e>
 800b938:	2000      	movs	r0, #0
 800b93a:	e7f7      	b.n	800b92c <__swsetup_r+0x98>
 800b93c:	20000038 	.word	0x20000038

0800b940 <memset>:
 800b940:	4402      	add	r2, r0
 800b942:	4603      	mov	r3, r0
 800b944:	4293      	cmp	r3, r2
 800b946:	d100      	bne.n	800b94a <memset+0xa>
 800b948:	4770      	bx	lr
 800b94a:	f803 1b01 	strb.w	r1, [r3], #1
 800b94e:	e7f9      	b.n	800b944 <memset+0x4>

0800b950 <strcat>:
 800b950:	b510      	push	{r4, lr}
 800b952:	4602      	mov	r2, r0
 800b954:	7814      	ldrb	r4, [r2, #0]
 800b956:	4613      	mov	r3, r2
 800b958:	3201      	adds	r2, #1
 800b95a:	2c00      	cmp	r4, #0
 800b95c:	d1fa      	bne.n	800b954 <strcat+0x4>
 800b95e:	3b01      	subs	r3, #1
 800b960:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b964:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b968:	2a00      	cmp	r2, #0
 800b96a:	d1f9      	bne.n	800b960 <strcat+0x10>
 800b96c:	bd10      	pop	{r4, pc}

0800b96e <strncpy>:
 800b96e:	b510      	push	{r4, lr}
 800b970:	3901      	subs	r1, #1
 800b972:	4603      	mov	r3, r0
 800b974:	b132      	cbz	r2, 800b984 <strncpy+0x16>
 800b976:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b97a:	f803 4b01 	strb.w	r4, [r3], #1
 800b97e:	3a01      	subs	r2, #1
 800b980:	2c00      	cmp	r4, #0
 800b982:	d1f7      	bne.n	800b974 <strncpy+0x6>
 800b984:	441a      	add	r2, r3
 800b986:	2100      	movs	r1, #0
 800b988:	4293      	cmp	r3, r2
 800b98a:	d100      	bne.n	800b98e <strncpy+0x20>
 800b98c:	bd10      	pop	{r4, pc}
 800b98e:	f803 1b01 	strb.w	r1, [r3], #1
 800b992:	e7f9      	b.n	800b988 <strncpy+0x1a>

0800b994 <strtok>:
 800b994:	4b16      	ldr	r3, [pc, #88]	@ (800b9f0 <strtok+0x5c>)
 800b996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99a:	681f      	ldr	r7, [r3, #0]
 800b99c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b99e:	4605      	mov	r5, r0
 800b9a0:	460e      	mov	r6, r1
 800b9a2:	b9ec      	cbnz	r4, 800b9e0 <strtok+0x4c>
 800b9a4:	2050      	movs	r0, #80	@ 0x50
 800b9a6:	f7ff fc5f 	bl	800b268 <malloc>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	6478      	str	r0, [r7, #68]	@ 0x44
 800b9ae:	b920      	cbnz	r0, 800b9ba <strtok+0x26>
 800b9b0:	4b10      	ldr	r3, [pc, #64]	@ (800b9f4 <strtok+0x60>)
 800b9b2:	4811      	ldr	r0, [pc, #68]	@ (800b9f8 <strtok+0x64>)
 800b9b4:	215b      	movs	r1, #91	@ 0x5b
 800b9b6:	f000 f8f9 	bl	800bbac <__assert_func>
 800b9ba:	e9c0 4400 	strd	r4, r4, [r0]
 800b9be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b9c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b9c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b9ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b9ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b9d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b9d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b9da:	6184      	str	r4, [r0, #24]
 800b9dc:	7704      	strb	r4, [r0, #28]
 800b9de:	6244      	str	r4, [r0, #36]	@ 0x24
 800b9e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ec:	f000 b806 	b.w	800b9fc <__strtok_r>
 800b9f0:	20000038 	.word	0x20000038
 800b9f4:	0800d3b1 	.word	0x0800d3b1
 800b9f8:	0800d3c8 	.word	0x0800d3c8

0800b9fc <__strtok_r>:
 800b9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9fe:	4604      	mov	r4, r0
 800ba00:	b908      	cbnz	r0, 800ba06 <__strtok_r+0xa>
 800ba02:	6814      	ldr	r4, [r2, #0]
 800ba04:	b144      	cbz	r4, 800ba18 <__strtok_r+0x1c>
 800ba06:	4620      	mov	r0, r4
 800ba08:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ba12:	b91e      	cbnz	r6, 800ba1c <__strtok_r+0x20>
 800ba14:	b965      	cbnz	r5, 800ba30 <__strtok_r+0x34>
 800ba16:	6015      	str	r5, [r2, #0]
 800ba18:	2000      	movs	r0, #0
 800ba1a:	e005      	b.n	800ba28 <__strtok_r+0x2c>
 800ba1c:	42b5      	cmp	r5, r6
 800ba1e:	d1f6      	bne.n	800ba0e <__strtok_r+0x12>
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1f0      	bne.n	800ba06 <__strtok_r+0xa>
 800ba24:	6014      	str	r4, [r2, #0]
 800ba26:	7003      	strb	r3, [r0, #0]
 800ba28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba2a:	461c      	mov	r4, r3
 800ba2c:	e00c      	b.n	800ba48 <__strtok_r+0x4c>
 800ba2e:	b915      	cbnz	r5, 800ba36 <__strtok_r+0x3a>
 800ba30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba34:	460e      	mov	r6, r1
 800ba36:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ba3a:	42ab      	cmp	r3, r5
 800ba3c:	d1f7      	bne.n	800ba2e <__strtok_r+0x32>
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d0f3      	beq.n	800ba2a <__strtok_r+0x2e>
 800ba42:	2300      	movs	r3, #0
 800ba44:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ba48:	6014      	str	r4, [r2, #0]
 800ba4a:	e7ed      	b.n	800ba28 <__strtok_r+0x2c>

0800ba4c <strstr>:
 800ba4c:	780a      	ldrb	r2, [r1, #0]
 800ba4e:	b570      	push	{r4, r5, r6, lr}
 800ba50:	b96a      	cbnz	r2, 800ba6e <strstr+0x22>
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d109      	bne.n	800ba6c <strstr+0x20>
 800ba58:	460c      	mov	r4, r1
 800ba5a:	4605      	mov	r5, r0
 800ba5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d0f6      	beq.n	800ba52 <strstr+0x6>
 800ba64:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ba68:	429e      	cmp	r6, r3
 800ba6a:	d0f7      	beq.n	800ba5c <strstr+0x10>
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	7803      	ldrb	r3, [r0, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1ef      	bne.n	800ba54 <strstr+0x8>
 800ba74:	4618      	mov	r0, r3
 800ba76:	e7ec      	b.n	800ba52 <strstr+0x6>

0800ba78 <_close_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d06      	ldr	r5, [pc, #24]	@ (800ba94 <_close_r+0x1c>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	602b      	str	r3, [r5, #0]
 800ba84:	f7f6 fb34 	bl	80020f0 <_close>
 800ba88:	1c43      	adds	r3, r0, #1
 800ba8a:	d102      	bne.n	800ba92 <_close_r+0x1a>
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	b103      	cbz	r3, 800ba92 <_close_r+0x1a>
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	20000ef0 	.word	0x20000ef0

0800ba98 <_lseek_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d07      	ldr	r5, [pc, #28]	@ (800bab8 <_lseek_r+0x20>)
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	4608      	mov	r0, r1
 800baa0:	4611      	mov	r1, r2
 800baa2:	2200      	movs	r2, #0
 800baa4:	602a      	str	r2, [r5, #0]
 800baa6:	461a      	mov	r2, r3
 800baa8:	f7f6 fb49 	bl	800213e <_lseek>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d102      	bne.n	800bab6 <_lseek_r+0x1e>
 800bab0:	682b      	ldr	r3, [r5, #0]
 800bab2:	b103      	cbz	r3, 800bab6 <_lseek_r+0x1e>
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	20000ef0 	.word	0x20000ef0

0800babc <_read_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d07      	ldr	r5, [pc, #28]	@ (800badc <_read_r+0x20>)
 800bac0:	4604      	mov	r4, r0
 800bac2:	4608      	mov	r0, r1
 800bac4:	4611      	mov	r1, r2
 800bac6:	2200      	movs	r2, #0
 800bac8:	602a      	str	r2, [r5, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	f7f6 fad7 	bl	800207e <_read>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_read_r+0x1e>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_read_r+0x1e>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	20000ef0 	.word	0x20000ef0

0800bae0 <_sbrk_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d06      	ldr	r5, [pc, #24]	@ (800bafc <_sbrk_r+0x1c>)
 800bae4:	2300      	movs	r3, #0
 800bae6:	4604      	mov	r4, r0
 800bae8:	4608      	mov	r0, r1
 800baea:	602b      	str	r3, [r5, #0]
 800baec:	f7f6 fb34 	bl	8002158 <_sbrk>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	d102      	bne.n	800bafa <_sbrk_r+0x1a>
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	b103      	cbz	r3, 800bafa <_sbrk_r+0x1a>
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	20000ef0 	.word	0x20000ef0

0800bb00 <_write_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d07      	ldr	r5, [pc, #28]	@ (800bb20 <_write_r+0x20>)
 800bb04:	4604      	mov	r4, r0
 800bb06:	4608      	mov	r0, r1
 800bb08:	4611      	mov	r1, r2
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	602a      	str	r2, [r5, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	f7f6 fad2 	bl	80020b8 <_write>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_write_r+0x1e>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_write_r+0x1e>
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	20000ef0 	.word	0x20000ef0

0800bb24 <__errno>:
 800bb24:	4b01      	ldr	r3, [pc, #4]	@ (800bb2c <__errno+0x8>)
 800bb26:	6818      	ldr	r0, [r3, #0]
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	20000038 	.word	0x20000038

0800bb30 <__libc_init_array>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	4d0d      	ldr	r5, [pc, #52]	@ (800bb68 <__libc_init_array+0x38>)
 800bb34:	4c0d      	ldr	r4, [pc, #52]	@ (800bb6c <__libc_init_array+0x3c>)
 800bb36:	1b64      	subs	r4, r4, r5
 800bb38:	10a4      	asrs	r4, r4, #2
 800bb3a:	2600      	movs	r6, #0
 800bb3c:	42a6      	cmp	r6, r4
 800bb3e:	d109      	bne.n	800bb54 <__libc_init_array+0x24>
 800bb40:	4d0b      	ldr	r5, [pc, #44]	@ (800bb70 <__libc_init_array+0x40>)
 800bb42:	4c0c      	ldr	r4, [pc, #48]	@ (800bb74 <__libc_init_array+0x44>)
 800bb44:	f000 fea0 	bl	800c888 <_init>
 800bb48:	1b64      	subs	r4, r4, r5
 800bb4a:	10a4      	asrs	r4, r4, #2
 800bb4c:	2600      	movs	r6, #0
 800bb4e:	42a6      	cmp	r6, r4
 800bb50:	d105      	bne.n	800bb5e <__libc_init_array+0x2e>
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
 800bb54:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb58:	4798      	blx	r3
 800bb5a:	3601      	adds	r6, #1
 800bb5c:	e7ee      	b.n	800bb3c <__libc_init_array+0xc>
 800bb5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb62:	4798      	blx	r3
 800bb64:	3601      	adds	r6, #1
 800bb66:	e7f2      	b.n	800bb4e <__libc_init_array+0x1e>
 800bb68:	0800d49c 	.word	0x0800d49c
 800bb6c:	0800d49c 	.word	0x0800d49c
 800bb70:	0800d49c 	.word	0x0800d49c
 800bb74:	0800d4a0 	.word	0x0800d4a0

0800bb78 <__retarget_lock_init_recursive>:
 800bb78:	4770      	bx	lr

0800bb7a <__retarget_lock_acquire_recursive>:
 800bb7a:	4770      	bx	lr

0800bb7c <__retarget_lock_release_recursive>:
 800bb7c:	4770      	bx	lr

0800bb7e <strcpy>:
 800bb7e:	4603      	mov	r3, r0
 800bb80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb84:	f803 2b01 	strb.w	r2, [r3], #1
 800bb88:	2a00      	cmp	r2, #0
 800bb8a:	d1f9      	bne.n	800bb80 <strcpy+0x2>
 800bb8c:	4770      	bx	lr

0800bb8e <memcpy>:
 800bb8e:	440a      	add	r2, r1
 800bb90:	4291      	cmp	r1, r2
 800bb92:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb96:	d100      	bne.n	800bb9a <memcpy+0xc>
 800bb98:	4770      	bx	lr
 800bb9a:	b510      	push	{r4, lr}
 800bb9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bba4:	4291      	cmp	r1, r2
 800bba6:	d1f9      	bne.n	800bb9c <memcpy+0xe>
 800bba8:	bd10      	pop	{r4, pc}
	...

0800bbac <__assert_func>:
 800bbac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbae:	4614      	mov	r4, r2
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	4b09      	ldr	r3, [pc, #36]	@ (800bbd8 <__assert_func+0x2c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	68d8      	ldr	r0, [r3, #12]
 800bbba:	b954      	cbnz	r4, 800bbd2 <__assert_func+0x26>
 800bbbc:	4b07      	ldr	r3, [pc, #28]	@ (800bbdc <__assert_func+0x30>)
 800bbbe:	461c      	mov	r4, r3
 800bbc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbc4:	9100      	str	r1, [sp, #0]
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	4905      	ldr	r1, [pc, #20]	@ (800bbe0 <__assert_func+0x34>)
 800bbca:	f000 fd2b 	bl	800c624 <fiprintf>
 800bbce:	f000 fdd9 	bl	800c784 <abort>
 800bbd2:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <__assert_func+0x38>)
 800bbd4:	e7f4      	b.n	800bbc0 <__assert_func+0x14>
 800bbd6:	bf00      	nop
 800bbd8:	20000038 	.word	0x20000038
 800bbdc:	0800d45d 	.word	0x0800d45d
 800bbe0:	0800d42f 	.word	0x0800d42f
 800bbe4:	0800d422 	.word	0x0800d422

0800bbe8 <_free_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4605      	mov	r5, r0
 800bbec:	2900      	cmp	r1, #0
 800bbee:	d041      	beq.n	800bc74 <_free_r+0x8c>
 800bbf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbf4:	1f0c      	subs	r4, r1, #4
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	bfb8      	it	lt
 800bbfa:	18e4      	addlt	r4, r4, r3
 800bbfc:	f7ff fbe6 	bl	800b3cc <__malloc_lock>
 800bc00:	4a1d      	ldr	r2, [pc, #116]	@ (800bc78 <_free_r+0x90>)
 800bc02:	6813      	ldr	r3, [r2, #0]
 800bc04:	b933      	cbnz	r3, 800bc14 <_free_r+0x2c>
 800bc06:	6063      	str	r3, [r4, #4]
 800bc08:	6014      	str	r4, [r2, #0]
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc10:	f7ff bbe2 	b.w	800b3d8 <__malloc_unlock>
 800bc14:	42a3      	cmp	r3, r4
 800bc16:	d908      	bls.n	800bc2a <_free_r+0x42>
 800bc18:	6820      	ldr	r0, [r4, #0]
 800bc1a:	1821      	adds	r1, r4, r0
 800bc1c:	428b      	cmp	r3, r1
 800bc1e:	bf01      	itttt	eq
 800bc20:	6819      	ldreq	r1, [r3, #0]
 800bc22:	685b      	ldreq	r3, [r3, #4]
 800bc24:	1809      	addeq	r1, r1, r0
 800bc26:	6021      	streq	r1, [r4, #0]
 800bc28:	e7ed      	b.n	800bc06 <_free_r+0x1e>
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	b10b      	cbz	r3, 800bc34 <_free_r+0x4c>
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	d9fa      	bls.n	800bc2a <_free_r+0x42>
 800bc34:	6811      	ldr	r1, [r2, #0]
 800bc36:	1850      	adds	r0, r2, r1
 800bc38:	42a0      	cmp	r0, r4
 800bc3a:	d10b      	bne.n	800bc54 <_free_r+0x6c>
 800bc3c:	6820      	ldr	r0, [r4, #0]
 800bc3e:	4401      	add	r1, r0
 800bc40:	1850      	adds	r0, r2, r1
 800bc42:	4283      	cmp	r3, r0
 800bc44:	6011      	str	r1, [r2, #0]
 800bc46:	d1e0      	bne.n	800bc0a <_free_r+0x22>
 800bc48:	6818      	ldr	r0, [r3, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	6053      	str	r3, [r2, #4]
 800bc4e:	4408      	add	r0, r1
 800bc50:	6010      	str	r0, [r2, #0]
 800bc52:	e7da      	b.n	800bc0a <_free_r+0x22>
 800bc54:	d902      	bls.n	800bc5c <_free_r+0x74>
 800bc56:	230c      	movs	r3, #12
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	e7d6      	b.n	800bc0a <_free_r+0x22>
 800bc5c:	6820      	ldr	r0, [r4, #0]
 800bc5e:	1821      	adds	r1, r4, r0
 800bc60:	428b      	cmp	r3, r1
 800bc62:	bf04      	itt	eq
 800bc64:	6819      	ldreq	r1, [r3, #0]
 800bc66:	685b      	ldreq	r3, [r3, #4]
 800bc68:	6063      	str	r3, [r4, #4]
 800bc6a:	bf04      	itt	eq
 800bc6c:	1809      	addeq	r1, r1, r0
 800bc6e:	6021      	streq	r1, [r4, #0]
 800bc70:	6054      	str	r4, [r2, #4]
 800bc72:	e7ca      	b.n	800bc0a <_free_r+0x22>
 800bc74:	bd38      	pop	{r3, r4, r5, pc}
 800bc76:	bf00      	nop
 800bc78:	20000db0 	.word	0x20000db0

0800bc7c <__ssputs_r>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	688e      	ldr	r6, [r1, #8]
 800bc82:	461f      	mov	r7, r3
 800bc84:	42be      	cmp	r6, r7
 800bc86:	680b      	ldr	r3, [r1, #0]
 800bc88:	4682      	mov	sl, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	4690      	mov	r8, r2
 800bc8e:	d82d      	bhi.n	800bcec <__ssputs_r+0x70>
 800bc90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc98:	d026      	beq.n	800bce8 <__ssputs_r+0x6c>
 800bc9a:	6965      	ldr	r5, [r4, #20]
 800bc9c:	6909      	ldr	r1, [r1, #16]
 800bc9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bca2:	eba3 0901 	sub.w	r9, r3, r1
 800bca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcaa:	1c7b      	adds	r3, r7, #1
 800bcac:	444b      	add	r3, r9
 800bcae:	106d      	asrs	r5, r5, #1
 800bcb0:	429d      	cmp	r5, r3
 800bcb2:	bf38      	it	cc
 800bcb4:	461d      	movcc	r5, r3
 800bcb6:	0553      	lsls	r3, r2, #21
 800bcb8:	d527      	bpl.n	800bd0a <__ssputs_r+0x8e>
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f7ff fb06 	bl	800b2cc <_malloc_r>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	b360      	cbz	r0, 800bd1e <__ssputs_r+0xa2>
 800bcc4:	6921      	ldr	r1, [r4, #16]
 800bcc6:	464a      	mov	r2, r9
 800bcc8:	f7ff ff61 	bl	800bb8e <memcpy>
 800bccc:	89a3      	ldrh	r3, [r4, #12]
 800bcce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bcd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	6126      	str	r6, [r4, #16]
 800bcda:	6165      	str	r5, [r4, #20]
 800bcdc:	444e      	add	r6, r9
 800bcde:	eba5 0509 	sub.w	r5, r5, r9
 800bce2:	6026      	str	r6, [r4, #0]
 800bce4:	60a5      	str	r5, [r4, #8]
 800bce6:	463e      	mov	r6, r7
 800bce8:	42be      	cmp	r6, r7
 800bcea:	d900      	bls.n	800bcee <__ssputs_r+0x72>
 800bcec:	463e      	mov	r6, r7
 800bcee:	6820      	ldr	r0, [r4, #0]
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4641      	mov	r1, r8
 800bcf4:	f000 fd0a 	bl	800c70c <memmove>
 800bcf8:	68a3      	ldr	r3, [r4, #8]
 800bcfa:	1b9b      	subs	r3, r3, r6
 800bcfc:	60a3      	str	r3, [r4, #8]
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	4433      	add	r3, r6
 800bd02:	6023      	str	r3, [r4, #0]
 800bd04:	2000      	movs	r0, #0
 800bd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0a:	462a      	mov	r2, r5
 800bd0c:	f000 fd41 	bl	800c792 <_realloc_r>
 800bd10:	4606      	mov	r6, r0
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d1e0      	bne.n	800bcd8 <__ssputs_r+0x5c>
 800bd16:	6921      	ldr	r1, [r4, #16]
 800bd18:	4650      	mov	r0, sl
 800bd1a:	f7ff ff65 	bl	800bbe8 <_free_r>
 800bd1e:	230c      	movs	r3, #12
 800bd20:	f8ca 3000 	str.w	r3, [sl]
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	e7e9      	b.n	800bd06 <__ssputs_r+0x8a>
	...

0800bd34 <_svfiprintf_r>:
 800bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	4698      	mov	r8, r3
 800bd3a:	898b      	ldrh	r3, [r1, #12]
 800bd3c:	061b      	lsls	r3, r3, #24
 800bd3e:	b09d      	sub	sp, #116	@ 0x74
 800bd40:	4607      	mov	r7, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	4614      	mov	r4, r2
 800bd46:	d510      	bpl.n	800bd6a <_svfiprintf_r+0x36>
 800bd48:	690b      	ldr	r3, [r1, #16]
 800bd4a:	b973      	cbnz	r3, 800bd6a <_svfiprintf_r+0x36>
 800bd4c:	2140      	movs	r1, #64	@ 0x40
 800bd4e:	f7ff fabd 	bl	800b2cc <_malloc_r>
 800bd52:	6028      	str	r0, [r5, #0]
 800bd54:	6128      	str	r0, [r5, #16]
 800bd56:	b930      	cbnz	r0, 800bd66 <_svfiprintf_r+0x32>
 800bd58:	230c      	movs	r3, #12
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd60:	b01d      	add	sp, #116	@ 0x74
 800bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd66:	2340      	movs	r3, #64	@ 0x40
 800bd68:	616b      	str	r3, [r5, #20]
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd6e:	2320      	movs	r3, #32
 800bd70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd74:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd78:	2330      	movs	r3, #48	@ 0x30
 800bd7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bf18 <_svfiprintf_r+0x1e4>
 800bd7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd82:	f04f 0901 	mov.w	r9, #1
 800bd86:	4623      	mov	r3, r4
 800bd88:	469a      	mov	sl, r3
 800bd8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd8e:	b10a      	cbz	r2, 800bd94 <_svfiprintf_r+0x60>
 800bd90:	2a25      	cmp	r2, #37	@ 0x25
 800bd92:	d1f9      	bne.n	800bd88 <_svfiprintf_r+0x54>
 800bd94:	ebba 0b04 	subs.w	fp, sl, r4
 800bd98:	d00b      	beq.n	800bdb2 <_svfiprintf_r+0x7e>
 800bd9a:	465b      	mov	r3, fp
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	4629      	mov	r1, r5
 800bda0:	4638      	mov	r0, r7
 800bda2:	f7ff ff6b 	bl	800bc7c <__ssputs_r>
 800bda6:	3001      	adds	r0, #1
 800bda8:	f000 80a7 	beq.w	800befa <_svfiprintf_r+0x1c6>
 800bdac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdae:	445a      	add	r2, fp
 800bdb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 809f 	beq.w	800befa <_svfiprintf_r+0x1c6>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdc6:	f10a 0a01 	add.w	sl, sl, #1
 800bdca:	9304      	str	r3, [sp, #16]
 800bdcc:	9307      	str	r3, [sp, #28]
 800bdce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdd2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdd4:	4654      	mov	r4, sl
 800bdd6:	2205      	movs	r2, #5
 800bdd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bddc:	484e      	ldr	r0, [pc, #312]	@ (800bf18 <_svfiprintf_r+0x1e4>)
 800bdde:	f7f4 fa0f 	bl	8000200 <memchr>
 800bde2:	9a04      	ldr	r2, [sp, #16]
 800bde4:	b9d8      	cbnz	r0, 800be1e <_svfiprintf_r+0xea>
 800bde6:	06d0      	lsls	r0, r2, #27
 800bde8:	bf44      	itt	mi
 800bdea:	2320      	movmi	r3, #32
 800bdec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdf0:	0711      	lsls	r1, r2, #28
 800bdf2:	bf44      	itt	mi
 800bdf4:	232b      	movmi	r3, #43	@ 0x2b
 800bdf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdfa:	f89a 3000 	ldrb.w	r3, [sl]
 800bdfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800be00:	d015      	beq.n	800be2e <_svfiprintf_r+0xfa>
 800be02:	9a07      	ldr	r2, [sp, #28]
 800be04:	4654      	mov	r4, sl
 800be06:	2000      	movs	r0, #0
 800be08:	f04f 0c0a 	mov.w	ip, #10
 800be0c:	4621      	mov	r1, r4
 800be0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be12:	3b30      	subs	r3, #48	@ 0x30
 800be14:	2b09      	cmp	r3, #9
 800be16:	d94b      	bls.n	800beb0 <_svfiprintf_r+0x17c>
 800be18:	b1b0      	cbz	r0, 800be48 <_svfiprintf_r+0x114>
 800be1a:	9207      	str	r2, [sp, #28]
 800be1c:	e014      	b.n	800be48 <_svfiprintf_r+0x114>
 800be1e:	eba0 0308 	sub.w	r3, r0, r8
 800be22:	fa09 f303 	lsl.w	r3, r9, r3
 800be26:	4313      	orrs	r3, r2
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	46a2      	mov	sl, r4
 800be2c:	e7d2      	b.n	800bdd4 <_svfiprintf_r+0xa0>
 800be2e:	9b03      	ldr	r3, [sp, #12]
 800be30:	1d19      	adds	r1, r3, #4
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	9103      	str	r1, [sp, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	bfbb      	ittet	lt
 800be3a:	425b      	neglt	r3, r3
 800be3c:	f042 0202 	orrlt.w	r2, r2, #2
 800be40:	9307      	strge	r3, [sp, #28]
 800be42:	9307      	strlt	r3, [sp, #28]
 800be44:	bfb8      	it	lt
 800be46:	9204      	strlt	r2, [sp, #16]
 800be48:	7823      	ldrb	r3, [r4, #0]
 800be4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800be4c:	d10a      	bne.n	800be64 <_svfiprintf_r+0x130>
 800be4e:	7863      	ldrb	r3, [r4, #1]
 800be50:	2b2a      	cmp	r3, #42	@ 0x2a
 800be52:	d132      	bne.n	800beba <_svfiprintf_r+0x186>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	1d1a      	adds	r2, r3, #4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	9203      	str	r2, [sp, #12]
 800be5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be60:	3402      	adds	r4, #2
 800be62:	9305      	str	r3, [sp, #20]
 800be64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf28 <_svfiprintf_r+0x1f4>
 800be68:	7821      	ldrb	r1, [r4, #0]
 800be6a:	2203      	movs	r2, #3
 800be6c:	4650      	mov	r0, sl
 800be6e:	f7f4 f9c7 	bl	8000200 <memchr>
 800be72:	b138      	cbz	r0, 800be84 <_svfiprintf_r+0x150>
 800be74:	9b04      	ldr	r3, [sp, #16]
 800be76:	eba0 000a 	sub.w	r0, r0, sl
 800be7a:	2240      	movs	r2, #64	@ 0x40
 800be7c:	4082      	lsls	r2, r0
 800be7e:	4313      	orrs	r3, r2
 800be80:	3401      	adds	r4, #1
 800be82:	9304      	str	r3, [sp, #16]
 800be84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be88:	4824      	ldr	r0, [pc, #144]	@ (800bf1c <_svfiprintf_r+0x1e8>)
 800be8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be8e:	2206      	movs	r2, #6
 800be90:	f7f4 f9b6 	bl	8000200 <memchr>
 800be94:	2800      	cmp	r0, #0
 800be96:	d036      	beq.n	800bf06 <_svfiprintf_r+0x1d2>
 800be98:	4b21      	ldr	r3, [pc, #132]	@ (800bf20 <_svfiprintf_r+0x1ec>)
 800be9a:	bb1b      	cbnz	r3, 800bee4 <_svfiprintf_r+0x1b0>
 800be9c:	9b03      	ldr	r3, [sp, #12]
 800be9e:	3307      	adds	r3, #7
 800bea0:	f023 0307 	bic.w	r3, r3, #7
 800bea4:	3308      	adds	r3, #8
 800bea6:	9303      	str	r3, [sp, #12]
 800bea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beaa:	4433      	add	r3, r6
 800beac:	9309      	str	r3, [sp, #36]	@ 0x24
 800beae:	e76a      	b.n	800bd86 <_svfiprintf_r+0x52>
 800beb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800beb4:	460c      	mov	r4, r1
 800beb6:	2001      	movs	r0, #1
 800beb8:	e7a8      	b.n	800be0c <_svfiprintf_r+0xd8>
 800beba:	2300      	movs	r3, #0
 800bebc:	3401      	adds	r4, #1
 800bebe:	9305      	str	r3, [sp, #20]
 800bec0:	4619      	mov	r1, r3
 800bec2:	f04f 0c0a 	mov.w	ip, #10
 800bec6:	4620      	mov	r0, r4
 800bec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800becc:	3a30      	subs	r2, #48	@ 0x30
 800bece:	2a09      	cmp	r2, #9
 800bed0:	d903      	bls.n	800beda <_svfiprintf_r+0x1a6>
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0c6      	beq.n	800be64 <_svfiprintf_r+0x130>
 800bed6:	9105      	str	r1, [sp, #20]
 800bed8:	e7c4      	b.n	800be64 <_svfiprintf_r+0x130>
 800beda:	fb0c 2101 	mla	r1, ip, r1, r2
 800bede:	4604      	mov	r4, r0
 800bee0:	2301      	movs	r3, #1
 800bee2:	e7f0      	b.n	800bec6 <_svfiprintf_r+0x192>
 800bee4:	ab03      	add	r3, sp, #12
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	462a      	mov	r2, r5
 800beea:	4b0e      	ldr	r3, [pc, #56]	@ (800bf24 <_svfiprintf_r+0x1f0>)
 800beec:	a904      	add	r1, sp, #16
 800beee:	4638      	mov	r0, r7
 800bef0:	f3af 8000 	nop.w
 800bef4:	1c42      	adds	r2, r0, #1
 800bef6:	4606      	mov	r6, r0
 800bef8:	d1d6      	bne.n	800bea8 <_svfiprintf_r+0x174>
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	065b      	lsls	r3, r3, #25
 800befe:	f53f af2d 	bmi.w	800bd5c <_svfiprintf_r+0x28>
 800bf02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf04:	e72c      	b.n	800bd60 <_svfiprintf_r+0x2c>
 800bf06:	ab03      	add	r3, sp, #12
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	4b05      	ldr	r3, [pc, #20]	@ (800bf24 <_svfiprintf_r+0x1f0>)
 800bf0e:	a904      	add	r1, sp, #16
 800bf10:	4638      	mov	r0, r7
 800bf12:	f000 f9bb 	bl	800c28c <_printf_i>
 800bf16:	e7ed      	b.n	800bef4 <_svfiprintf_r+0x1c0>
 800bf18:	0800d45e 	.word	0x0800d45e
 800bf1c:	0800d468 	.word	0x0800d468
 800bf20:	00000000 	.word	0x00000000
 800bf24:	0800bc7d 	.word	0x0800bc7d
 800bf28:	0800d464 	.word	0x0800d464

0800bf2c <__sfputc_r>:
 800bf2c:	6893      	ldr	r3, [r2, #8]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	b410      	push	{r4}
 800bf34:	6093      	str	r3, [r2, #8]
 800bf36:	da08      	bge.n	800bf4a <__sfputc_r+0x1e>
 800bf38:	6994      	ldr	r4, [r2, #24]
 800bf3a:	42a3      	cmp	r3, r4
 800bf3c:	db01      	blt.n	800bf42 <__sfputc_r+0x16>
 800bf3e:	290a      	cmp	r1, #10
 800bf40:	d103      	bne.n	800bf4a <__sfputc_r+0x1e>
 800bf42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf46:	f7ff bc66 	b.w	800b816 <__swbuf_r>
 800bf4a:	6813      	ldr	r3, [r2, #0]
 800bf4c:	1c58      	adds	r0, r3, #1
 800bf4e:	6010      	str	r0, [r2, #0]
 800bf50:	7019      	strb	r1, [r3, #0]
 800bf52:	4608      	mov	r0, r1
 800bf54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <__sfputs_r>:
 800bf5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	460f      	mov	r7, r1
 800bf60:	4614      	mov	r4, r2
 800bf62:	18d5      	adds	r5, r2, r3
 800bf64:	42ac      	cmp	r4, r5
 800bf66:	d101      	bne.n	800bf6c <__sfputs_r+0x12>
 800bf68:	2000      	movs	r0, #0
 800bf6a:	e007      	b.n	800bf7c <__sfputs_r+0x22>
 800bf6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf70:	463a      	mov	r2, r7
 800bf72:	4630      	mov	r0, r6
 800bf74:	f7ff ffda 	bl	800bf2c <__sfputc_r>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d1f3      	bne.n	800bf64 <__sfputs_r+0xa>
 800bf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf80 <_vfiprintf_r>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	460d      	mov	r5, r1
 800bf86:	b09d      	sub	sp, #116	@ 0x74
 800bf88:	4614      	mov	r4, r2
 800bf8a:	4698      	mov	r8, r3
 800bf8c:	4606      	mov	r6, r0
 800bf8e:	b118      	cbz	r0, 800bf98 <_vfiprintf_r+0x18>
 800bf90:	6a03      	ldr	r3, [r0, #32]
 800bf92:	b90b      	cbnz	r3, 800bf98 <_vfiprintf_r+0x18>
 800bf94:	f7ff fb36 	bl	800b604 <__sinit>
 800bf98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf9a:	07d9      	lsls	r1, r3, #31
 800bf9c:	d405      	bmi.n	800bfaa <_vfiprintf_r+0x2a>
 800bf9e:	89ab      	ldrh	r3, [r5, #12]
 800bfa0:	059a      	lsls	r2, r3, #22
 800bfa2:	d402      	bmi.n	800bfaa <_vfiprintf_r+0x2a>
 800bfa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfa6:	f7ff fde8 	bl	800bb7a <__retarget_lock_acquire_recursive>
 800bfaa:	89ab      	ldrh	r3, [r5, #12]
 800bfac:	071b      	lsls	r3, r3, #28
 800bfae:	d501      	bpl.n	800bfb4 <_vfiprintf_r+0x34>
 800bfb0:	692b      	ldr	r3, [r5, #16]
 800bfb2:	b99b      	cbnz	r3, 800bfdc <_vfiprintf_r+0x5c>
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	f7ff fc6c 	bl	800b894 <__swsetup_r>
 800bfbc:	b170      	cbz	r0, 800bfdc <_vfiprintf_r+0x5c>
 800bfbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfc0:	07dc      	lsls	r4, r3, #31
 800bfc2:	d504      	bpl.n	800bfce <_vfiprintf_r+0x4e>
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc8:	b01d      	add	sp, #116	@ 0x74
 800bfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfce:	89ab      	ldrh	r3, [r5, #12]
 800bfd0:	0598      	lsls	r0, r3, #22
 800bfd2:	d4f7      	bmi.n	800bfc4 <_vfiprintf_r+0x44>
 800bfd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfd6:	f7ff fdd1 	bl	800bb7c <__retarget_lock_release_recursive>
 800bfda:	e7f3      	b.n	800bfc4 <_vfiprintf_r+0x44>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe0:	2320      	movs	r3, #32
 800bfe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfea:	2330      	movs	r3, #48	@ 0x30
 800bfec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c19c <_vfiprintf_r+0x21c>
 800bff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bff4:	f04f 0901 	mov.w	r9, #1
 800bff8:	4623      	mov	r3, r4
 800bffa:	469a      	mov	sl, r3
 800bffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c000:	b10a      	cbz	r2, 800c006 <_vfiprintf_r+0x86>
 800c002:	2a25      	cmp	r2, #37	@ 0x25
 800c004:	d1f9      	bne.n	800bffa <_vfiprintf_r+0x7a>
 800c006:	ebba 0b04 	subs.w	fp, sl, r4
 800c00a:	d00b      	beq.n	800c024 <_vfiprintf_r+0xa4>
 800c00c:	465b      	mov	r3, fp
 800c00e:	4622      	mov	r2, r4
 800c010:	4629      	mov	r1, r5
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ffa1 	bl	800bf5a <__sfputs_r>
 800c018:	3001      	adds	r0, #1
 800c01a:	f000 80a7 	beq.w	800c16c <_vfiprintf_r+0x1ec>
 800c01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c020:	445a      	add	r2, fp
 800c022:	9209      	str	r2, [sp, #36]	@ 0x24
 800c024:	f89a 3000 	ldrb.w	r3, [sl]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f000 809f 	beq.w	800c16c <_vfiprintf_r+0x1ec>
 800c02e:	2300      	movs	r3, #0
 800c030:	f04f 32ff 	mov.w	r2, #4294967295
 800c034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c038:	f10a 0a01 	add.w	sl, sl, #1
 800c03c:	9304      	str	r3, [sp, #16]
 800c03e:	9307      	str	r3, [sp, #28]
 800c040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c044:	931a      	str	r3, [sp, #104]	@ 0x68
 800c046:	4654      	mov	r4, sl
 800c048:	2205      	movs	r2, #5
 800c04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c04e:	4853      	ldr	r0, [pc, #332]	@ (800c19c <_vfiprintf_r+0x21c>)
 800c050:	f7f4 f8d6 	bl	8000200 <memchr>
 800c054:	9a04      	ldr	r2, [sp, #16]
 800c056:	b9d8      	cbnz	r0, 800c090 <_vfiprintf_r+0x110>
 800c058:	06d1      	lsls	r1, r2, #27
 800c05a:	bf44      	itt	mi
 800c05c:	2320      	movmi	r3, #32
 800c05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c062:	0713      	lsls	r3, r2, #28
 800c064:	bf44      	itt	mi
 800c066:	232b      	movmi	r3, #43	@ 0x2b
 800c068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c06c:	f89a 3000 	ldrb.w	r3, [sl]
 800c070:	2b2a      	cmp	r3, #42	@ 0x2a
 800c072:	d015      	beq.n	800c0a0 <_vfiprintf_r+0x120>
 800c074:	9a07      	ldr	r2, [sp, #28]
 800c076:	4654      	mov	r4, sl
 800c078:	2000      	movs	r0, #0
 800c07a:	f04f 0c0a 	mov.w	ip, #10
 800c07e:	4621      	mov	r1, r4
 800c080:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c084:	3b30      	subs	r3, #48	@ 0x30
 800c086:	2b09      	cmp	r3, #9
 800c088:	d94b      	bls.n	800c122 <_vfiprintf_r+0x1a2>
 800c08a:	b1b0      	cbz	r0, 800c0ba <_vfiprintf_r+0x13a>
 800c08c:	9207      	str	r2, [sp, #28]
 800c08e:	e014      	b.n	800c0ba <_vfiprintf_r+0x13a>
 800c090:	eba0 0308 	sub.w	r3, r0, r8
 800c094:	fa09 f303 	lsl.w	r3, r9, r3
 800c098:	4313      	orrs	r3, r2
 800c09a:	9304      	str	r3, [sp, #16]
 800c09c:	46a2      	mov	sl, r4
 800c09e:	e7d2      	b.n	800c046 <_vfiprintf_r+0xc6>
 800c0a0:	9b03      	ldr	r3, [sp, #12]
 800c0a2:	1d19      	adds	r1, r3, #4
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	9103      	str	r1, [sp, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	bfbb      	ittet	lt
 800c0ac:	425b      	neglt	r3, r3
 800c0ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c0b2:	9307      	strge	r3, [sp, #28]
 800c0b4:	9307      	strlt	r3, [sp, #28]
 800c0b6:	bfb8      	it	lt
 800c0b8:	9204      	strlt	r2, [sp, #16]
 800c0ba:	7823      	ldrb	r3, [r4, #0]
 800c0bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0be:	d10a      	bne.n	800c0d6 <_vfiprintf_r+0x156>
 800c0c0:	7863      	ldrb	r3, [r4, #1]
 800c0c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0c4:	d132      	bne.n	800c12c <_vfiprintf_r+0x1ac>
 800c0c6:	9b03      	ldr	r3, [sp, #12]
 800c0c8:	1d1a      	adds	r2, r3, #4
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	9203      	str	r2, [sp, #12]
 800c0ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0d2:	3402      	adds	r4, #2
 800c0d4:	9305      	str	r3, [sp, #20]
 800c0d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c1ac <_vfiprintf_r+0x22c>
 800c0da:	7821      	ldrb	r1, [r4, #0]
 800c0dc:	2203      	movs	r2, #3
 800c0de:	4650      	mov	r0, sl
 800c0e0:	f7f4 f88e 	bl	8000200 <memchr>
 800c0e4:	b138      	cbz	r0, 800c0f6 <_vfiprintf_r+0x176>
 800c0e6:	9b04      	ldr	r3, [sp, #16]
 800c0e8:	eba0 000a 	sub.w	r0, r0, sl
 800c0ec:	2240      	movs	r2, #64	@ 0x40
 800c0ee:	4082      	lsls	r2, r0
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	3401      	adds	r4, #1
 800c0f4:	9304      	str	r3, [sp, #16]
 800c0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0fa:	4829      	ldr	r0, [pc, #164]	@ (800c1a0 <_vfiprintf_r+0x220>)
 800c0fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c100:	2206      	movs	r2, #6
 800c102:	f7f4 f87d 	bl	8000200 <memchr>
 800c106:	2800      	cmp	r0, #0
 800c108:	d03f      	beq.n	800c18a <_vfiprintf_r+0x20a>
 800c10a:	4b26      	ldr	r3, [pc, #152]	@ (800c1a4 <_vfiprintf_r+0x224>)
 800c10c:	bb1b      	cbnz	r3, 800c156 <_vfiprintf_r+0x1d6>
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	3307      	adds	r3, #7
 800c112:	f023 0307 	bic.w	r3, r3, #7
 800c116:	3308      	adds	r3, #8
 800c118:	9303      	str	r3, [sp, #12]
 800c11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c11c:	443b      	add	r3, r7
 800c11e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c120:	e76a      	b.n	800bff8 <_vfiprintf_r+0x78>
 800c122:	fb0c 3202 	mla	r2, ip, r2, r3
 800c126:	460c      	mov	r4, r1
 800c128:	2001      	movs	r0, #1
 800c12a:	e7a8      	b.n	800c07e <_vfiprintf_r+0xfe>
 800c12c:	2300      	movs	r3, #0
 800c12e:	3401      	adds	r4, #1
 800c130:	9305      	str	r3, [sp, #20]
 800c132:	4619      	mov	r1, r3
 800c134:	f04f 0c0a 	mov.w	ip, #10
 800c138:	4620      	mov	r0, r4
 800c13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c13e:	3a30      	subs	r2, #48	@ 0x30
 800c140:	2a09      	cmp	r2, #9
 800c142:	d903      	bls.n	800c14c <_vfiprintf_r+0x1cc>
 800c144:	2b00      	cmp	r3, #0
 800c146:	d0c6      	beq.n	800c0d6 <_vfiprintf_r+0x156>
 800c148:	9105      	str	r1, [sp, #20]
 800c14a:	e7c4      	b.n	800c0d6 <_vfiprintf_r+0x156>
 800c14c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c150:	4604      	mov	r4, r0
 800c152:	2301      	movs	r3, #1
 800c154:	e7f0      	b.n	800c138 <_vfiprintf_r+0x1b8>
 800c156:	ab03      	add	r3, sp, #12
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	462a      	mov	r2, r5
 800c15c:	4b12      	ldr	r3, [pc, #72]	@ (800c1a8 <_vfiprintf_r+0x228>)
 800c15e:	a904      	add	r1, sp, #16
 800c160:	4630      	mov	r0, r6
 800c162:	f3af 8000 	nop.w
 800c166:	4607      	mov	r7, r0
 800c168:	1c78      	adds	r0, r7, #1
 800c16a:	d1d6      	bne.n	800c11a <_vfiprintf_r+0x19a>
 800c16c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c16e:	07d9      	lsls	r1, r3, #31
 800c170:	d405      	bmi.n	800c17e <_vfiprintf_r+0x1fe>
 800c172:	89ab      	ldrh	r3, [r5, #12]
 800c174:	059a      	lsls	r2, r3, #22
 800c176:	d402      	bmi.n	800c17e <_vfiprintf_r+0x1fe>
 800c178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c17a:	f7ff fcff 	bl	800bb7c <__retarget_lock_release_recursive>
 800c17e:	89ab      	ldrh	r3, [r5, #12]
 800c180:	065b      	lsls	r3, r3, #25
 800c182:	f53f af1f 	bmi.w	800bfc4 <_vfiprintf_r+0x44>
 800c186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c188:	e71e      	b.n	800bfc8 <_vfiprintf_r+0x48>
 800c18a:	ab03      	add	r3, sp, #12
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	462a      	mov	r2, r5
 800c190:	4b05      	ldr	r3, [pc, #20]	@ (800c1a8 <_vfiprintf_r+0x228>)
 800c192:	a904      	add	r1, sp, #16
 800c194:	4630      	mov	r0, r6
 800c196:	f000 f879 	bl	800c28c <_printf_i>
 800c19a:	e7e4      	b.n	800c166 <_vfiprintf_r+0x1e6>
 800c19c:	0800d45e 	.word	0x0800d45e
 800c1a0:	0800d468 	.word	0x0800d468
 800c1a4:	00000000 	.word	0x00000000
 800c1a8:	0800bf5b 	.word	0x0800bf5b
 800c1ac:	0800d464 	.word	0x0800d464

0800c1b0 <_printf_common>:
 800c1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b4:	4616      	mov	r6, r2
 800c1b6:	4698      	mov	r8, r3
 800c1b8:	688a      	ldr	r2, [r1, #8]
 800c1ba:	690b      	ldr	r3, [r1, #16]
 800c1bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	bfb8      	it	lt
 800c1c4:	4613      	movlt	r3, r2
 800c1c6:	6033      	str	r3, [r6, #0]
 800c1c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c1cc:	4607      	mov	r7, r0
 800c1ce:	460c      	mov	r4, r1
 800c1d0:	b10a      	cbz	r2, 800c1d6 <_printf_common+0x26>
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	6033      	str	r3, [r6, #0]
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	0699      	lsls	r1, r3, #26
 800c1da:	bf42      	ittt	mi
 800c1dc:	6833      	ldrmi	r3, [r6, #0]
 800c1de:	3302      	addmi	r3, #2
 800c1e0:	6033      	strmi	r3, [r6, #0]
 800c1e2:	6825      	ldr	r5, [r4, #0]
 800c1e4:	f015 0506 	ands.w	r5, r5, #6
 800c1e8:	d106      	bne.n	800c1f8 <_printf_common+0x48>
 800c1ea:	f104 0a19 	add.w	sl, r4, #25
 800c1ee:	68e3      	ldr	r3, [r4, #12]
 800c1f0:	6832      	ldr	r2, [r6, #0]
 800c1f2:	1a9b      	subs	r3, r3, r2
 800c1f4:	42ab      	cmp	r3, r5
 800c1f6:	dc26      	bgt.n	800c246 <_printf_common+0x96>
 800c1f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c1fc:	6822      	ldr	r2, [r4, #0]
 800c1fe:	3b00      	subs	r3, #0
 800c200:	bf18      	it	ne
 800c202:	2301      	movne	r3, #1
 800c204:	0692      	lsls	r2, r2, #26
 800c206:	d42b      	bmi.n	800c260 <_printf_common+0xb0>
 800c208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c20c:	4641      	mov	r1, r8
 800c20e:	4638      	mov	r0, r7
 800c210:	47c8      	blx	r9
 800c212:	3001      	adds	r0, #1
 800c214:	d01e      	beq.n	800c254 <_printf_common+0xa4>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	6922      	ldr	r2, [r4, #16]
 800c21a:	f003 0306 	and.w	r3, r3, #6
 800c21e:	2b04      	cmp	r3, #4
 800c220:	bf02      	ittt	eq
 800c222:	68e5      	ldreq	r5, [r4, #12]
 800c224:	6833      	ldreq	r3, [r6, #0]
 800c226:	1aed      	subeq	r5, r5, r3
 800c228:	68a3      	ldr	r3, [r4, #8]
 800c22a:	bf0c      	ite	eq
 800c22c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c230:	2500      	movne	r5, #0
 800c232:	4293      	cmp	r3, r2
 800c234:	bfc4      	itt	gt
 800c236:	1a9b      	subgt	r3, r3, r2
 800c238:	18ed      	addgt	r5, r5, r3
 800c23a:	2600      	movs	r6, #0
 800c23c:	341a      	adds	r4, #26
 800c23e:	42b5      	cmp	r5, r6
 800c240:	d11a      	bne.n	800c278 <_printf_common+0xc8>
 800c242:	2000      	movs	r0, #0
 800c244:	e008      	b.n	800c258 <_printf_common+0xa8>
 800c246:	2301      	movs	r3, #1
 800c248:	4652      	mov	r2, sl
 800c24a:	4641      	mov	r1, r8
 800c24c:	4638      	mov	r0, r7
 800c24e:	47c8      	blx	r9
 800c250:	3001      	adds	r0, #1
 800c252:	d103      	bne.n	800c25c <_printf_common+0xac>
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25c:	3501      	adds	r5, #1
 800c25e:	e7c6      	b.n	800c1ee <_printf_common+0x3e>
 800c260:	18e1      	adds	r1, r4, r3
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	2030      	movs	r0, #48	@ 0x30
 800c266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c26a:	4422      	add	r2, r4
 800c26c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c274:	3302      	adds	r3, #2
 800c276:	e7c7      	b.n	800c208 <_printf_common+0x58>
 800c278:	2301      	movs	r3, #1
 800c27a:	4622      	mov	r2, r4
 800c27c:	4641      	mov	r1, r8
 800c27e:	4638      	mov	r0, r7
 800c280:	47c8      	blx	r9
 800c282:	3001      	adds	r0, #1
 800c284:	d0e6      	beq.n	800c254 <_printf_common+0xa4>
 800c286:	3601      	adds	r6, #1
 800c288:	e7d9      	b.n	800c23e <_printf_common+0x8e>
	...

0800c28c <_printf_i>:
 800c28c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c290:	7e0f      	ldrb	r7, [r1, #24]
 800c292:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c294:	2f78      	cmp	r7, #120	@ 0x78
 800c296:	4691      	mov	r9, r2
 800c298:	4680      	mov	r8, r0
 800c29a:	460c      	mov	r4, r1
 800c29c:	469a      	mov	sl, r3
 800c29e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c2a2:	d807      	bhi.n	800c2b4 <_printf_i+0x28>
 800c2a4:	2f62      	cmp	r7, #98	@ 0x62
 800c2a6:	d80a      	bhi.n	800c2be <_printf_i+0x32>
 800c2a8:	2f00      	cmp	r7, #0
 800c2aa:	f000 80d2 	beq.w	800c452 <_printf_i+0x1c6>
 800c2ae:	2f58      	cmp	r7, #88	@ 0x58
 800c2b0:	f000 80b9 	beq.w	800c426 <_printf_i+0x19a>
 800c2b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c2bc:	e03a      	b.n	800c334 <_printf_i+0xa8>
 800c2be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c2c2:	2b15      	cmp	r3, #21
 800c2c4:	d8f6      	bhi.n	800c2b4 <_printf_i+0x28>
 800c2c6:	a101      	add	r1, pc, #4	@ (adr r1, 800c2cc <_printf_i+0x40>)
 800c2c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2cc:	0800c325 	.word	0x0800c325
 800c2d0:	0800c339 	.word	0x0800c339
 800c2d4:	0800c2b5 	.word	0x0800c2b5
 800c2d8:	0800c2b5 	.word	0x0800c2b5
 800c2dc:	0800c2b5 	.word	0x0800c2b5
 800c2e0:	0800c2b5 	.word	0x0800c2b5
 800c2e4:	0800c339 	.word	0x0800c339
 800c2e8:	0800c2b5 	.word	0x0800c2b5
 800c2ec:	0800c2b5 	.word	0x0800c2b5
 800c2f0:	0800c2b5 	.word	0x0800c2b5
 800c2f4:	0800c2b5 	.word	0x0800c2b5
 800c2f8:	0800c439 	.word	0x0800c439
 800c2fc:	0800c363 	.word	0x0800c363
 800c300:	0800c3f3 	.word	0x0800c3f3
 800c304:	0800c2b5 	.word	0x0800c2b5
 800c308:	0800c2b5 	.word	0x0800c2b5
 800c30c:	0800c45b 	.word	0x0800c45b
 800c310:	0800c2b5 	.word	0x0800c2b5
 800c314:	0800c363 	.word	0x0800c363
 800c318:	0800c2b5 	.word	0x0800c2b5
 800c31c:	0800c2b5 	.word	0x0800c2b5
 800c320:	0800c3fb 	.word	0x0800c3fb
 800c324:	6833      	ldr	r3, [r6, #0]
 800c326:	1d1a      	adds	r2, r3, #4
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6032      	str	r2, [r6, #0]
 800c32c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c334:	2301      	movs	r3, #1
 800c336:	e09d      	b.n	800c474 <_printf_i+0x1e8>
 800c338:	6833      	ldr	r3, [r6, #0]
 800c33a:	6820      	ldr	r0, [r4, #0]
 800c33c:	1d19      	adds	r1, r3, #4
 800c33e:	6031      	str	r1, [r6, #0]
 800c340:	0606      	lsls	r6, r0, #24
 800c342:	d501      	bpl.n	800c348 <_printf_i+0xbc>
 800c344:	681d      	ldr	r5, [r3, #0]
 800c346:	e003      	b.n	800c350 <_printf_i+0xc4>
 800c348:	0645      	lsls	r5, r0, #25
 800c34a:	d5fb      	bpl.n	800c344 <_printf_i+0xb8>
 800c34c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c350:	2d00      	cmp	r5, #0
 800c352:	da03      	bge.n	800c35c <_printf_i+0xd0>
 800c354:	232d      	movs	r3, #45	@ 0x2d
 800c356:	426d      	negs	r5, r5
 800c358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c35c:	4859      	ldr	r0, [pc, #356]	@ (800c4c4 <_printf_i+0x238>)
 800c35e:	230a      	movs	r3, #10
 800c360:	e011      	b.n	800c386 <_printf_i+0xfa>
 800c362:	6821      	ldr	r1, [r4, #0]
 800c364:	6833      	ldr	r3, [r6, #0]
 800c366:	0608      	lsls	r0, r1, #24
 800c368:	f853 5b04 	ldr.w	r5, [r3], #4
 800c36c:	d402      	bmi.n	800c374 <_printf_i+0xe8>
 800c36e:	0649      	lsls	r1, r1, #25
 800c370:	bf48      	it	mi
 800c372:	b2ad      	uxthmi	r5, r5
 800c374:	2f6f      	cmp	r7, #111	@ 0x6f
 800c376:	4853      	ldr	r0, [pc, #332]	@ (800c4c4 <_printf_i+0x238>)
 800c378:	6033      	str	r3, [r6, #0]
 800c37a:	bf14      	ite	ne
 800c37c:	230a      	movne	r3, #10
 800c37e:	2308      	moveq	r3, #8
 800c380:	2100      	movs	r1, #0
 800c382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c386:	6866      	ldr	r6, [r4, #4]
 800c388:	60a6      	str	r6, [r4, #8]
 800c38a:	2e00      	cmp	r6, #0
 800c38c:	bfa2      	ittt	ge
 800c38e:	6821      	ldrge	r1, [r4, #0]
 800c390:	f021 0104 	bicge.w	r1, r1, #4
 800c394:	6021      	strge	r1, [r4, #0]
 800c396:	b90d      	cbnz	r5, 800c39c <_printf_i+0x110>
 800c398:	2e00      	cmp	r6, #0
 800c39a:	d04b      	beq.n	800c434 <_printf_i+0x1a8>
 800c39c:	4616      	mov	r6, r2
 800c39e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3a2:	fb03 5711 	mls	r7, r3, r1, r5
 800c3a6:	5dc7      	ldrb	r7, [r0, r7]
 800c3a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3ac:	462f      	mov	r7, r5
 800c3ae:	42bb      	cmp	r3, r7
 800c3b0:	460d      	mov	r5, r1
 800c3b2:	d9f4      	bls.n	800c39e <_printf_i+0x112>
 800c3b4:	2b08      	cmp	r3, #8
 800c3b6:	d10b      	bne.n	800c3d0 <_printf_i+0x144>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	07df      	lsls	r7, r3, #31
 800c3bc:	d508      	bpl.n	800c3d0 <_printf_i+0x144>
 800c3be:	6923      	ldr	r3, [r4, #16]
 800c3c0:	6861      	ldr	r1, [r4, #4]
 800c3c2:	4299      	cmp	r1, r3
 800c3c4:	bfde      	ittt	le
 800c3c6:	2330      	movle	r3, #48	@ 0x30
 800c3c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c3cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c3d0:	1b92      	subs	r2, r2, r6
 800c3d2:	6122      	str	r2, [r4, #16]
 800c3d4:	f8cd a000 	str.w	sl, [sp]
 800c3d8:	464b      	mov	r3, r9
 800c3da:	aa03      	add	r2, sp, #12
 800c3dc:	4621      	mov	r1, r4
 800c3de:	4640      	mov	r0, r8
 800c3e0:	f7ff fee6 	bl	800c1b0 <_printf_common>
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	d14a      	bne.n	800c47e <_printf_i+0x1f2>
 800c3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ec:	b004      	add	sp, #16
 800c3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	f043 0320 	orr.w	r3, r3, #32
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	4833      	ldr	r0, [pc, #204]	@ (800c4c8 <_printf_i+0x23c>)
 800c3fc:	2778      	movs	r7, #120	@ 0x78
 800c3fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	6831      	ldr	r1, [r6, #0]
 800c406:	061f      	lsls	r7, r3, #24
 800c408:	f851 5b04 	ldr.w	r5, [r1], #4
 800c40c:	d402      	bmi.n	800c414 <_printf_i+0x188>
 800c40e:	065f      	lsls	r7, r3, #25
 800c410:	bf48      	it	mi
 800c412:	b2ad      	uxthmi	r5, r5
 800c414:	6031      	str	r1, [r6, #0]
 800c416:	07d9      	lsls	r1, r3, #31
 800c418:	bf44      	itt	mi
 800c41a:	f043 0320 	orrmi.w	r3, r3, #32
 800c41e:	6023      	strmi	r3, [r4, #0]
 800c420:	b11d      	cbz	r5, 800c42a <_printf_i+0x19e>
 800c422:	2310      	movs	r3, #16
 800c424:	e7ac      	b.n	800c380 <_printf_i+0xf4>
 800c426:	4827      	ldr	r0, [pc, #156]	@ (800c4c4 <_printf_i+0x238>)
 800c428:	e7e9      	b.n	800c3fe <_printf_i+0x172>
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	f023 0320 	bic.w	r3, r3, #32
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	e7f6      	b.n	800c422 <_printf_i+0x196>
 800c434:	4616      	mov	r6, r2
 800c436:	e7bd      	b.n	800c3b4 <_printf_i+0x128>
 800c438:	6833      	ldr	r3, [r6, #0]
 800c43a:	6825      	ldr	r5, [r4, #0]
 800c43c:	6961      	ldr	r1, [r4, #20]
 800c43e:	1d18      	adds	r0, r3, #4
 800c440:	6030      	str	r0, [r6, #0]
 800c442:	062e      	lsls	r6, r5, #24
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	d501      	bpl.n	800c44c <_printf_i+0x1c0>
 800c448:	6019      	str	r1, [r3, #0]
 800c44a:	e002      	b.n	800c452 <_printf_i+0x1c6>
 800c44c:	0668      	lsls	r0, r5, #25
 800c44e:	d5fb      	bpl.n	800c448 <_printf_i+0x1bc>
 800c450:	8019      	strh	r1, [r3, #0]
 800c452:	2300      	movs	r3, #0
 800c454:	6123      	str	r3, [r4, #16]
 800c456:	4616      	mov	r6, r2
 800c458:	e7bc      	b.n	800c3d4 <_printf_i+0x148>
 800c45a:	6833      	ldr	r3, [r6, #0]
 800c45c:	1d1a      	adds	r2, r3, #4
 800c45e:	6032      	str	r2, [r6, #0]
 800c460:	681e      	ldr	r6, [r3, #0]
 800c462:	6862      	ldr	r2, [r4, #4]
 800c464:	2100      	movs	r1, #0
 800c466:	4630      	mov	r0, r6
 800c468:	f7f3 feca 	bl	8000200 <memchr>
 800c46c:	b108      	cbz	r0, 800c472 <_printf_i+0x1e6>
 800c46e:	1b80      	subs	r0, r0, r6
 800c470:	6060      	str	r0, [r4, #4]
 800c472:	6863      	ldr	r3, [r4, #4]
 800c474:	6123      	str	r3, [r4, #16]
 800c476:	2300      	movs	r3, #0
 800c478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c47c:	e7aa      	b.n	800c3d4 <_printf_i+0x148>
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	4632      	mov	r2, r6
 800c482:	4649      	mov	r1, r9
 800c484:	4640      	mov	r0, r8
 800c486:	47d0      	blx	sl
 800c488:	3001      	adds	r0, #1
 800c48a:	d0ad      	beq.n	800c3e8 <_printf_i+0x15c>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	079b      	lsls	r3, r3, #30
 800c490:	d413      	bmi.n	800c4ba <_printf_i+0x22e>
 800c492:	68e0      	ldr	r0, [r4, #12]
 800c494:	9b03      	ldr	r3, [sp, #12]
 800c496:	4298      	cmp	r0, r3
 800c498:	bfb8      	it	lt
 800c49a:	4618      	movlt	r0, r3
 800c49c:	e7a6      	b.n	800c3ec <_printf_i+0x160>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	4649      	mov	r1, r9
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	47d0      	blx	sl
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	d09d      	beq.n	800c3e8 <_printf_i+0x15c>
 800c4ac:	3501      	adds	r5, #1
 800c4ae:	68e3      	ldr	r3, [r4, #12]
 800c4b0:	9903      	ldr	r1, [sp, #12]
 800c4b2:	1a5b      	subs	r3, r3, r1
 800c4b4:	42ab      	cmp	r3, r5
 800c4b6:	dcf2      	bgt.n	800c49e <_printf_i+0x212>
 800c4b8:	e7eb      	b.n	800c492 <_printf_i+0x206>
 800c4ba:	2500      	movs	r5, #0
 800c4bc:	f104 0619 	add.w	r6, r4, #25
 800c4c0:	e7f5      	b.n	800c4ae <_printf_i+0x222>
 800c4c2:	bf00      	nop
 800c4c4:	0800d46f 	.word	0x0800d46f
 800c4c8:	0800d480 	.word	0x0800d480

0800c4cc <__sflush_r>:
 800c4cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d4:	0716      	lsls	r6, r2, #28
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	460c      	mov	r4, r1
 800c4da:	d454      	bmi.n	800c586 <__sflush_r+0xba>
 800c4dc:	684b      	ldr	r3, [r1, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	dc02      	bgt.n	800c4e8 <__sflush_r+0x1c>
 800c4e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	dd48      	ble.n	800c57a <__sflush_r+0xae>
 800c4e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4ea:	2e00      	cmp	r6, #0
 800c4ec:	d045      	beq.n	800c57a <__sflush_r+0xae>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4f4:	682f      	ldr	r7, [r5, #0]
 800c4f6:	6a21      	ldr	r1, [r4, #32]
 800c4f8:	602b      	str	r3, [r5, #0]
 800c4fa:	d030      	beq.n	800c55e <__sflush_r+0x92>
 800c4fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	0759      	lsls	r1, r3, #29
 800c502:	d505      	bpl.n	800c510 <__sflush_r+0x44>
 800c504:	6863      	ldr	r3, [r4, #4]
 800c506:	1ad2      	subs	r2, r2, r3
 800c508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c50a:	b10b      	cbz	r3, 800c510 <__sflush_r+0x44>
 800c50c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c50e:	1ad2      	subs	r2, r2, r3
 800c510:	2300      	movs	r3, #0
 800c512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c514:	6a21      	ldr	r1, [r4, #32]
 800c516:	4628      	mov	r0, r5
 800c518:	47b0      	blx	r6
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	d106      	bne.n	800c52e <__sflush_r+0x62>
 800c520:	6829      	ldr	r1, [r5, #0]
 800c522:	291d      	cmp	r1, #29
 800c524:	d82b      	bhi.n	800c57e <__sflush_r+0xb2>
 800c526:	4a2a      	ldr	r2, [pc, #168]	@ (800c5d0 <__sflush_r+0x104>)
 800c528:	410a      	asrs	r2, r1
 800c52a:	07d6      	lsls	r6, r2, #31
 800c52c:	d427      	bmi.n	800c57e <__sflush_r+0xb2>
 800c52e:	2200      	movs	r2, #0
 800c530:	6062      	str	r2, [r4, #4]
 800c532:	04d9      	lsls	r1, r3, #19
 800c534:	6922      	ldr	r2, [r4, #16]
 800c536:	6022      	str	r2, [r4, #0]
 800c538:	d504      	bpl.n	800c544 <__sflush_r+0x78>
 800c53a:	1c42      	adds	r2, r0, #1
 800c53c:	d101      	bne.n	800c542 <__sflush_r+0x76>
 800c53e:	682b      	ldr	r3, [r5, #0]
 800c540:	b903      	cbnz	r3, 800c544 <__sflush_r+0x78>
 800c542:	6560      	str	r0, [r4, #84]	@ 0x54
 800c544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c546:	602f      	str	r7, [r5, #0]
 800c548:	b1b9      	cbz	r1, 800c57a <__sflush_r+0xae>
 800c54a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c54e:	4299      	cmp	r1, r3
 800c550:	d002      	beq.n	800c558 <__sflush_r+0x8c>
 800c552:	4628      	mov	r0, r5
 800c554:	f7ff fb48 	bl	800bbe8 <_free_r>
 800c558:	2300      	movs	r3, #0
 800c55a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c55c:	e00d      	b.n	800c57a <__sflush_r+0xae>
 800c55e:	2301      	movs	r3, #1
 800c560:	4628      	mov	r0, r5
 800c562:	47b0      	blx	r6
 800c564:	4602      	mov	r2, r0
 800c566:	1c50      	adds	r0, r2, #1
 800c568:	d1c9      	bne.n	800c4fe <__sflush_r+0x32>
 800c56a:	682b      	ldr	r3, [r5, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d0c6      	beq.n	800c4fe <__sflush_r+0x32>
 800c570:	2b1d      	cmp	r3, #29
 800c572:	d001      	beq.n	800c578 <__sflush_r+0xac>
 800c574:	2b16      	cmp	r3, #22
 800c576:	d11e      	bne.n	800c5b6 <__sflush_r+0xea>
 800c578:	602f      	str	r7, [r5, #0]
 800c57a:	2000      	movs	r0, #0
 800c57c:	e022      	b.n	800c5c4 <__sflush_r+0xf8>
 800c57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c582:	b21b      	sxth	r3, r3
 800c584:	e01b      	b.n	800c5be <__sflush_r+0xf2>
 800c586:	690f      	ldr	r7, [r1, #16]
 800c588:	2f00      	cmp	r7, #0
 800c58a:	d0f6      	beq.n	800c57a <__sflush_r+0xae>
 800c58c:	0793      	lsls	r3, r2, #30
 800c58e:	680e      	ldr	r6, [r1, #0]
 800c590:	bf08      	it	eq
 800c592:	694b      	ldreq	r3, [r1, #20]
 800c594:	600f      	str	r7, [r1, #0]
 800c596:	bf18      	it	ne
 800c598:	2300      	movne	r3, #0
 800c59a:	eba6 0807 	sub.w	r8, r6, r7
 800c59e:	608b      	str	r3, [r1, #8]
 800c5a0:	f1b8 0f00 	cmp.w	r8, #0
 800c5a4:	dde9      	ble.n	800c57a <__sflush_r+0xae>
 800c5a6:	6a21      	ldr	r1, [r4, #32]
 800c5a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c5aa:	4643      	mov	r3, r8
 800c5ac:	463a      	mov	r2, r7
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	47b0      	blx	r6
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	dc08      	bgt.n	800c5c8 <__sflush_r+0xfc>
 800c5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5be:	81a3      	strh	r3, [r4, #12]
 800c5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c8:	4407      	add	r7, r0
 800c5ca:	eba8 0800 	sub.w	r8, r8, r0
 800c5ce:	e7e7      	b.n	800c5a0 <__sflush_r+0xd4>
 800c5d0:	dfbffffe 	.word	0xdfbffffe

0800c5d4 <_fflush_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	690b      	ldr	r3, [r1, #16]
 800c5d8:	4605      	mov	r5, r0
 800c5da:	460c      	mov	r4, r1
 800c5dc:	b913      	cbnz	r3, 800c5e4 <_fflush_r+0x10>
 800c5de:	2500      	movs	r5, #0
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	b118      	cbz	r0, 800c5ee <_fflush_r+0x1a>
 800c5e6:	6a03      	ldr	r3, [r0, #32]
 800c5e8:	b90b      	cbnz	r3, 800c5ee <_fflush_r+0x1a>
 800c5ea:	f7ff f80b 	bl	800b604 <__sinit>
 800c5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d0f3      	beq.n	800c5de <_fflush_r+0xa>
 800c5f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5f8:	07d0      	lsls	r0, r2, #31
 800c5fa:	d404      	bmi.n	800c606 <_fflush_r+0x32>
 800c5fc:	0599      	lsls	r1, r3, #22
 800c5fe:	d402      	bmi.n	800c606 <_fflush_r+0x32>
 800c600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c602:	f7ff faba 	bl	800bb7a <__retarget_lock_acquire_recursive>
 800c606:	4628      	mov	r0, r5
 800c608:	4621      	mov	r1, r4
 800c60a:	f7ff ff5f 	bl	800c4cc <__sflush_r>
 800c60e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c610:	07da      	lsls	r2, r3, #31
 800c612:	4605      	mov	r5, r0
 800c614:	d4e4      	bmi.n	800c5e0 <_fflush_r+0xc>
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	059b      	lsls	r3, r3, #22
 800c61a:	d4e1      	bmi.n	800c5e0 <_fflush_r+0xc>
 800c61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c61e:	f7ff faad 	bl	800bb7c <__retarget_lock_release_recursive>
 800c622:	e7dd      	b.n	800c5e0 <_fflush_r+0xc>

0800c624 <fiprintf>:
 800c624:	b40e      	push	{r1, r2, r3}
 800c626:	b503      	push	{r0, r1, lr}
 800c628:	4601      	mov	r1, r0
 800c62a:	ab03      	add	r3, sp, #12
 800c62c:	4805      	ldr	r0, [pc, #20]	@ (800c644 <fiprintf+0x20>)
 800c62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c632:	6800      	ldr	r0, [r0, #0]
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	f7ff fca3 	bl	800bf80 <_vfiprintf_r>
 800c63a:	b002      	add	sp, #8
 800c63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c640:	b003      	add	sp, #12
 800c642:	4770      	bx	lr
 800c644:	20000038 	.word	0x20000038

0800c648 <__swhatbuf_r>:
 800c648:	b570      	push	{r4, r5, r6, lr}
 800c64a:	460c      	mov	r4, r1
 800c64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c650:	2900      	cmp	r1, #0
 800c652:	b096      	sub	sp, #88	@ 0x58
 800c654:	4615      	mov	r5, r2
 800c656:	461e      	mov	r6, r3
 800c658:	da0d      	bge.n	800c676 <__swhatbuf_r+0x2e>
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c660:	f04f 0100 	mov.w	r1, #0
 800c664:	bf14      	ite	ne
 800c666:	2340      	movne	r3, #64	@ 0x40
 800c668:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c66c:	2000      	movs	r0, #0
 800c66e:	6031      	str	r1, [r6, #0]
 800c670:	602b      	str	r3, [r5, #0]
 800c672:	b016      	add	sp, #88	@ 0x58
 800c674:	bd70      	pop	{r4, r5, r6, pc}
 800c676:	466a      	mov	r2, sp
 800c678:	f000 f862 	bl	800c740 <_fstat_r>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	dbec      	blt.n	800c65a <__swhatbuf_r+0x12>
 800c680:	9901      	ldr	r1, [sp, #4]
 800c682:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c686:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c68a:	4259      	negs	r1, r3
 800c68c:	4159      	adcs	r1, r3
 800c68e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c692:	e7eb      	b.n	800c66c <__swhatbuf_r+0x24>

0800c694 <__smakebuf_r>:
 800c694:	898b      	ldrh	r3, [r1, #12]
 800c696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c698:	079d      	lsls	r5, r3, #30
 800c69a:	4606      	mov	r6, r0
 800c69c:	460c      	mov	r4, r1
 800c69e:	d507      	bpl.n	800c6b0 <__smakebuf_r+0x1c>
 800c6a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	6123      	str	r3, [r4, #16]
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	6163      	str	r3, [r4, #20]
 800c6ac:	b003      	add	sp, #12
 800c6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b0:	ab01      	add	r3, sp, #4
 800c6b2:	466a      	mov	r2, sp
 800c6b4:	f7ff ffc8 	bl	800c648 <__swhatbuf_r>
 800c6b8:	9f00      	ldr	r7, [sp, #0]
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	4639      	mov	r1, r7
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f7fe fe04 	bl	800b2cc <_malloc_r>
 800c6c4:	b948      	cbnz	r0, 800c6da <__smakebuf_r+0x46>
 800c6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ca:	059a      	lsls	r2, r3, #22
 800c6cc:	d4ee      	bmi.n	800c6ac <__smakebuf_r+0x18>
 800c6ce:	f023 0303 	bic.w	r3, r3, #3
 800c6d2:	f043 0302 	orr.w	r3, r3, #2
 800c6d6:	81a3      	strh	r3, [r4, #12]
 800c6d8:	e7e2      	b.n	800c6a0 <__smakebuf_r+0xc>
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	6020      	str	r0, [r4, #0]
 800c6de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	9b01      	ldr	r3, [sp, #4]
 800c6e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c6ea:	b15b      	cbz	r3, 800c704 <__smakebuf_r+0x70>
 800c6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f000 f837 	bl	800c764 <_isatty_r>
 800c6f6:	b128      	cbz	r0, 800c704 <__smakebuf_r+0x70>
 800c6f8:	89a3      	ldrh	r3, [r4, #12]
 800c6fa:	f023 0303 	bic.w	r3, r3, #3
 800c6fe:	f043 0301 	orr.w	r3, r3, #1
 800c702:	81a3      	strh	r3, [r4, #12]
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	431d      	orrs	r5, r3
 800c708:	81a5      	strh	r5, [r4, #12]
 800c70a:	e7cf      	b.n	800c6ac <__smakebuf_r+0x18>

0800c70c <memmove>:
 800c70c:	4288      	cmp	r0, r1
 800c70e:	b510      	push	{r4, lr}
 800c710:	eb01 0402 	add.w	r4, r1, r2
 800c714:	d902      	bls.n	800c71c <memmove+0x10>
 800c716:	4284      	cmp	r4, r0
 800c718:	4623      	mov	r3, r4
 800c71a:	d807      	bhi.n	800c72c <memmove+0x20>
 800c71c:	1e43      	subs	r3, r0, #1
 800c71e:	42a1      	cmp	r1, r4
 800c720:	d008      	beq.n	800c734 <memmove+0x28>
 800c722:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c72a:	e7f8      	b.n	800c71e <memmove+0x12>
 800c72c:	4402      	add	r2, r0
 800c72e:	4601      	mov	r1, r0
 800c730:	428a      	cmp	r2, r1
 800c732:	d100      	bne.n	800c736 <memmove+0x2a>
 800c734:	bd10      	pop	{r4, pc}
 800c736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c73a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c73e:	e7f7      	b.n	800c730 <memmove+0x24>

0800c740 <_fstat_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d07      	ldr	r5, [pc, #28]	@ (800c760 <_fstat_r+0x20>)
 800c744:	2300      	movs	r3, #0
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	4611      	mov	r1, r2
 800c74c:	602b      	str	r3, [r5, #0]
 800c74e:	f7f5 fcdb 	bl	8002108 <_fstat>
 800c752:	1c43      	adds	r3, r0, #1
 800c754:	d102      	bne.n	800c75c <_fstat_r+0x1c>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	b103      	cbz	r3, 800c75c <_fstat_r+0x1c>
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	bd38      	pop	{r3, r4, r5, pc}
 800c75e:	bf00      	nop
 800c760:	20000ef0 	.word	0x20000ef0

0800c764 <_isatty_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4d06      	ldr	r5, [pc, #24]	@ (800c780 <_isatty_r+0x1c>)
 800c768:	2300      	movs	r3, #0
 800c76a:	4604      	mov	r4, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	602b      	str	r3, [r5, #0]
 800c770:	f7f5 fcda 	bl	8002128 <_isatty>
 800c774:	1c43      	adds	r3, r0, #1
 800c776:	d102      	bne.n	800c77e <_isatty_r+0x1a>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	b103      	cbz	r3, 800c77e <_isatty_r+0x1a>
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	bd38      	pop	{r3, r4, r5, pc}
 800c780:	20000ef0 	.word	0x20000ef0

0800c784 <abort>:
 800c784:	b508      	push	{r3, lr}
 800c786:	2006      	movs	r0, #6
 800c788:	f000 f85a 	bl	800c840 <raise>
 800c78c:	2001      	movs	r0, #1
 800c78e:	f7f5 fc6b 	bl	8002068 <_exit>

0800c792 <_realloc_r>:
 800c792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c796:	4680      	mov	r8, r0
 800c798:	4615      	mov	r5, r2
 800c79a:	460c      	mov	r4, r1
 800c79c:	b921      	cbnz	r1, 800c7a8 <_realloc_r+0x16>
 800c79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	f7fe bd92 	b.w	800b2cc <_malloc_r>
 800c7a8:	b92a      	cbnz	r2, 800c7b6 <_realloc_r+0x24>
 800c7aa:	f7ff fa1d 	bl	800bbe8 <_free_r>
 800c7ae:	2400      	movs	r4, #0
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b6:	f000 f85f 	bl	800c878 <_malloc_usable_size_r>
 800c7ba:	4285      	cmp	r5, r0
 800c7bc:	4606      	mov	r6, r0
 800c7be:	d802      	bhi.n	800c7c6 <_realloc_r+0x34>
 800c7c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c7c4:	d8f4      	bhi.n	800c7b0 <_realloc_r+0x1e>
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	4640      	mov	r0, r8
 800c7ca:	f7fe fd7f 	bl	800b2cc <_malloc_r>
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d0ec      	beq.n	800c7ae <_realloc_r+0x1c>
 800c7d4:	42b5      	cmp	r5, r6
 800c7d6:	462a      	mov	r2, r5
 800c7d8:	4621      	mov	r1, r4
 800c7da:	bf28      	it	cs
 800c7dc:	4632      	movcs	r2, r6
 800c7de:	f7ff f9d6 	bl	800bb8e <memcpy>
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	f7ff f9ff 	bl	800bbe8 <_free_r>
 800c7ea:	463c      	mov	r4, r7
 800c7ec:	e7e0      	b.n	800c7b0 <_realloc_r+0x1e>

0800c7ee <_raise_r>:
 800c7ee:	291f      	cmp	r1, #31
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	d904      	bls.n	800c802 <_raise_r+0x14>
 800c7f8:	2316      	movs	r3, #22
 800c7fa:	6003      	str	r3, [r0, #0]
 800c7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c800:	bd38      	pop	{r3, r4, r5, pc}
 800c802:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c804:	b112      	cbz	r2, 800c80c <_raise_r+0x1e>
 800c806:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c80a:	b94b      	cbnz	r3, 800c820 <_raise_r+0x32>
 800c80c:	4628      	mov	r0, r5
 800c80e:	f000 f831 	bl	800c874 <_getpid_r>
 800c812:	4622      	mov	r2, r4
 800c814:	4601      	mov	r1, r0
 800c816:	4628      	mov	r0, r5
 800c818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c81c:	f000 b818 	b.w	800c850 <_kill_r>
 800c820:	2b01      	cmp	r3, #1
 800c822:	d00a      	beq.n	800c83a <_raise_r+0x4c>
 800c824:	1c59      	adds	r1, r3, #1
 800c826:	d103      	bne.n	800c830 <_raise_r+0x42>
 800c828:	2316      	movs	r3, #22
 800c82a:	6003      	str	r3, [r0, #0]
 800c82c:	2001      	movs	r0, #1
 800c82e:	e7e7      	b.n	800c800 <_raise_r+0x12>
 800c830:	2100      	movs	r1, #0
 800c832:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c836:	4620      	mov	r0, r4
 800c838:	4798      	blx	r3
 800c83a:	2000      	movs	r0, #0
 800c83c:	e7e0      	b.n	800c800 <_raise_r+0x12>
	...

0800c840 <raise>:
 800c840:	4b02      	ldr	r3, [pc, #8]	@ (800c84c <raise+0xc>)
 800c842:	4601      	mov	r1, r0
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	f7ff bfd2 	b.w	800c7ee <_raise_r>
 800c84a:	bf00      	nop
 800c84c:	20000038 	.word	0x20000038

0800c850 <_kill_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d07      	ldr	r5, [pc, #28]	@ (800c870 <_kill_r+0x20>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	4611      	mov	r1, r2
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	f7f5 fbf3 	bl	8002048 <_kill>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	d102      	bne.n	800c86c <_kill_r+0x1c>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	b103      	cbz	r3, 800c86c <_kill_r+0x1c>
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	bd38      	pop	{r3, r4, r5, pc}
 800c86e:	bf00      	nop
 800c870:	20000ef0 	.word	0x20000ef0

0800c874 <_getpid_r>:
 800c874:	f7f5 bbe0 	b.w	8002038 <_getpid>

0800c878 <_malloc_usable_size_r>:
 800c878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c87c:	1f18      	subs	r0, r3, #4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	bfbc      	itt	lt
 800c882:	580b      	ldrlt	r3, [r1, r0]
 800c884:	18c0      	addlt	r0, r0, r3
 800c886:	4770      	bx	lr

0800c888 <_init>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	bf00      	nop
 800c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88e:	bc08      	pop	{r3}
 800c890:	469e      	mov	lr, r3
 800c892:	4770      	bx	lr

0800c894 <_fini>:
 800c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c896:	bf00      	nop
 800c898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89a:	bc08      	pop	{r3}
 800c89c:	469e      	mov	lr, r3
 800c89e:	4770      	bx	lr
